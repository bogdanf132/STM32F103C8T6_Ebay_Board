
ebay_STM32F103C8_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800128c  0800128c  0001128c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080013a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000008  080013a8  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000068  080013a8  00020068  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010f47  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002007  00000000  00000000  00030f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000489a  00000000  00000000  00032f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c0  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054d1  00000000  00000000  00038800  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b7f  00000000  00000000  0003dcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040850  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001538  00000000  00000000  000408cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08001274 	.word	0x08001274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08001274 	.word	0x08001274

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f82d 	bl	80001b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f000 ffc4 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f000 ffa0 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	20000024 	.word	0x20000024
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000024 	.word	0x20000024

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001b8:	1ec3      	subs	r3, r0, #3
 80001ba:	2b04      	cmp	r3, #4
{
 80001bc:	b510      	push	{r4, lr}
 80001be:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001c0:	d903      	bls.n	80001ca <HAL_NVIC_SetPriorityGrouping+0x12>
 80001c2:	21a2      	movs	r1, #162	; 0xa2
 80001c4:	4809      	ldr	r0, [pc, #36]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x34>)
 80001c6:	f000 ff6d 	bl	80010a4 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001cc:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ce:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001d8:	041b      	lsls	r3, r3, #16
 80001da:	0c1b      	lsrs	r3, r3, #16
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001e4:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80001e6:	60d4      	str	r4, [r2, #12]
 80001e8:	bd10      	pop	{r4, pc}
 80001ea:	bf00      	nop
 80001ec:	0800129c 	.word	0x0800129c
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80001f4:	2a0f      	cmp	r2, #15
{ 
 80001f6:	b570      	push	{r4, r5, r6, lr}
 80001f8:	4604      	mov	r4, r0
 80001fa:	460e      	mov	r6, r1
 80001fc:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80001fe:	d903      	bls.n	8000208 <HAL_NVIC_SetPriority+0x14>
 8000200:	21ba      	movs	r1, #186	; 0xba
 8000202:	481a      	ldr	r0, [pc, #104]	; (800026c <HAL_NVIC_SetPriority+0x78>)
 8000204:	f000 ff4e 	bl	80010a4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000208:	2e0f      	cmp	r6, #15
 800020a:	d903      	bls.n	8000214 <HAL_NVIC_SetPriority+0x20>
 800020c:	21bb      	movs	r1, #187	; 0xbb
 800020e:	4817      	ldr	r0, [pc, #92]	; (800026c <HAL_NVIC_SetPriority+0x78>)
 8000210:	f000 ff48 	bl	80010a4 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000216:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	68d9      	ldr	r1, [r3, #12]
 800021a:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021e:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000222:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000224:	2b04      	cmp	r3, #4
 8000226:	bf28      	it	cs
 8000228:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022a:	2a06      	cmp	r2, #6
 800022c:	bf94      	ite	ls
 800022e:	2100      	movls	r1, #0
 8000230:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	fa00 f203 	lsl.w	r2, r0, r3
 8000236:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000238:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023e:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000242:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	ea42 0205 	orr.w	r2, r2, r5
 8000248:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	bfaf      	iteee	ge
 800024e:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	4b08      	ldrlt	r3, [pc, #32]	; (8000274 <HAL_NVIC_SetPriority+0x80>)
 8000254:	f004 040f 	andlt.w	r4, r4, #15
 8000258:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfa5      	ittet	ge
 800025c:	b2d2      	uxtbge	r2, r2
 800025e:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	0800129c 	.word	0x0800129c
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800027a:	1e04      	subs	r4, r0, #0
 800027c:	da03      	bge.n	8000286 <HAL_NVIC_EnableIRQ+0xe>
 800027e:	21ce      	movs	r1, #206	; 0xce
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <HAL_NVIC_EnableIRQ+0x24>)
 8000282:	f000 ff0f 	bl	80010a4 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000286:	2301      	movs	r3, #1
 8000288:	0962      	lsrs	r2, r4, #5
 800028a:	f004 041f 	and.w	r4, r4, #31
 800028e:	fa03 f404 	lsl.w	r4, r3, r4
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_NVIC_EnableIRQ+0x28>)
 8000294:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000298:	bd10      	pop	{r4, pc}
 800029a:	bf00      	nop
 800029c:	0800129c 	.word	0x0800129c
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002a8:	4aaa      	ldr	r2, [pc, #680]	; (8000554 <HAL_GPIO_Init+0x2b0>)
{
 80002aa:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002ac:	4290      	cmp	r0, r2
{
 80002ae:	4604      	mov	r4, r0
 80002b0:	468b      	mov	fp, r1
 80002b2:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002b4:	d013      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d00f      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002c2:	4290      	cmp	r0, r2
 80002c4:	d00b      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d007      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002d2:	4290      	cmp	r0, r2
 80002d4:	d003      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002d6:	21cd      	movs	r1, #205	; 0xcd
 80002d8:	489f      	ldr	r0, [pc, #636]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80002da:	f000 fee3 	bl	80010a4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80002de:	f8db 2000 	ldr.w	r2, [fp]
 80002e2:	b291      	uxth	r1, r2
 80002e4:	b111      	cbz	r1, 80002ec <HAL_GPIO_Init+0x48>
 80002e6:	0c12      	lsrs	r2, r2, #16
 80002e8:	0412      	lsls	r2, r2, #16
 80002ea:	b11a      	cbz	r2, 80002f4 <HAL_GPIO_Init+0x50>
 80002ec:	21ce      	movs	r1, #206	; 0xce
 80002ee:	489a      	ldr	r0, [pc, #616]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80002f0:	f000 fed8 	bl	80010a4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80002f4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80002f8:	2a03      	cmp	r2, #3
 80002fa:	d917      	bls.n	800032c <HAL_GPIO_Init+0x88>
 80002fc:	f1a2 0111 	sub.w	r1, r2, #17
 8000300:	2901      	cmp	r1, #1
 8000302:	d913      	bls.n	800032c <HAL_GPIO_Init+0x88>
 8000304:	4895      	ldr	r0, [pc, #596]	; (800055c <HAL_GPIO_Init+0x2b8>)
 8000306:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800030a:	4281      	cmp	r1, r0
 800030c:	d00e      	beq.n	800032c <HAL_GPIO_Init+0x88>
 800030e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000312:	4282      	cmp	r2, r0
 8000314:	d00a      	beq.n	800032c <HAL_GPIO_Init+0x88>
 8000316:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800031a:	4281      	cmp	r1, r0
 800031c:	d006      	beq.n	800032c <HAL_GPIO_Init+0x88>
 800031e:	4990      	ldr	r1, [pc, #576]	; (8000560 <HAL_GPIO_Init+0x2bc>)
 8000320:	428a      	cmp	r2, r1
 8000322:	d003      	beq.n	800032c <HAL_GPIO_Init+0x88>
 8000324:	21cf      	movs	r1, #207	; 0xcf
 8000326:	488c      	ldr	r0, [pc, #560]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000328:	f000 febc 	bl	80010a4 <assert_failed>
{
 800032c:	2500      	movs	r5, #0
 800032e:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000330:	f8df a244 	ldr.w	sl, [pc, #580]	; 8000578 <HAL_GPIO_Init+0x2d4>
 8000334:	4e8b      	ldr	r6, [pc, #556]	; (8000564 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8000336:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000338:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 800033c:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000340:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8000344:	45b9      	cmp	r9, r7
 8000346:	f040 808f 	bne.w	8000468 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800034a:	9b01      	ldr	r3, [sp, #4]
 800034c:	429c      	cmp	r4, r3
 800034e:	d011      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000350:	4985      	ldr	r1, [pc, #532]	; (8000568 <HAL_GPIO_Init+0x2c4>)
 8000352:	428c      	cmp	r4, r1
 8000354:	d00e      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000356:	4b85      	ldr	r3, [pc, #532]	; (800056c <HAL_GPIO_Init+0x2c8>)
 8000358:	429c      	cmp	r4, r3
 800035a:	d00b      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 800035c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000360:	428c      	cmp	r4, r1
 8000362:	d007      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000364:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000368:	428c      	cmp	r4, r1
 800036a:	d003      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 800036c:	21dd      	movs	r1, #221	; 0xdd
 800036e:	487a      	ldr	r0, [pc, #488]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000370:	f000 fe98 	bl	80010a4 <assert_failed>
      switch (GPIO_Init->Mode)
 8000374:	f8db 1004 	ldr.w	r1, [fp, #4]
 8000378:	2912      	cmp	r1, #18
 800037a:	f000 80d3 	beq.w	8000524 <HAL_GPIO_Init+0x280>
 800037e:	f200 808d 	bhi.w	800049c <HAL_GPIO_Init+0x1f8>
 8000382:	2902      	cmp	r1, #2
 8000384:	f000 80c1 	beq.w	800050a <HAL_GPIO_Init+0x266>
 8000388:	d877      	bhi.n	800047a <HAL_GPIO_Init+0x1d6>
 800038a:	2900      	cmp	r1, #0
 800038c:	f000 8093 	beq.w	80004b6 <HAL_GPIO_Init+0x212>
 8000390:	2901      	cmp	r1, #1
 8000392:	f000 80ae 	beq.w	80004f2 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000396:	2fff      	cmp	r7, #255	; 0xff
 8000398:	bf82      	ittt	hi
 800039a:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 800039e:	f1ae 0e08 	subhi.w	lr, lr, #8
 80003a2:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003a6:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003aa:	bf9d      	ittte	ls
 80003ac:	4620      	movls	r0, r4
 80003ae:	6822      	ldrls	r2, [r4, #0]
 80003b0:	ea4f 0188 	movls.w	r1, r8, lsl #2
 80003b4:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003b6:	fa0e fc01 	lsl.w	ip, lr, r1
 80003ba:	ea22 020c 	bic.w	r2, r2, ip
 80003be:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c2:	bf88      	it	hi
 80003c4:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003c6:	4311      	orrs	r1, r2
 80003c8:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ca:	f8db 0004 	ldr.w	r0, [fp, #4]
 80003ce:	00c3      	lsls	r3, r0, #3
 80003d0:	d54a      	bpl.n	8000468 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003d6:	f028 0103 	bic.w	r1, r8, #3
 80003da:	f042 0201 	orr.w	r2, r2, #1
 80003de:	f8ca 2018 	str.w	r2, [sl, #24]
 80003e2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003ea:	f002 0201 	and.w	r2, r2, #1
 80003ee:	9203      	str	r2, [sp, #12]
 80003f0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f4:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f8:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000400:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000402:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000406:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000408:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800040c:	f000 809b 	beq.w	8000546 <HAL_GPIO_Init+0x2a2>
 8000410:	4a55      	ldr	r2, [pc, #340]	; (8000568 <HAL_GPIO_Init+0x2c4>)
 8000412:	4294      	cmp	r4, r2
 8000414:	f000 8099 	beq.w	800054a <HAL_GPIO_Init+0x2a6>
 8000418:	4b54      	ldr	r3, [pc, #336]	; (800056c <HAL_GPIO_Init+0x2c8>)
 800041a:	429c      	cmp	r4, r3
 800041c:	f000 8097 	beq.w	800054e <HAL_GPIO_Init+0x2aa>
 8000420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000424:	4294      	cmp	r4, r2
 8000426:	bf14      	ite	ne
 8000428:	2204      	movne	r2, #4
 800042a:	2203      	moveq	r2, #3
 800042c:	fa02 f20c 	lsl.w	r2, r2, ip
 8000430:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8000434:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000436:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000438:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800043a:	bf4c      	ite	mi
 800043c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800043e:	43ba      	bicpl	r2, r7
 8000440:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000442:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000444:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000446:	bf4c      	ite	mi
 8000448:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800044a:	43ba      	bicpl	r2, r7
 800044c:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800044e:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000450:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000452:	bf4c      	ite	mi
 8000454:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000456:	43ba      	bicpl	r2, r7
 8000458:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800045a:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800045c:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800045e:	bf4c      	ite	mi
 8000460:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000462:	ea22 0707 	bicpl.w	r7, r2, r7
 8000466:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000468:	f108 0801 	add.w	r8, r8, #1
 800046c:	f1b8 0f10 	cmp.w	r8, #16
 8000470:	f47f af61 	bne.w	8000336 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8000474:	b005      	add	sp, #20
 8000476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800047a:	2903      	cmp	r1, #3
 800047c:	d05f      	beq.n	800053e <HAL_GPIO_Init+0x29a>
 800047e:	2911      	cmp	r1, #17
 8000480:	d189      	bne.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000482:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000486:	3a01      	subs	r2, #1
 8000488:	2a02      	cmp	r2, #2
 800048a:	d903      	bls.n	8000494 <HAL_GPIO_Init+0x1f0>
 800048c:	21ec      	movs	r1, #236	; 0xec
 800048e:	4832      	ldr	r0, [pc, #200]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000490:	f000 fe08 	bl	80010a4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000494:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000498:	3504      	adds	r5, #4
          break;
 800049a:	e77c      	b.n	8000396 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800049c:	4834      	ldr	r0, [pc, #208]	; (8000570 <HAL_GPIO_Init+0x2cc>)
 800049e:	4281      	cmp	r1, r0
 80004a0:	d009      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004a2:	d81c      	bhi.n	80004de <HAL_GPIO_Init+0x23a>
 80004a4:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004a8:	4281      	cmp	r1, r0
 80004aa:	d004      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004ac:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004b0:	4281      	cmp	r1, r0
 80004b2:	f47f af70 	bne.w	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80004b6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004ba:	2902      	cmp	r1, #2
 80004bc:	d904      	bls.n	80004c8 <HAL_GPIO_Init+0x224>
 80004be:	f240 1107 	movw	r1, #263	; 0x107
 80004c2:	4825      	ldr	r0, [pc, #148]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80004c4:	f000 fdee 	bl	80010a4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004c8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004cc:	b3c9      	cbz	r1, 8000542 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ce:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80004d0:	bf0c      	ite	eq
 80004d2:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80004d6:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004da:	2508      	movs	r5, #8
 80004dc:	e75b      	b.n	8000396 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004de:	4825      	ldr	r0, [pc, #148]	; (8000574 <HAL_GPIO_Init+0x2d0>)
 80004e0:	4281      	cmp	r1, r0
 80004e2:	d0e8      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004e4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004e8:	4281      	cmp	r1, r0
 80004ea:	d0e4      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004ec:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004f0:	e7de      	b.n	80004b0 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80004f2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80004f6:	3a01      	subs	r2, #1
 80004f8:	2a02      	cmp	r2, #2
 80004fa:	d903      	bls.n	8000504 <HAL_GPIO_Init+0x260>
 80004fc:	21e5      	movs	r1, #229	; 0xe5
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000500:	f000 fdd0 	bl	80010a4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8000508:	e745      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800050a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800050e:	3a01      	subs	r2, #1
 8000510:	2a02      	cmp	r2, #2
 8000512:	d903      	bls.n	800051c <HAL_GPIO_Init+0x278>
 8000514:	21f3      	movs	r1, #243	; 0xf3
 8000516:	4810      	ldr	r0, [pc, #64]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000518:	f000 fdc4 	bl	80010a4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800051c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000520:	3508      	adds	r5, #8
          break;
 8000522:	e738      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000524:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000528:	3a01      	subs	r2, #1
 800052a:	2a02      	cmp	r2, #2
 800052c:	d903      	bls.n	8000536 <HAL_GPIO_Init+0x292>
 800052e:	21fa      	movs	r1, #250	; 0xfa
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000532:	f000 fdb7 	bl	80010a4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000536:	f8db 500c 	ldr.w	r5, [fp, #12]
 800053a:	350c      	adds	r5, #12
          break;
 800053c:	e72b      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800053e:	2500      	movs	r5, #0
 8000540:	e729      	b.n	8000396 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000542:	2504      	movs	r5, #4
 8000544:	e727      	b.n	8000396 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000546:	2200      	movs	r2, #0
 8000548:	e770      	b.n	800042c <HAL_GPIO_Init+0x188>
 800054a:	2201      	movs	r2, #1
 800054c:	e76e      	b.n	800042c <HAL_GPIO_Init+0x188>
 800054e:	2202      	movs	r2, #2
 8000550:	e76c      	b.n	800042c <HAL_GPIO_Init+0x188>
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800
 8000558:	080012d7 	.word	0x080012d7
 800055c:	10110000 	.word	0x10110000
 8000560:	10220000 	.word	0x10220000
 8000564:	40010400 	.word	0x40010400
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40011000 	.word	0x40011000
 8000570:	10210000 	.word	0x10210000
 8000574:	10310000 	.word	0x10310000
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4605      	mov	r5, r0
 8000580:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000582:	460c      	mov	r4, r1
 8000584:	b921      	cbnz	r1, 8000590 <HAL_GPIO_WritePin+0x14>
 8000586:	f240 11e3 	movw	r1, #483	; 0x1e3
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <HAL_GPIO_WritePin+0x30>)
 800058c:	f000 fd8a 	bl	80010a4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000590:	2e01      	cmp	r6, #1
 8000592:	d906      	bls.n	80005a2 <HAL_GPIO_WritePin+0x26>
 8000594:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <HAL_GPIO_WritePin+0x30>)
 800059a:	f000 fd83 	bl	80010a4 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800059e:	612c      	str	r4, [r5, #16]
 80005a0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d1fb      	bne.n	800059e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005a6:	0424      	lsls	r4, r4, #16
 80005a8:	e7f9      	b.n	800059e <HAL_GPIO_WritePin+0x22>
 80005aa:	bf00      	nop
 80005ac:	080012d7 	.word	0x080012d7

080005b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80005b4:	4604      	mov	r4, r0
 80005b6:	b920      	cbnz	r0, 80005c2 <HAL_RCC_OscConfig+0x12>
 80005b8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80005bc:	48a5      	ldr	r0, [pc, #660]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80005be:	f000 fd71 	bl	80010a4 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	b133      	cbz	r3, 80005d4 <HAL_RCC_OscConfig+0x24>
 80005c6:	071a      	lsls	r2, r3, #28
 80005c8:	d104      	bne.n	80005d4 <HAL_RCC_OscConfig+0x24>
 80005ca:	f240 1171 	movw	r1, #369	; 0x171
 80005ce:	48a1      	ldr	r0, [pc, #644]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80005d0:	f000 fd68 	bl	80010a4 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	07db      	lsls	r3, r3, #31
 80005d8:	d418      	bmi.n	800060c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	079f      	lsls	r7, r3, #30
 80005de:	d472      	bmi.n	80006c6 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	0719      	lsls	r1, r3, #28
 80005e4:	f100 80b9 	bmi.w	800075a <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005e8:	6823      	ldr	r3, [r4, #0]
 80005ea:	075a      	lsls	r2, r3, #29
 80005ec:	f100 80eb 	bmi.w	80007c6 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80005f0:	69e3      	ldr	r3, [r4, #28]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d904      	bls.n	8000600 <HAL_RCC_OscConfig+0x50>
 80005f6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80005fa:	4896      	ldr	r0, [pc, #600]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80005fc:	f000 fd52 	bl	80010a4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000600:	69e2      	ldr	r2, [r4, #28]
 8000602:	2a00      	cmp	r2, #0
 8000604:	f040 815e 	bne.w	80008c4 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000608:	2000      	movs	r0, #0
 800060a:	e020      	b.n	800064e <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800060c:	6863      	ldr	r3, [r4, #4]
 800060e:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000612:	d007      	beq.n	8000624 <HAL_RCC_OscConfig+0x74>
 8000614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000618:	d004      	beq.n	8000624 <HAL_RCC_OscConfig+0x74>
 800061a:	f240 1177 	movw	r1, #375	; 0x177
 800061e:	488d      	ldr	r0, [pc, #564]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 8000620:	f000 fd40 	bl	80010a4 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000624:	4d8c      	ldr	r5, [pc, #560]	; (8000858 <HAL_RCC_OscConfig+0x2a8>)
 8000626:	686b      	ldr	r3, [r5, #4]
 8000628:	f003 030c 	and.w	r3, r3, #12
 800062c:	2b04      	cmp	r3, #4
 800062e:	d007      	beq.n	8000640 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000630:	686b      	ldr	r3, [r5, #4]
 8000632:	f003 030c 	and.w	r3, r3, #12
 8000636:	2b08      	cmp	r3, #8
 8000638:	d10c      	bne.n	8000654 <HAL_RCC_OscConfig+0xa4>
 800063a:	686b      	ldr	r3, [r5, #4]
 800063c:	03de      	lsls	r6, r3, #15
 800063e:	d509      	bpl.n	8000654 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000640:	682b      	ldr	r3, [r5, #0]
 8000642:	039d      	lsls	r5, r3, #14
 8000644:	d5c9      	bpl.n	80005da <HAL_RCC_OscConfig+0x2a>
 8000646:	6863      	ldr	r3, [r4, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1c6      	bne.n	80005da <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 800064c:	2001      	movs	r0, #1
}
 800064e:	b002      	add	sp, #8
 8000650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000654:	6863      	ldr	r3, [r4, #4]
 8000656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800065a:	d110      	bne.n	800067e <HAL_RCC_OscConfig+0xce>
 800065c:	682b      	ldr	r3, [r5, #0]
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000664:	f7ff fd90 	bl	8000188 <HAL_GetTick>
 8000668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800066a:	682b      	ldr	r3, [r5, #0]
 800066c:	0398      	lsls	r0, r3, #14
 800066e:	d4b4      	bmi.n	80005da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000670:	f7ff fd8a 	bl	8000188 <HAL_GetTick>
 8000674:	1b80      	subs	r0, r0, r6
 8000676:	2864      	cmp	r0, #100	; 0x64
 8000678:	d9f7      	bls.n	800066a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800067a:	2003      	movs	r0, #3
 800067c:	e7e7      	b.n	800064e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067e:	b99b      	cbnz	r3, 80006a8 <HAL_RCC_OscConfig+0xf8>
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000686:	602b      	str	r3, [r5, #0]
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000690:	f7ff fd7a 	bl	8000188 <HAL_GetTick>
 8000694:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000696:	682b      	ldr	r3, [r5, #0]
 8000698:	0399      	lsls	r1, r3, #14
 800069a:	d59e      	bpl.n	80005da <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800069c:	f7ff fd74 	bl	8000188 <HAL_GetTick>
 80006a0:	1b80      	subs	r0, r0, r6
 80006a2:	2864      	cmp	r0, #100	; 0x64
 80006a4:	d9f7      	bls.n	8000696 <HAL_RCC_OscConfig+0xe6>
 80006a6:	e7e8      	b.n	800067a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006ac:	682b      	ldr	r3, [r5, #0]
 80006ae:	d103      	bne.n	80006b8 <HAL_RCC_OscConfig+0x108>
 80006b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b4:	602b      	str	r3, [r5, #0]
 80006b6:	e7d1      	b.n	800065c <HAL_RCC_OscConfig+0xac>
 80006b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006bc:	602b      	str	r3, [r5, #0]
 80006be:	682b      	ldr	r3, [r5, #0]
 80006c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c4:	e7cd      	b.n	8000662 <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80006c6:	6923      	ldr	r3, [r4, #16]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d904      	bls.n	80006d6 <HAL_RCC_OscConfig+0x126>
 80006cc:	f240 11ab 	movw	r1, #427	; 0x1ab
 80006d0:	4860      	ldr	r0, [pc, #384]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80006d2:	f000 fce7 	bl	80010a4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80006d6:	6963      	ldr	r3, [r4, #20]
 80006d8:	2b1f      	cmp	r3, #31
 80006da:	d904      	bls.n	80006e6 <HAL_RCC_OscConfig+0x136>
 80006dc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80006e0:	485c      	ldr	r0, [pc, #368]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80006e2:	f000 fcdf 	bl	80010a4 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006e6:	4d5c      	ldr	r5, [pc, #368]	; (8000858 <HAL_RCC_OscConfig+0x2a8>)
 80006e8:	686b      	ldr	r3, [r5, #4]
 80006ea:	f013 0f0c 	tst.w	r3, #12
 80006ee:	d007      	beq.n	8000700 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006f0:	686b      	ldr	r3, [r5, #4]
 80006f2:	f003 030c 	and.w	r3, r3, #12
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d110      	bne.n	800071c <HAL_RCC_OscConfig+0x16c>
 80006fa:	686b      	ldr	r3, [r5, #4]
 80006fc:	03da      	lsls	r2, r3, #15
 80006fe:	d40d      	bmi.n	800071c <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	079b      	lsls	r3, r3, #30
 8000704:	d502      	bpl.n	800070c <HAL_RCC_OscConfig+0x15c>
 8000706:	6923      	ldr	r3, [r4, #16]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d19f      	bne.n	800064c <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800070c:	682b      	ldr	r3, [r5, #0]
 800070e:	6962      	ldr	r2, [r4, #20]
 8000710:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000714:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000718:	602b      	str	r3, [r5, #0]
 800071a:	e761      	b.n	80005e0 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800071c:	6922      	ldr	r2, [r4, #16]
 800071e:	4b4f      	ldr	r3, [pc, #316]	; (800085c <HAL_RCC_OscConfig+0x2ac>)
 8000720:	b16a      	cbz	r2, 800073e <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000726:	f7ff fd2f 	bl	8000188 <HAL_GetTick>
 800072a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	079f      	lsls	r7, r3, #30
 8000730:	d4ec      	bmi.n	800070c <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000732:	f7ff fd29 	bl	8000188 <HAL_GetTick>
 8000736:	1b80      	subs	r0, r0, r6
 8000738:	2802      	cmp	r0, #2
 800073a:	d9f7      	bls.n	800072c <HAL_RCC_OscConfig+0x17c>
 800073c:	e79d      	b.n	800067a <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 800073e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000740:	f7ff fd22 	bl	8000188 <HAL_GetTick>
 8000744:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000746:	682b      	ldr	r3, [r5, #0]
 8000748:	0798      	lsls	r0, r3, #30
 800074a:	f57f af49 	bpl.w	80005e0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800074e:	f7ff fd1b 	bl	8000188 <HAL_GetTick>
 8000752:	1b80      	subs	r0, r0, r6
 8000754:	2802      	cmp	r0, #2
 8000756:	d9f6      	bls.n	8000746 <HAL_RCC_OscConfig+0x196>
 8000758:	e78f      	b.n	800067a <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800075a:	69a3      	ldr	r3, [r4, #24]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d904      	bls.n	800076a <HAL_RCC_OscConfig+0x1ba>
 8000760:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000764:	483b      	ldr	r0, [pc, #236]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 8000766:	f000 fc9d 	bl	80010a4 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800076a:	69a2      	ldr	r2, [r4, #24]
 800076c:	4d3a      	ldr	r5, [pc, #232]	; (8000858 <HAL_RCC_OscConfig+0x2a8>)
 800076e:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <HAL_RCC_OscConfig+0x2b0>)
 8000770:	b1da      	cbz	r2, 80007aa <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000776:	f7ff fd07 	bl	8000188 <HAL_GetTick>
 800077a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800077c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800077e:	079b      	lsls	r3, r3, #30
 8000780:	d50d      	bpl.n	800079e <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000782:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000786:	4b37      	ldr	r3, [pc, #220]	; (8000864 <HAL_RCC_OscConfig+0x2b4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	fbb3 f3f2 	udiv	r3, r3, r2
 800078e:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000790:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f9      	bne.n	8000790 <HAL_RCC_OscConfig+0x1e0>
 800079c:	e724      	b.n	80005e8 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800079e:	f7ff fcf3 	bl	8000188 <HAL_GetTick>
 80007a2:	1b80      	subs	r0, r0, r6
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9e9      	bls.n	800077c <HAL_RCC_OscConfig+0x1cc>
 80007a8:	e767      	b.n	800067a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 80007aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007ac:	f7ff fcec 	bl	8000188 <HAL_GetTick>
 80007b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007b4:	079f      	lsls	r7, r3, #30
 80007b6:	f57f af17 	bpl.w	80005e8 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ba:	f7ff fce5 	bl	8000188 <HAL_GetTick>
 80007be:	1b80      	subs	r0, r0, r6
 80007c0:	2802      	cmp	r0, #2
 80007c2:	d9f6      	bls.n	80007b2 <HAL_RCC_OscConfig+0x202>
 80007c4:	e759      	b.n	800067a <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80007c6:	68e3      	ldr	r3, [r4, #12]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d906      	bls.n	80007da <HAL_RCC_OscConfig+0x22a>
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d004      	beq.n	80007da <HAL_RCC_OscConfig+0x22a>
 80007d0:	f240 211b 	movw	r1, #539	; 0x21b
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <HAL_RCC_OscConfig+0x2a4>)
 80007d6:	f000 fc65 	bl	80010a4 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007da:	4d1f      	ldr	r5, [pc, #124]	; (8000858 <HAL_RCC_OscConfig+0x2a8>)
 80007dc:	69eb      	ldr	r3, [r5, #28]
 80007de:	00d8      	lsls	r0, r3, #3
 80007e0:	d424      	bmi.n	800082c <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 80007e2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	69eb      	ldr	r3, [r5, #28]
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	61eb      	str	r3, [r5, #28]
 80007ec:	69eb      	ldr	r3, [r5, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007f6:	4e1c      	ldr	r6, [pc, #112]	; (8000868 <HAL_RCC_OscConfig+0x2b8>)
 80007f8:	6833      	ldr	r3, [r6, #0]
 80007fa:	05d9      	lsls	r1, r3, #23
 80007fc:	d518      	bpl.n	8000830 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007fe:	68e3      	ldr	r3, [r4, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d133      	bne.n	800086c <HAL_RCC_OscConfig+0x2bc>
 8000804:	6a2b      	ldr	r3, [r5, #32]
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800080c:	f7ff fcbc 	bl	8000188 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000810:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000814:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000816:	6a2b      	ldr	r3, [r5, #32]
 8000818:	079b      	lsls	r3, r3, #30
 800081a:	d54c      	bpl.n	80008b6 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 800081c:	2f00      	cmp	r7, #0
 800081e:	f43f aee7 	beq.w	80005f0 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000822:	69eb      	ldr	r3, [r5, #28]
 8000824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000828:	61eb      	str	r3, [r5, #28]
 800082a:	e6e1      	b.n	80005f0 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 800082c:	2700      	movs	r7, #0
 800082e:	e7e2      	b.n	80007f6 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000830:	6833      	ldr	r3, [r6, #0]
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000838:	f7ff fca6 	bl	8000188 <HAL_GetTick>
 800083c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800083e:	6833      	ldr	r3, [r6, #0]
 8000840:	05da      	lsls	r2, r3, #23
 8000842:	d4dc      	bmi.n	80007fe <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000844:	f7ff fca0 	bl	8000188 <HAL_GetTick>
 8000848:	eba0 0008 	sub.w	r0, r0, r8
 800084c:	2864      	cmp	r0, #100	; 0x64
 800084e:	d9f6      	bls.n	800083e <HAL_RCC_OscConfig+0x28e>
 8000850:	e713      	b.n	800067a <HAL_RCC_OscConfig+0xca>
 8000852:	bf00      	nop
 8000854:	08001310 	.word	0x08001310
 8000858:	40021000 	.word	0x40021000
 800085c:	42420000 	.word	0x42420000
 8000860:	42420480 	.word	0x42420480
 8000864:	20000004 	.word	0x20000004
 8000868:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800086c:	b9ab      	cbnz	r3, 800089a <HAL_RCC_OscConfig+0x2ea>
 800086e:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000870:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	622b      	str	r3, [r5, #32]
 800087a:	6a2b      	ldr	r3, [r5, #32]
 800087c:	f023 0304 	bic.w	r3, r3, #4
 8000880:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000882:	f7ff fc81 	bl	8000188 <HAL_GetTick>
 8000886:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000888:	6a2b      	ldr	r3, [r5, #32]
 800088a:	0798      	lsls	r0, r3, #30
 800088c:	d5c6      	bpl.n	800081c <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088e:	f7ff fc7b 	bl	8000188 <HAL_GetTick>
 8000892:	1b80      	subs	r0, r0, r6
 8000894:	4540      	cmp	r0, r8
 8000896:	d9f7      	bls.n	8000888 <HAL_RCC_OscConfig+0x2d8>
 8000898:	e6ef      	b.n	800067a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089a:	2b05      	cmp	r3, #5
 800089c:	6a2b      	ldr	r3, [r5, #32]
 800089e:	d103      	bne.n	80008a8 <HAL_RCC_OscConfig+0x2f8>
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	622b      	str	r3, [r5, #32]
 80008a6:	e7ad      	b.n	8000804 <HAL_RCC_OscConfig+0x254>
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	622b      	str	r3, [r5, #32]
 80008ae:	6a2b      	ldr	r3, [r5, #32]
 80008b0:	f023 0304 	bic.w	r3, r3, #4
 80008b4:	e7a9      	b.n	800080a <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b6:	f7ff fc67 	bl	8000188 <HAL_GetTick>
 80008ba:	eba0 0008 	sub.w	r0, r0, r8
 80008be:	42b0      	cmp	r0, r6
 80008c0:	d9a9      	bls.n	8000816 <HAL_RCC_OscConfig+0x266>
 80008c2:	e6da      	b.n	800067a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008c4:	4d38      	ldr	r5, [pc, #224]	; (80009a8 <HAL_RCC_OscConfig+0x3f8>)
 80008c6:	686b      	ldr	r3, [r5, #4]
 80008c8:	f003 030c 	and.w	r3, r3, #12
 80008cc:	2b08      	cmp	r3, #8
 80008ce:	f43f aebd 	beq.w	800064c <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d2:	2a02      	cmp	r2, #2
 80008d4:	4e35      	ldr	r6, [pc, #212]	; (80009ac <HAL_RCC_OscConfig+0x3fc>)
 80008d6:	d157      	bne.n	8000988 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80008d8:	6a23      	ldr	r3, [r4, #32]
 80008da:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80008de:	d004      	beq.n	80008ea <HAL_RCC_OscConfig+0x33a>
 80008e0:	f240 21c2 	movw	r1, #706	; 0x2c2
 80008e4:	4832      	ldr	r0, [pc, #200]	; (80009b0 <HAL_RCC_OscConfig+0x400>)
 80008e6:	f000 fbdd 	bl	80010a4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80008ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ec:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 80008f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80008f4:	d010      	beq.n	8000918 <HAL_RCC_OscConfig+0x368>
 80008f6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80008fa:	d00d      	beq.n	8000918 <HAL_RCC_OscConfig+0x368>
 80008fc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000900:	d00a      	beq.n	8000918 <HAL_RCC_OscConfig+0x368>
 8000902:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000906:	d007      	beq.n	8000918 <HAL_RCC_OscConfig+0x368>
 8000908:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800090c:	d004      	beq.n	8000918 <HAL_RCC_OscConfig+0x368>
 800090e:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000912:	4827      	ldr	r0, [pc, #156]	; (80009b0 <HAL_RCC_OscConfig+0x400>)
 8000914:	f000 fbc6 	bl	80010a4 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800091c:	f7ff fc34 	bl	8000188 <HAL_GetTick>
 8000920:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000922:	682b      	ldr	r3, [r5, #0]
 8000924:	0199      	lsls	r1, r3, #6
 8000926:	d429      	bmi.n	800097c <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000928:	6a23      	ldr	r3, [r4, #32]
 800092a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092e:	d10e      	bne.n	800094e <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8000930:	68a3      	ldr	r3, [r4, #8]
 8000932:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8000936:	d004      	beq.n	8000942 <HAL_RCC_OscConfig+0x392>
 8000938:	f240 21d9 	movw	r1, #729	; 0x2d9
 800093c:	481c      	ldr	r0, [pc, #112]	; (80009b0 <HAL_RCC_OscConfig+0x400>)
 800093e:	f000 fbb1 	bl	80010a4 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000942:	686b      	ldr	r3, [r5, #4]
 8000944:	68a2      	ldr	r2, [r4, #8]
 8000946:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800094a:	4313      	orrs	r3, r2
 800094c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800094e:	6a23      	ldr	r3, [r4, #32]
 8000950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000952:	686a      	ldr	r2, [r5, #4]
 8000954:	430b      	orrs	r3, r1
 8000956:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800095a:	4313      	orrs	r3, r2
 800095c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800095e:	2301      	movs	r3, #1
 8000960:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000962:	f7ff fc11 	bl	8000188 <HAL_GetTick>
 8000966:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	019a      	lsls	r2, r3, #6
 800096c:	f53f ae4c 	bmi.w	8000608 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000970:	f7ff fc0a 	bl	8000188 <HAL_GetTick>
 8000974:	1b00      	subs	r0, r0, r4
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <HAL_RCC_OscConfig+0x3b8>
 800097a:	e67e      	b.n	800067a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097c:	f7ff fc04 	bl	8000188 <HAL_GetTick>
 8000980:	1bc0      	subs	r0, r0, r7
 8000982:	2802      	cmp	r0, #2
 8000984:	d9cd      	bls.n	8000922 <HAL_RCC_OscConfig+0x372>
 8000986:	e678      	b.n	800067a <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fbfc 	bl	8000188 <HAL_GetTick>
 8000990:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	f57f ae37 	bpl.w	8000608 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800099a:	f7ff fbf5 	bl	8000188 <HAL_GetTick>
 800099e:	1b00      	subs	r0, r0, r4
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9f6      	bls.n	8000992 <HAL_RCC_OscConfig+0x3e2>
 80009a4:	e669      	b.n	800067a <HAL_RCC_OscConfig+0xca>
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	42420060 	.word	0x42420060
 80009b0:	08001310 	.word	0x08001310

080009b4 <HAL_RCC_GetSysClockFreq>:
{
 80009b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009ba:	ac02      	add	r4, sp, #8
 80009bc:	f103 0510 	add.w	r5, r3, #16
 80009c0:	4622      	mov	r2, r4
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	6859      	ldr	r1, [r3, #4]
 80009c6:	3308      	adds	r3, #8
 80009c8:	c203      	stmia	r2!, {r0, r1}
 80009ca:	42ab      	cmp	r3, r5
 80009cc:	4614      	mov	r4, r2
 80009ce:	d1f7      	bne.n	80009c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009d0:	2301      	movs	r3, #1
 80009d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80009d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80009d8:	4911      	ldr	r1, [pc, #68]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80009de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009e0:	f003 020c 	and.w	r2, r3, #12
 80009e4:	2a08      	cmp	r2, #8
 80009e6:	d117      	bne.n	8000a18 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80009ec:	a806      	add	r0, sp, #24
 80009ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009f6:	d50c      	bpl.n	8000a12 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a00:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a02:	aa06      	add	r2, sp, #24
 8000a04:	4413      	add	r3, r2
 8000a06:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a0a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x74>)
 8000a14:	4350      	muls	r0, r2
 8000a16:	e7fa      	b.n	8000a0e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a1a:	e7f8      	b.n	8000a0e <HAL_RCC_GetSysClockFreq+0x5a>
 8000a1c:	0800128c 	.word	0x0800128c
 8000a20:	40021000 	.word	0x40021000
 8000a24:	007a1200 	.word	0x007a1200
 8000a28:	003d0900 	.word	0x003d0900

08000a2c <HAL_RCC_ClockConfig>:
{
 8000a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a30:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8000a32:	4604      	mov	r4, r0
 8000a34:	b920      	cbnz	r0, 8000a40 <HAL_RCC_ClockConfig+0x14>
 8000a36:	f240 312e 	movw	r1, #814	; 0x32e
 8000a3a:	487f      	ldr	r0, [pc, #508]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000a3c:	f000 fb32 	bl	80010a4 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	071d      	lsls	r5, r3, #28
 8000a44:	d104      	bne.n	8000a50 <HAL_RCC_ClockConfig+0x24>
 8000a46:	f240 312f 	movw	r1, #815	; 0x32f
 8000a4a:	487b      	ldr	r0, [pc, #492]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000a4c:	f000 fb2a 	bl	80010a4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000a50:	2e02      	cmp	r6, #2
 8000a52:	d904      	bls.n	8000a5e <HAL_RCC_ClockConfig+0x32>
 8000a54:	f44f 714c 	mov.w	r1, #816	; 0x330
 8000a58:	4877      	ldr	r0, [pc, #476]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000a5a:	f000 fb23 	bl	80010a4 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5e:	4a77      	ldr	r2, [pc, #476]	; (8000c3c <HAL_RCC_ClockConfig+0x210>)
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d83d      	bhi.n	8000ae6 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	0798      	lsls	r0, r3, #30
 8000a6e:	d447      	bmi.n	8000b00 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	07da      	lsls	r2, r3, #31
 8000a74:	d470      	bmi.n	8000b58 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a76:	4a71      	ldr	r2, [pc, #452]	; (8000c3c <HAL_RCC_ClockConfig+0x210>)
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f0c0 80b5 	bcc.w	8000bee <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	4d6e      	ldr	r5, [pc, #440]	; (8000c40 <HAL_RCC_ClockConfig+0x214>)
 8000a88:	f013 0f04 	tst.w	r3, #4
 8000a8c:	f040 80bb 	bne.w	8000c06 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	071b      	lsls	r3, r3, #28
 8000a94:	d517      	bpl.n	8000ac6 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000a96:	6923      	ldr	r3, [r4, #16]
 8000a98:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000a9c:	d00c      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x8c>
 8000a9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000aa2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000aa6:	d007      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x8c>
 8000aa8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000aac:	d004      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x8c>
 8000aae:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8000ab2:	4861      	ldr	r0, [pc, #388]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000ab4:	f000 faf6 	bl	80010a4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ab8:	686b      	ldr	r3, [r5, #4]
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ac0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ac4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ac6:	f7ff ff75 	bl	80009b4 <HAL_RCC_GetSysClockFreq>
 8000aca:	686b      	ldr	r3, [r5, #4]
 8000acc:	4a5d      	ldr	r2, [pc, #372]	; (8000c44 <HAL_RCC_ClockConfig+0x218>)
 8000ace:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	40d8      	lsrs	r0, r3
 8000ad6:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <HAL_RCC_ClockConfig+0x21c>)
 8000ad8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 fb06 	bl	80010ec <HAL_InitTick>
  return HAL_OK;
 8000ae0:	2000      	movs	r0, #0
}
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	f023 0307 	bic.w	r3, r3, #7
 8000aec:	4333      	orrs	r3, r6
 8000aee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	429e      	cmp	r6, r3
 8000af8:	d0b7      	beq.n	8000a6a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b00:	4d4f      	ldr	r5, [pc, #316]	; (8000c40 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b02:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b06:	bf1e      	ittt	ne
 8000b08:	686a      	ldrne	r2, [r5, #4]
 8000b0a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b0e:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b10:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b12:	bf42      	ittt	mi
 8000b14:	686b      	ldrmi	r3, [r5, #4]
 8000b16:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8000b1a:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000b1c:	68a3      	ldr	r3, [r4, #8]
 8000b1e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000b22:	d012      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x11e>
 8000b24:	f023 0220 	bic.w	r2, r3, #32
 8000b28:	2a90      	cmp	r2, #144	; 0x90
 8000b2a:	d00e      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x11e>
 8000b2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b30:	2aa0      	cmp	r2, #160	; 0xa0
 8000b32:	d00a      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x11e>
 8000b34:	f023 0210 	bic.w	r2, r3, #16
 8000b38:	2ac0      	cmp	r2, #192	; 0xc0
 8000b3a:	d006      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x11e>
 8000b3c:	2bf0      	cmp	r3, #240	; 0xf0
 8000b3e:	d004      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x11e>
 8000b40:	f240 3156 	movw	r1, #854	; 0x356
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000b46:	f000 faad 	bl	80010a4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b4a:	686b      	ldr	r3, [r5, #4]
 8000b4c:	68a2      	ldr	r2, [r4, #8]
 8000b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b52:	4313      	orrs	r3, r2
 8000b54:	606b      	str	r3, [r5, #4]
 8000b56:	e78b      	b.n	8000a70 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d904      	bls.n	8000b68 <HAL_RCC_ClockConfig+0x13c>
 8000b5e:	f240 315d 	movw	r1, #861	; 0x35d
 8000b62:	4835      	ldr	r0, [pc, #212]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000b64:	f000 fa9e 	bl	80010a4 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b68:	6862      	ldr	r2, [r4, #4]
 8000b6a:	4d35      	ldr	r5, [pc, #212]	; (8000c40 <HAL_RCC_ClockConfig+0x214>)
 8000b6c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b70:	d11d      	bne.n	8000bae <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b76:	d0c0      	beq.n	8000afa <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b78:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b7e:	f023 0303 	bic.w	r3, r3, #3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b86:	f7ff faff 	bl	8000188 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b8a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000b8c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d115      	bne.n	8000bbe <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b92:	686b      	ldr	r3, [r5, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	f43f af6c 	beq.w	8000a76 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b9e:	f7ff faf3 	bl	8000188 <HAL_GetTick>
 8000ba2:	1bc0      	subs	r0, r0, r7
 8000ba4:	4540      	cmp	r0, r8
 8000ba6:	d9f4      	bls.n	8000b92 <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
 8000baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bae:	2a02      	cmp	r2, #2
 8000bb0:	d102      	bne.n	8000bb8 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bb6:	e7de      	b.n	8000b76 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	f013 0f02 	tst.w	r3, #2
 8000bbc:	e7db      	b.n	8000b76 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d110      	bne.n	8000be4 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bc2:	686b      	ldr	r3, [r5, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	f43f af54 	beq.w	8000a76 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bce:	f7ff fadb 	bl	8000188 <HAL_GetTick>
 8000bd2:	1bc0      	subs	r0, r0, r7
 8000bd4:	4540      	cmp	r0, r8
 8000bd6:	d9f4      	bls.n	8000bc2 <HAL_RCC_ClockConfig+0x196>
 8000bd8:	e7e6      	b.n	8000ba8 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bda:	f7ff fad5 	bl	8000188 <HAL_GetTick>
 8000bde:	1bc0      	subs	r0, r0, r7
 8000be0:	4540      	cmp	r0, r8
 8000be2:	d8e1      	bhi.n	8000ba8 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be4:	686b      	ldr	r3, [r5, #4]
 8000be6:	f013 0f0c 	tst.w	r3, #12
 8000bea:	d1f6      	bne.n	8000bda <HAL_RCC_ClockConfig+0x1ae>
 8000bec:	e743      	b.n	8000a76 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f023 0307 	bic.w	r3, r3, #7
 8000bf4:	4333      	orrs	r3, r6
 8000bf6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f47f af7b 	bne.w	8000afa <HAL_RCC_ClockConfig+0xce>
 8000c04:	e73e      	b.n	8000a84 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000c06:	68e3      	ldr	r3, [r4, #12]
 8000c08:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000c0c:	d00c      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x1fc>
 8000c0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c12:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000c16:	d007      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x1fc>
 8000c18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c1c:	d004      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x1fc>
 8000c1e:	f240 31b1 	movw	r1, #945	; 0x3b1
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_RCC_ClockConfig+0x20c>)
 8000c24:	f000 fa3e 	bl	80010a4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c28:	686b      	ldr	r3, [r5, #4]
 8000c2a:	68e2      	ldr	r2, [r4, #12]
 8000c2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c30:	4313      	orrs	r3, r2
 8000c32:	606b      	str	r3, [r5, #4]
 8000c34:	e72c      	b.n	8000a90 <HAL_RCC_ClockConfig+0x64>
 8000c36:	bf00      	nop
 8000c38:	08001310 	.word	0x08001310
 8000c3c:	40022000 	.word	0x40022000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	08001380 	.word	0x08001380
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c5a:	6810      	ldr	r0, [r2, #0]
} 
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	08001390 	.word	0x08001390
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_RCC_GetClockConfig>:
{
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8000c70:	4604      	mov	r4, r0
 8000c72:	b920      	cbnz	r0, 8000c7e <HAL_RCC_GetClockConfig+0x12>
 8000c74:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <HAL_RCC_GetClockConfig+0x54>)
 8000c7a:	f000 fa13 	bl	80010a4 <assert_failed>
  assert_param(pFLatency != NULL);
 8000c7e:	b925      	cbnz	r5, 8000c8a <HAL_RCC_GetClockConfig+0x1e>
 8000c80:	f240 5131 	movw	r1, #1329	; 0x531
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <HAL_RCC_GetClockConfig+0x54>)
 8000c86:	f000 fa0d 	bl	80010a4 <assert_failed>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_RCC_GetClockConfig+0x58>)
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	f002 0203 	and.w	r2, r2, #3
 8000c96:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c9e:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000ca6:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cb0:	6123      	str	r3, [r4, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	602b      	str	r3, [r5, #0]
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08001310 	.word	0x08001310
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_TIM_Base_MspInit>:
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000cd0:	6803      	ldr	r3, [r0, #0]
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_TIM_Base_Start_IT+0x44>)
{
 8000cd4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000cd6:	4293      	cmp	r3, r2
{
 8000cd8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000cda:	d00f      	beq.n	8000cfc <HAL_TIM_Base_Start_IT+0x2c>
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d00c      	beq.n	8000cfc <HAL_TIM_Base_Start_IT+0x2c>
 8000ce2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d008      	beq.n	8000cfc <HAL_TIM_Base_Start_IT+0x2c>
 8000cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d004      	beq.n	8000cfc <HAL_TIM_Base_Start_IT+0x2c>
 8000cf2:	f240 1161 	movw	r1, #353	; 0x161
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <HAL_TIM_Base_Start_IT+0x48>)
 8000cf8:	f000 f9d4 	bl	80010a4 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cfc:	6823      	ldr	r3, [r4, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000cfe:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	bf00      	nop
 8000d14:	40012c00 	.word	0x40012c00
 8000d18:	08001348 	.word	0x08001348

08000d1c <HAL_TIM_OC_DelayElapsedCallback>:
 8000d1c:	4770      	bx	lr

08000d1e <HAL_TIM_IC_CaptureCallback>:
 8000d1e:	4770      	bx	lr

08000d20 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d20:	4770      	bx	lr

08000d22 <HAL_TIM_TriggerCallback>:
 8000d22:	4770      	bx	lr

08000d24 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d24:	6803      	ldr	r3, [r0, #0]
{
 8000d26:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d28:	691a      	ldr	r2, [r3, #16]
{
 8000d2a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d2c:	0791      	lsls	r1, r2, #30
 8000d2e:	d50e      	bpl.n	8000d4e <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	0792      	lsls	r2, r2, #30
 8000d34:	d50b      	bpl.n	8000d4e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d36:	f06f 0202 	mvn.w	r2, #2
 8000d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d3c:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d3e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d40:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d42:	079b      	lsls	r3, r3, #30
 8000d44:	d077      	beq.n	8000e36 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d46:	f7ff ffea 	bl	8000d1e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	0750      	lsls	r0, r2, #29
 8000d54:	d510      	bpl.n	8000d78 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	0751      	lsls	r1, r2, #29
 8000d5a:	d50d      	bpl.n	8000d78 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d5c:	f06f 0204 	mvn.w	r2, #4
 8000d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d62:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d64:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d66:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d68:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d6c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d6e:	d068      	beq.n	8000e42 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d70:	f7ff ffd5 	bl	8000d1e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d74:	2300      	movs	r3, #0
 8000d76:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	0712      	lsls	r2, r2, #28
 8000d7e:	d50f      	bpl.n	8000da0 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	0710      	lsls	r0, r2, #28
 8000d84:	d50c      	bpl.n	8000da0 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d86:	f06f 0208 	mvn.w	r2, #8
 8000d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d8c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d8e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d90:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d92:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d94:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d96:	d05a      	beq.n	8000e4e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d98:	f7ff ffc1 	bl	8000d1e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	06d2      	lsls	r2, r2, #27
 8000da6:	d510      	bpl.n	8000dca <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	06d0      	lsls	r0, r2, #27
 8000dac:	d50d      	bpl.n	8000dca <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000dae:	f06f 0210 	mvn.w	r2, #16
 8000db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db4:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000db6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dba:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000dbe:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dc0:	d04b      	beq.n	8000e5a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc2:	f7ff ffac 	bl	8000d1e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	07d1      	lsls	r1, r2, #31
 8000dd0:	d508      	bpl.n	8000de4 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	07d2      	lsls	r2, r2, #31
 8000dd6:	d505      	bpl.n	8000de4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000dd8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ddc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000dde:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000de0:	f000 f956 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	0610      	lsls	r0, r2, #24
 8000dea:	d508      	bpl.n	8000dfe <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	0611      	lsls	r1, r2, #24
 8000df0:	d505      	bpl.n	8000dfe <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000df2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000df6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000df8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000dfa:	f000 f8c2 	bl	8000f82 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	0652      	lsls	r2, r2, #25
 8000e04:	d508      	bpl.n	8000e18 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	0650      	lsls	r0, r2, #25
 8000e0a:	d505      	bpl.n	8000e18 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000e10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e12:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e14:	f7ff ff85 	bl	8000d22 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	0691      	lsls	r1, r2, #26
 8000e1e:	d522      	bpl.n	8000e66 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	0692      	lsls	r2, r2, #26
 8000e24:	d51f      	bpl.n	8000e66 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e26:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e2a:	4620      	mov	r0, r4
    }
  }
}
 8000e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000e32:	f000 b8a5 	b.w	8000f80 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e36:	f7ff ff71 	bl	8000d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff ff70 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e40:	e783      	b.n	8000d4a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e42:	f7ff ff6b 	bl	8000d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff ff6a 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e4c:	e792      	b.n	8000d74 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4e:	f7ff ff65 	bl	8000d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff ff64 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e58:	e7a0      	b.n	8000d9c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e5a:	f7ff ff5f 	bl	8000d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff ff5e 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e64:	e7af      	b.n	8000dc6 <HAL_TIM_IRQHandler+0xa2>
 8000e66:	bd10      	pop	{r4, pc}

08000e68 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e68:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000e6a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d00a      	beq.n	8000e86 <TIM_Base_SetConfig+0x1e>
 8000e70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e74:	d007      	beq.n	8000e86 <TIM_Base_SetConfig+0x1e>
 8000e76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d003      	beq.n	8000e86 <TIM_Base_SetConfig+0x1e>
 8000e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d115      	bne.n	8000eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e8c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e8e:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <TIM_Base_SetConfig+0x6c>)
 8000e90:	4290      	cmp	r0, r2
 8000e92:	d00a      	beq.n	8000eaa <TIM_Base_SetConfig+0x42>
 8000e94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e98:	d007      	beq.n	8000eaa <TIM_Base_SetConfig+0x42>
 8000e9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	d003      	beq.n	8000eaa <TIM_Base_SetConfig+0x42>
 8000ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d103      	bne.n	8000eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eaa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eb0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000eb2:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000eb8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000eba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ebc:	688b      	ldr	r3, [r1, #8]
 8000ebe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ec0:	680b      	ldr	r3, [r1, #0]
 8000ec2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <TIM_Base_SetConfig+0x6c>)
 8000ec6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ec8:	bf04      	itt	eq
 8000eca:	690b      	ldreq	r3, [r1, #16]
 8000ecc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	6143      	str	r3, [r0, #20]
 8000ed2:	4770      	bx	lr
 8000ed4:	40012c00 	.word	0x40012c00

08000ed8 <HAL_TIM_Base_Init>:
{
 8000ed8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d049      	beq.n	8000f74 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_TIM_Base_Init+0xa0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d00e      	beq.n	8000f06 <HAL_TIM_Base_Init+0x2e>
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d00b      	beq.n	8000f06 <HAL_TIM_Base_Init+0x2e>
 8000eee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_TIM_Base_Init+0x2e>
 8000ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d003      	beq.n	8000f06 <HAL_TIM_Base_Init+0x2e>
 8000efe:	21d9      	movs	r1, #217	; 0xd9
 8000f00:	481e      	ldr	r0, [pc, #120]	; (8000f7c <HAL_TIM_Base_Init+0xa4>)
 8000f02:	f000 f8cf 	bl	80010a4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8000f06:	68a3      	ldr	r3, [r4, #8]
 8000f08:	f033 0210 	bics.w	r2, r3, #16
 8000f0c:	d009      	beq.n	8000f22 <HAL_TIM_Base_Init+0x4a>
 8000f0e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f12:	2a20      	cmp	r2, #32
 8000f14:	d005      	beq.n	8000f22 <HAL_TIM_Base_Init+0x4a>
 8000f16:	2b40      	cmp	r3, #64	; 0x40
 8000f18:	d003      	beq.n	8000f22 <HAL_TIM_Base_Init+0x4a>
 8000f1a:	21da      	movs	r1, #218	; 0xda
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_TIM_Base_Init+0xa4>)
 8000f1e:	f000 f8c1 	bl	80010a4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8000f22:	6923      	ldr	r3, [r4, #16]
 8000f24:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8000f28:	d006      	beq.n	8000f38 <HAL_TIM_Base_Init+0x60>
 8000f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2e:	d003      	beq.n	8000f38 <HAL_TIM_Base_Init+0x60>
 8000f30:	21db      	movs	r1, #219	; 0xdb
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_TIM_Base_Init+0xa4>)
 8000f34:	f000 f8b6 	bl	80010a4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8000f38:	69a3      	ldr	r3, [r4, #24]
 8000f3a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000f3e:	d003      	beq.n	8000f48 <HAL_TIM_Base_Init+0x70>
 8000f40:	21dc      	movs	r1, #220	; 0xdc
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <HAL_TIM_Base_Init+0xa4>)
 8000f44:	f000 f8ae 	bl	80010a4 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f48:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000f4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f50:	b923      	cbnz	r3, 8000f5c <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8000f52:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff feb8 	bl	8000ccc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f5c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f5e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000f60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f64:	1d21      	adds	r1, r4, #4
 8000f66:	f7ff ff7f 	bl	8000e68 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f6a:	2301      	movs	r3, #1
  return HAL_OK;
 8000f6c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000f6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	08001348 	.word	0x08001348

08000f80 <HAL_TIMEx_CommutationCallback>:
 8000f80:	4770      	bx	lr

08000f82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f82:	4770      	bx	lr

08000f84 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	2210      	movs	r2, #16
{
 8000f86:	b510      	push	{r4, lr}
 8000f88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	eb0d 0002 	add.w	r0, sp, r2
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f000 f968 	bl	8001264 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f96:	4c19      	ldr	r4, [pc, #100]	; (8000ffc <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	f042 0210 	orr.w	r2, r2, #16
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	f002 0210 	and.w	r2, r2, #16
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	f042 0220 	orr.w	r2, r2, #32
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	f002 0220 	and.w	r2, r2, #32
 8000fbe:	9202      	str	r2, [sp, #8]
 8000fc0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	f042 0204 	orr.w	r2, r2, #4
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	9303      	str	r3, [sp, #12]
 8000fd4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fd6:	f7ff fad1 	bl	800057c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe4:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	a904      	add	r1, sp, #16
 8000fe8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f7ff f959 	bl	80002a4 <HAL_GPIO_Init>

}
 8000ff2:	b008      	add	sp, #32
 8000ff4:	bd10      	pop	{r4, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40011000 	.word	0x40011000

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b510      	push	{r4, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001004:	2228      	movs	r2, #40	; 0x28
 8001006:	2100      	movs	r1, #0
 8001008:	a806      	add	r0, sp, #24
 800100a:	f000 f92b 	bl	8001264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100e:	2100      	movs	r1, #0
 8001010:	2214      	movs	r2, #20
 8001012:	a801      	add	r0, sp, #4
 8001014:	f000 f926 	bl	8001264 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001020:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001024:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800102e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f7ff fabd 	bl	80005b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	4621      	mov	r1, r4
 8001042:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104c:	f7ff fcee 	bl	8000a2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001050:	b010      	add	sp, #64	; 0x40
 8001052:	bd10      	pop	{r4, pc}

08001054 <main>:
{
 8001054:	b508      	push	{r3, lr}
  HAL_Init();
 8001056:	f7ff f879 	bl	800014c <HAL_Init>
  SystemClock_Config();
 800105a:	f7ff ffd1 	bl	8001000 <SystemClock_Config>
  MX_GPIO_Init();
 800105e:	f7ff ff91 	bl	8000f84 <MX_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001062:	4c0a      	ldr	r4, [pc, #40]	; (800108c <main+0x38>)
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fa86 	bl	800057c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f7ff f88f 	bl	8000194 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001076:	4620      	mov	r0, r4
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	f7ff fa7d 	bl	800057c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f7ff f885 	bl	8000194 <HAL_Delay>
 800108a:	e7eb      	b.n	8001064 <main+0x10>
 800108c:	40011000 	.word	0x40011000

08001090 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001090:	6802      	ldr	r2, [r0, #0]
 8001092:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001094:	429a      	cmp	r2, r3
 8001096:	d101      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001098:	f7ff b86a 	b.w	8000170 <HAL_IncTick>
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00

080010a4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_MspInit+0x3c>)
{
 80010aa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	f002 0201 	and.w	r2, r2, #1
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d2:	6853      	ldr	r3, [r2, #4]
 80010d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	b002      	add	sp, #8
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000

080010ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80010ee:	4601      	mov	r1, r0
{
 80010f0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80010f2:	2200      	movs	r2, #0
 80010f4:	2019      	movs	r0, #25
 80010f6:	f7ff f87d 	bl	80001f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80010fa:	2019      	movs	r0, #25
 80010fc:	f7ff f8bc 	bl	8000278 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001102:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001104:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001106:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800110c:	619a      	str	r2, [r3, #24]
 800110e:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001110:	4c11      	ldr	r4, [pc, #68]	; (8001158 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111a:	f7ff fda7 	bl	8000c6c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800111e:	f7ff fd95 	bl	8000c4c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_InitTick+0x70>)
 8001124:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001126:	f240 33e7 	movw	r3, #999	; 0x3e7
 800112a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_InitTick+0x74>)
 800112e:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001132:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001134:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001136:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001138:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800113a:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800113e:	f7ff fecb 	bl	8000ed8 <HAL_TIM_Base_Init>
 8001142:	b920      	cbnz	r0, 800114e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fdc3 	bl	8000cd0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800114a:	b008      	add	sp, #32
 800114c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	e7fb      	b.n	800114a <HAL_InitTick+0x5e>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	20000028 	.word	0x20000028
 800115c:	40012c00 	.word	0x40012c00
 8001160:	000f4240 	.word	0x000f4240

08001164 <NMI_Handler>:
 8001164:	4770      	bx	lr

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	e7fe      	b.n	800116a <BusFault_Handler>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler>

0800116e <SVC_Handler>:
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	4770      	bx	lr
	...

08001178 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001178:	4801      	ldr	r0, [pc, #4]	; (8001180 <TIM1_UP_IRQHandler+0x8>)
 800117a:	f7ff bdd3 	b.w	8000d24 <HAL_TIM_IRQHandler>
 800117e:	bf00      	nop
 8001180:	20000028 	.word	0x20000028

08001184 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <SystemInit+0x40>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <SystemInit+0x44>)
 8001192:	400a      	ands	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800119c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <SystemInit+0x48>)
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	f8ff0000 	.word	0xf8ff0000
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011d2:	e003      	b.n	80011dc <LoopCopyDataInit>

080011d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011da:	3104      	adds	r1, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011e4:	d3f6      	bcc.n	80011d4 <CopyDataInit>
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011e8:	e002      	b.n	80011f0 <LoopFillZerobss>

080011ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011ec:	f842 3b04 	str.w	r3, [r2], #4

080011f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011f4:	d3f9      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011f6:	f7ff ffc5 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f000 f80f 	bl	800121c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff ff29 	bl	8001054 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r3, =_sidata
 8001204:	080013a0 	.word	0x080013a0
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800120c:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 8001210:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 8001214:	20000068 	.word	0x20000068

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <__libc_init_array>:
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	2500      	movs	r5, #0
 8001220:	4e0c      	ldr	r6, [pc, #48]	; (8001254 <__libc_init_array+0x38>)
 8001222:	4c0d      	ldr	r4, [pc, #52]	; (8001258 <__libc_init_array+0x3c>)
 8001224:	1ba4      	subs	r4, r4, r6
 8001226:	10a4      	asrs	r4, r4, #2
 8001228:	42a5      	cmp	r5, r4
 800122a:	d109      	bne.n	8001240 <__libc_init_array+0x24>
 800122c:	f000 f822 	bl	8001274 <_init>
 8001230:	2500      	movs	r5, #0
 8001232:	4e0a      	ldr	r6, [pc, #40]	; (800125c <__libc_init_array+0x40>)
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <__libc_init_array+0x44>)
 8001236:	1ba4      	subs	r4, r4, r6
 8001238:	10a4      	asrs	r4, r4, #2
 800123a:	42a5      	cmp	r5, r4
 800123c:	d105      	bne.n	800124a <__libc_init_array+0x2e>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001244:	4798      	blx	r3
 8001246:	3501      	adds	r5, #1
 8001248:	e7ee      	b.n	8001228 <__libc_init_array+0xc>
 800124a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800124e:	4798      	blx	r3
 8001250:	3501      	adds	r5, #1
 8001252:	e7f2      	b.n	800123a <__libc_init_array+0x1e>
 8001254:	08001398 	.word	0x08001398
 8001258:	08001398 	.word	0x08001398
 800125c:	08001398 	.word	0x08001398
 8001260:	0800139c 	.word	0x0800139c

08001264 <memset>:
 8001264:	4603      	mov	r3, r0
 8001266:	4402      	add	r2, r0
 8001268:	4293      	cmp	r3, r2
 800126a:	d100      	bne.n	800126e <memset+0xa>
 800126c:	4770      	bx	lr
 800126e:	f803 1b01 	strb.w	r1, [r3], #1
 8001272:	e7f9      	b.n	8001268 <memset+0x4>

08001274 <_init>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr

08001280 <_fini>:
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	bf00      	nop
 8001284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001286:	bc08      	pop	{r3}
 8001288:	469e      	mov	lr, r3
 800128a:	4770      	bx	lr
