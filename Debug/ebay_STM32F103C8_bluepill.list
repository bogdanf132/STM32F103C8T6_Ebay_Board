
ebay_STM32F103C8_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800303c  0800303c  0001303c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000178  20000000  0800320c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012d8  20000178  08003384  00020178  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001450  08003384  00021450  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fec7  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041a6  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000082ed  00000000  00000000  0004420e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cc0  00000000  00000000  0004c500  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001060  00000000  00000000  0004d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008e3a  00000000  00000000  0004e220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004304  00000000  00000000  0005705a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b35e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002360  00000000  00000000  0005b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000178 	.word	0x20000178
 8000128:	00000000 	.word	0x00000000
 800012c:	08003024 	.word	0x08003024

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000017c 	.word	0x2000017c
 8000148:	08003024 	.word	0x08003024

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f82d 	bl	80001b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f002 fca4 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f002 fc80 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	200003b8 	.word	0x200003b8
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200003b8 	.word	0x200003b8

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001b8:	1ec3      	subs	r3, r0, #3
 80001ba:	2b04      	cmp	r3, #4
{
 80001bc:	b510      	push	{r4, lr}
 80001be:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001c0:	d903      	bls.n	80001ca <HAL_NVIC_SetPriorityGrouping+0x12>
 80001c2:	21a2      	movs	r1, #162	; 0xa2
 80001c4:	4809      	ldr	r0, [pc, #36]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x34>)
 80001c6:	f002 fc4e 	bl	8002a66 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001cc:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ce:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001d8:	041b      	lsls	r3, r3, #16
 80001da:	0c1b      	lsrs	r3, r3, #16
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001e4:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80001e6:	60d4      	str	r4, [r2, #12]
 80001e8:	bd10      	pop	{r4, pc}
 80001ea:	bf00      	nop
 80001ec:	0800304c 	.word	0x0800304c
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80001f4:	2a0f      	cmp	r2, #15
{ 
 80001f6:	b570      	push	{r4, r5, r6, lr}
 80001f8:	4604      	mov	r4, r0
 80001fa:	460e      	mov	r6, r1
 80001fc:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80001fe:	d903      	bls.n	8000208 <HAL_NVIC_SetPriority+0x14>
 8000200:	21ba      	movs	r1, #186	; 0xba
 8000202:	481a      	ldr	r0, [pc, #104]	; (800026c <HAL_NVIC_SetPriority+0x78>)
 8000204:	f002 fc2f 	bl	8002a66 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000208:	2e0f      	cmp	r6, #15
 800020a:	d903      	bls.n	8000214 <HAL_NVIC_SetPriority+0x20>
 800020c:	21bb      	movs	r1, #187	; 0xbb
 800020e:	4817      	ldr	r0, [pc, #92]	; (800026c <HAL_NVIC_SetPriority+0x78>)
 8000210:	f002 fc29 	bl	8002a66 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000216:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	68d9      	ldr	r1, [r3, #12]
 800021a:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021e:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000222:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000224:	2b04      	cmp	r3, #4
 8000226:	bf28      	it	cs
 8000228:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022a:	2a06      	cmp	r2, #6
 800022c:	bf94      	ite	ls
 800022e:	2100      	movls	r1, #0
 8000230:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	fa00 f203 	lsl.w	r2, r0, r3
 8000236:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000238:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023e:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000242:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	ea42 0205 	orr.w	r2, r2, r5
 8000248:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	bfaf      	iteee	ge
 800024e:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	4b08      	ldrlt	r3, [pc, #32]	; (8000274 <HAL_NVIC_SetPriority+0x80>)
 8000254:	f004 040f 	andlt.w	r4, r4, #15
 8000258:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfa5      	ittet	ge
 800025c:	b2d2      	uxtbge	r2, r2
 800025e:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	0800304c 	.word	0x0800304c
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800027a:	1e04      	subs	r4, r0, #0
 800027c:	da03      	bge.n	8000286 <HAL_NVIC_EnableIRQ+0xe>
 800027e:	21ce      	movs	r1, #206	; 0xce
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <HAL_NVIC_EnableIRQ+0x24>)
 8000282:	f002 fbf0 	bl	8002a66 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000286:	2301      	movs	r3, #1
 8000288:	0962      	lsrs	r2, r4, #5
 800028a:	f004 041f 	and.w	r4, r4, #31
 800028e:	fa03 f404 	lsl.w	r4, r3, r4
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_NVIC_EnableIRQ+0x28>)
 8000294:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000298:	bd10      	pop	{r4, pc}
 800029a:	bf00      	nop
 800029c:	0800304c 	.word	0x0800304c
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002a8:	4aaa      	ldr	r2, [pc, #680]	; (8000554 <HAL_GPIO_Init+0x2b0>)
{
 80002aa:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002ac:	4290      	cmp	r0, r2
{
 80002ae:	4604      	mov	r4, r0
 80002b0:	468b      	mov	fp, r1
 80002b2:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002b4:	d013      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d00f      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002c2:	4290      	cmp	r0, r2
 80002c4:	d00b      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d007      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002d2:	4290      	cmp	r0, r2
 80002d4:	d003      	beq.n	80002de <HAL_GPIO_Init+0x3a>
 80002d6:	21cd      	movs	r1, #205	; 0xcd
 80002d8:	489f      	ldr	r0, [pc, #636]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80002da:	f002 fbc4 	bl	8002a66 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80002de:	f8db 2000 	ldr.w	r2, [fp]
 80002e2:	b291      	uxth	r1, r2
 80002e4:	b111      	cbz	r1, 80002ec <HAL_GPIO_Init+0x48>
 80002e6:	0c12      	lsrs	r2, r2, #16
 80002e8:	0412      	lsls	r2, r2, #16
 80002ea:	b11a      	cbz	r2, 80002f4 <HAL_GPIO_Init+0x50>
 80002ec:	21ce      	movs	r1, #206	; 0xce
 80002ee:	489a      	ldr	r0, [pc, #616]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80002f0:	f002 fbb9 	bl	8002a66 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80002f4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80002f8:	2a03      	cmp	r2, #3
 80002fa:	d917      	bls.n	800032c <HAL_GPIO_Init+0x88>
 80002fc:	f1a2 0111 	sub.w	r1, r2, #17
 8000300:	2901      	cmp	r1, #1
 8000302:	d913      	bls.n	800032c <HAL_GPIO_Init+0x88>
 8000304:	4895      	ldr	r0, [pc, #596]	; (800055c <HAL_GPIO_Init+0x2b8>)
 8000306:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800030a:	4281      	cmp	r1, r0
 800030c:	d00e      	beq.n	800032c <HAL_GPIO_Init+0x88>
 800030e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000312:	4282      	cmp	r2, r0
 8000314:	d00a      	beq.n	800032c <HAL_GPIO_Init+0x88>
 8000316:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800031a:	4281      	cmp	r1, r0
 800031c:	d006      	beq.n	800032c <HAL_GPIO_Init+0x88>
 800031e:	4990      	ldr	r1, [pc, #576]	; (8000560 <HAL_GPIO_Init+0x2bc>)
 8000320:	428a      	cmp	r2, r1
 8000322:	d003      	beq.n	800032c <HAL_GPIO_Init+0x88>
 8000324:	21cf      	movs	r1, #207	; 0xcf
 8000326:	488c      	ldr	r0, [pc, #560]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000328:	f002 fb9d 	bl	8002a66 <assert_failed>
{
 800032c:	2500      	movs	r5, #0
 800032e:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000330:	f8df a244 	ldr.w	sl, [pc, #580]	; 8000578 <HAL_GPIO_Init+0x2d4>
 8000334:	4e8b      	ldr	r6, [pc, #556]	; (8000564 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8000336:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000338:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 800033c:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000340:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8000344:	45b9      	cmp	r9, r7
 8000346:	f040 808f 	bne.w	8000468 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800034a:	9b01      	ldr	r3, [sp, #4]
 800034c:	429c      	cmp	r4, r3
 800034e:	d011      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000350:	4985      	ldr	r1, [pc, #532]	; (8000568 <HAL_GPIO_Init+0x2c4>)
 8000352:	428c      	cmp	r4, r1
 8000354:	d00e      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000356:	4b85      	ldr	r3, [pc, #532]	; (800056c <HAL_GPIO_Init+0x2c8>)
 8000358:	429c      	cmp	r4, r3
 800035a:	d00b      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 800035c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000360:	428c      	cmp	r4, r1
 8000362:	d007      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 8000364:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000368:	428c      	cmp	r4, r1
 800036a:	d003      	beq.n	8000374 <HAL_GPIO_Init+0xd0>
 800036c:	21dd      	movs	r1, #221	; 0xdd
 800036e:	487a      	ldr	r0, [pc, #488]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000370:	f002 fb79 	bl	8002a66 <assert_failed>
      switch (GPIO_Init->Mode)
 8000374:	f8db 1004 	ldr.w	r1, [fp, #4]
 8000378:	2912      	cmp	r1, #18
 800037a:	f000 80d3 	beq.w	8000524 <HAL_GPIO_Init+0x280>
 800037e:	f200 808d 	bhi.w	800049c <HAL_GPIO_Init+0x1f8>
 8000382:	2902      	cmp	r1, #2
 8000384:	f000 80c1 	beq.w	800050a <HAL_GPIO_Init+0x266>
 8000388:	d877      	bhi.n	800047a <HAL_GPIO_Init+0x1d6>
 800038a:	2900      	cmp	r1, #0
 800038c:	f000 8093 	beq.w	80004b6 <HAL_GPIO_Init+0x212>
 8000390:	2901      	cmp	r1, #1
 8000392:	f000 80ae 	beq.w	80004f2 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000396:	2fff      	cmp	r7, #255	; 0xff
 8000398:	bf82      	ittt	hi
 800039a:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 800039e:	f1ae 0e08 	subhi.w	lr, lr, #8
 80003a2:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003a6:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003aa:	bf9d      	ittte	ls
 80003ac:	4620      	movls	r0, r4
 80003ae:	6822      	ldrls	r2, [r4, #0]
 80003b0:	ea4f 0188 	movls.w	r1, r8, lsl #2
 80003b4:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003b6:	fa0e fc01 	lsl.w	ip, lr, r1
 80003ba:	ea22 020c 	bic.w	r2, r2, ip
 80003be:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c2:	bf88      	it	hi
 80003c4:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003c6:	4311      	orrs	r1, r2
 80003c8:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ca:	f8db 0004 	ldr.w	r0, [fp, #4]
 80003ce:	00c3      	lsls	r3, r0, #3
 80003d0:	d54a      	bpl.n	8000468 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003d6:	f028 0103 	bic.w	r1, r8, #3
 80003da:	f042 0201 	orr.w	r2, r2, #1
 80003de:	f8ca 2018 	str.w	r2, [sl, #24]
 80003e2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003ea:	f002 0201 	and.w	r2, r2, #1
 80003ee:	9203      	str	r2, [sp, #12]
 80003f0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f4:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f8:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000400:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000402:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000406:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000408:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800040c:	f000 809b 	beq.w	8000546 <HAL_GPIO_Init+0x2a2>
 8000410:	4a55      	ldr	r2, [pc, #340]	; (8000568 <HAL_GPIO_Init+0x2c4>)
 8000412:	4294      	cmp	r4, r2
 8000414:	f000 8099 	beq.w	800054a <HAL_GPIO_Init+0x2a6>
 8000418:	4b54      	ldr	r3, [pc, #336]	; (800056c <HAL_GPIO_Init+0x2c8>)
 800041a:	429c      	cmp	r4, r3
 800041c:	f000 8097 	beq.w	800054e <HAL_GPIO_Init+0x2aa>
 8000420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000424:	4294      	cmp	r4, r2
 8000426:	bf14      	ite	ne
 8000428:	2204      	movne	r2, #4
 800042a:	2203      	moveq	r2, #3
 800042c:	fa02 f20c 	lsl.w	r2, r2, ip
 8000430:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8000434:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000436:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000438:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800043a:	bf4c      	ite	mi
 800043c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800043e:	43ba      	bicpl	r2, r7
 8000440:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000442:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000444:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000446:	bf4c      	ite	mi
 8000448:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800044a:	43ba      	bicpl	r2, r7
 800044c:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800044e:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000450:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000452:	bf4c      	ite	mi
 8000454:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000456:	43ba      	bicpl	r2, r7
 8000458:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800045a:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800045c:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800045e:	bf4c      	ite	mi
 8000460:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000462:	ea22 0707 	bicpl.w	r7, r2, r7
 8000466:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000468:	f108 0801 	add.w	r8, r8, #1
 800046c:	f1b8 0f10 	cmp.w	r8, #16
 8000470:	f47f af61 	bne.w	8000336 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8000474:	b005      	add	sp, #20
 8000476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800047a:	2903      	cmp	r1, #3
 800047c:	d05f      	beq.n	800053e <HAL_GPIO_Init+0x29a>
 800047e:	2911      	cmp	r1, #17
 8000480:	d189      	bne.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000482:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000486:	3a01      	subs	r2, #1
 8000488:	2a02      	cmp	r2, #2
 800048a:	d903      	bls.n	8000494 <HAL_GPIO_Init+0x1f0>
 800048c:	21ec      	movs	r1, #236	; 0xec
 800048e:	4832      	ldr	r0, [pc, #200]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000490:	f002 fae9 	bl	8002a66 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000494:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000498:	3504      	adds	r5, #4
          break;
 800049a:	e77c      	b.n	8000396 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800049c:	4834      	ldr	r0, [pc, #208]	; (8000570 <HAL_GPIO_Init+0x2cc>)
 800049e:	4281      	cmp	r1, r0
 80004a0:	d009      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004a2:	d81c      	bhi.n	80004de <HAL_GPIO_Init+0x23a>
 80004a4:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004a8:	4281      	cmp	r1, r0
 80004aa:	d004      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004ac:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004b0:	4281      	cmp	r1, r0
 80004b2:	f47f af70 	bne.w	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80004b6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004ba:	2902      	cmp	r1, #2
 80004bc:	d904      	bls.n	80004c8 <HAL_GPIO_Init+0x224>
 80004be:	f240 1107 	movw	r1, #263	; 0x107
 80004c2:	4825      	ldr	r0, [pc, #148]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 80004c4:	f002 facf 	bl	8002a66 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004c8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004cc:	b3c9      	cbz	r1, 8000542 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ce:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80004d0:	bf0c      	ite	eq
 80004d2:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80004d6:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004da:	2508      	movs	r5, #8
 80004dc:	e75b      	b.n	8000396 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004de:	4825      	ldr	r0, [pc, #148]	; (8000574 <HAL_GPIO_Init+0x2d0>)
 80004e0:	4281      	cmp	r1, r0
 80004e2:	d0e8      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004e4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004e8:	4281      	cmp	r1, r0
 80004ea:	d0e4      	beq.n	80004b6 <HAL_GPIO_Init+0x212>
 80004ec:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004f0:	e7de      	b.n	80004b0 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80004f2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80004f6:	3a01      	subs	r2, #1
 80004f8:	2a02      	cmp	r2, #2
 80004fa:	d903      	bls.n	8000504 <HAL_GPIO_Init+0x260>
 80004fc:	21e5      	movs	r1, #229	; 0xe5
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000500:	f002 fab1 	bl	8002a66 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8000508:	e745      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800050a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800050e:	3a01      	subs	r2, #1
 8000510:	2a02      	cmp	r2, #2
 8000512:	d903      	bls.n	800051c <HAL_GPIO_Init+0x278>
 8000514:	21f3      	movs	r1, #243	; 0xf3
 8000516:	4810      	ldr	r0, [pc, #64]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000518:	f002 faa5 	bl	8002a66 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800051c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000520:	3508      	adds	r5, #8
          break;
 8000522:	e738      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000524:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000528:	3a01      	subs	r2, #1
 800052a:	2a02      	cmp	r2, #2
 800052c:	d903      	bls.n	8000536 <HAL_GPIO_Init+0x292>
 800052e:	21fa      	movs	r1, #250	; 0xfa
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_GPIO_Init+0x2b4>)
 8000532:	f002 fa98 	bl	8002a66 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000536:	f8db 500c 	ldr.w	r5, [fp, #12]
 800053a:	350c      	adds	r5, #12
          break;
 800053c:	e72b      	b.n	8000396 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800053e:	2500      	movs	r5, #0
 8000540:	e729      	b.n	8000396 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000542:	2504      	movs	r5, #4
 8000544:	e727      	b.n	8000396 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000546:	2200      	movs	r2, #0
 8000548:	e770      	b.n	800042c <HAL_GPIO_Init+0x188>
 800054a:	2201      	movs	r2, #1
 800054c:	e76e      	b.n	800042c <HAL_GPIO_Init+0x188>
 800054e:	2202      	movs	r2, #2
 8000550:	e76c      	b.n	800042c <HAL_GPIO_Init+0x188>
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800
 8000558:	08003087 	.word	0x08003087
 800055c:	10110000 	.word	0x10110000
 8000560:	10220000 	.word	0x10220000
 8000564:	40010400 	.word	0x40010400
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40011000 	.word	0x40011000
 8000570:	10210000 	.word	0x10210000
 8000574:	10310000 	.word	0x10310000
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4605      	mov	r5, r0
 8000580:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000582:	460c      	mov	r4, r1
 8000584:	b921      	cbnz	r1, 8000590 <HAL_GPIO_WritePin+0x14>
 8000586:	f240 11e3 	movw	r1, #483	; 0x1e3
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <HAL_GPIO_WritePin+0x30>)
 800058c:	f002 fa6b 	bl	8002a66 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000590:	2e01      	cmp	r6, #1
 8000592:	d906      	bls.n	80005a2 <HAL_GPIO_WritePin+0x26>
 8000594:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <HAL_GPIO_WritePin+0x30>)
 800059a:	f002 fa64 	bl	8002a66 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800059e:	612c      	str	r4, [r5, #16]
 80005a0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d1fb      	bne.n	800059e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005a6:	0424      	lsls	r4, r4, #16
 80005a8:	e7f9      	b.n	800059e <HAL_GPIO_WritePin+0x22>
 80005aa:	bf00      	nop
 80005ac:	08003087 	.word	0x08003087

080005b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80005b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80005b4:	4604      	mov	r4, r0
{
 80005b6:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d069      	beq.n	8000690 <HAL_PCD_Init+0xe0>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80005bc:	6802      	ldr	r2, [r0, #0]
 80005be:	4b35      	ldr	r3, [pc, #212]	; (8000694 <HAL_PCD_Init+0xe4>)
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d003      	beq.n	80005cc <HAL_PCD_Init+0x1c>
 80005c4:	219f      	movs	r1, #159	; 0x9f
 80005c6:	4834      	ldr	r0, [pc, #208]	; (8000698 <HAL_PCD_Init+0xe8>)
 80005c8:	f002 fa4d 	bl	8002a66 <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80005cc:	f894 3429 	ldrb.w	r3, [r4, #1065]	; 0x429
 80005d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80005d4:	b923      	cbnz	r3, 80005e0 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80005d6:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80005da:	4620      	mov	r0, r4
 80005dc:	f002 fb2c 	bl	8002c38 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80005e0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80005e2:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80005e4:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80005e6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80005ea:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80005ee:	f001 f96b 	bl	80018c8 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005f6:	682b      	ldr	r3, [r5, #0]
 80005f8:	f104 0804 	add.w	r8, r4, #4
 80005fc:	6033      	str	r3, [r6, #0]
 80005fe:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000602:	6820      	ldr	r0, [r4, #0]
 8000604:	f001 f950 	bl	80018a8 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000608:	2100      	movs	r1, #0
 800060a:	6820      	ldr	r0, [r4, #0]
 800060c:	f001 f966 	bl	80018dc <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000610:	2100      	movs	r1, #0
 8000612:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000614:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000616:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000618:	4608      	mov	r0, r1
 800061a:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800061e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000622:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000624:	3101      	adds	r1, #1
 8000626:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000628:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800062c:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000630:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000632:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000634:	6410      	str	r0, [r2, #64]	; 0x40
 8000636:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800063a:	d1f0      	bne.n	800061e <HAL_PCD_Init+0x6e>
 800063c:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800063e:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000640:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000644:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000646:	3201      	adds	r2, #1
 8000648:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800064a:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800064e:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000652:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000656:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800065a:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 800065e:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000662:	d1ed      	bne.n	8000640 <HAL_PCD_Init+0x90>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000664:	466e      	mov	r6, sp
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800066a:	682b      	ldr	r3, [r5, #0]
 800066c:	6033      	str	r3, [r6, #0]
 800066e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000672:	6820      	ldr	r0, [r4, #0]
 8000674:	f001 f934 	bl	80018e0 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000678:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800067a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 800067e:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000680:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000684:	f001 fc04 	bl	8001e90 <USB_DevDisconnect>
  return HAL_OK;
 8000688:	2000      	movs	r0, #0
}
 800068a:	b006      	add	sp, #24
 800068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000690:	2001      	movs	r0, #1
 8000692:	e7fa      	b.n	800068a <HAL_PCD_Init+0xda>
 8000694:	40005c00 	.word	0x40005c00
 8000698:	080030c0 	.word	0x080030c0

0800069c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800069c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80006a0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80006a2:	2b01      	cmp	r3, #1
{
 80006a4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80006a6:	d00e      	beq.n	80006c6 <HAL_PCD_Start+0x2a>
 80006a8:	2101      	movs	r1, #1
 80006aa:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80006ae:	f002 fbee 	bl	8002e8e <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80006b2:	6820      	ldr	r0, [r4, #0]
 80006b4:	f001 fbea 	bl	8001e8c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80006b8:	6820      	ldr	r0, [r4, #0]
 80006ba:	f001 f8fc 	bl	80018b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80006be:	2000      	movs	r0, #0
 80006c0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80006c4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80006c6:	2002      	movs	r0, #2
}
 80006c8:	bd10      	pop	{r4, pc}

080006ca <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80006ca:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80006ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80006d0:	2a01      	cmp	r2, #1
{
 80006d2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80006d4:	d00b      	beq.n	80006ee <HAL_PCD_SetAddress+0x24>
 80006d6:	2201      	movs	r2, #1
 80006d8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80006dc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80006e0:	6800      	ldr	r0, [r0, #0]
 80006e2:	f001 fbcd 	bl	8001e80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80006ec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80006ee:	2002      	movs	r0, #2
  return HAL_OK;
}
 80006f0:	bd10      	pop	{r4, pc}

080006f2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80006f2:	b538      	push	{r3, r4, r5, lr}
 80006f4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80006f6:	b248      	sxtb	r0, r1
 80006f8:	2800      	cmp	r0, #0
 80006fa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006fe:	bfb5      	itete	lt
 8000700:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000704:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000708:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800070a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800070e:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000710:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000712:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000714:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000716:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 800071a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800071c:	2b01      	cmp	r3, #1
 800071e:	d009      	beq.n	8000734 <HAL_PCD_EP_Open+0x42>
 8000720:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000722:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000724:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000728:	f001 f8f6 	bl	8001918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800072c:	2000      	movs	r0, #0
 800072e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000732:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000734:	2002      	movs	r0, #2
}
 8000736:	bd38      	pop	{r3, r4, r5, pc}

08000738 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000738:	b24b      	sxtb	r3, r1
 800073a:	2b00      	cmp	r3, #0
 800073c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000740:	bfb5      	itete	lt
 8000742:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000746:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800074a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800074c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000750:	0fdb      	lsrs	r3, r3, #31
{  
 8000752:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000754:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000756:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000758:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800075c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800075e:	2b01      	cmp	r3, #1
 8000760:	d009      	beq.n	8000776 <HAL_PCD_EP_Close+0x3e>
 8000762:	2301      	movs	r3, #1
 8000764:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000768:	6800      	ldr	r0, [r0, #0]
 800076a:	f001 fa47 	bl	8001bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800076e:	2000      	movs	r0, #0
 8000770:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000774:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000776:	2002      	movs	r0, #2
}
 8000778:	bd10      	pop	{r4, pc}

0800077a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800077a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800077c:	2600      	movs	r6, #0
 800077e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000782:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000784:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000786:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800078a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800078e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000790:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000794:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000798:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800079c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80007a0:	6800      	ldr	r0, [r0, #0]
 80007a2:	f001 fb8f 	bl	8001ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80007a6:	4630      	mov	r0, r6
 80007a8:	bd70      	pop	{r4, r5, r6, pc}

080007aa <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80007aa:	f001 010f 	and.w	r1, r1, #15
 80007ae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80007b2:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80007b6:	4770      	bx	lr

080007b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80007b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80007c0:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80007c2:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80007c4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80007c6:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80007c8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80007cc:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80007d0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80007d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80007d4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80007d6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80007da:	6800      	ldr	r0, [r0, #0]
 80007dc:	f001 fb72 	bl	8001ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80007e0:	4630      	mov	r0, r6
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <HAL_PCD_IRQHandler>:
{ 
 80007e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80007e8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80007ea:	6800      	ldr	r0, [r0, #0]
 80007ec:	f001 fb52 	bl	8001e94 <USB_ReadInterrupts>
 80007f0:	0400      	lsls	r0, r0, #16
 80007f2:	f100 8098 	bmi.w	8000926 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80007f6:	6820      	ldr	r0, [r4, #0]
 80007f8:	f001 fb4c 	bl	8001e94 <USB_ReadInterrupts>
 80007fc:	0541      	lsls	r1, r0, #21
 80007fe:	d50f      	bpl.n	8000820 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000800:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000802:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000804:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	0c1b      	lsrs	r3, r3, #16
 8000810:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000814:	f002 fa47 	bl	8002ca6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000818:	2100      	movs	r1, #0
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff55 	bl	80006ca <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000820:	6820      	ldr	r0, [r4, #0]
 8000822:	f001 fb37 	bl	8001e94 <USB_ReadInterrupts>
 8000826:	0447      	lsls	r7, r0, #17
 8000828:	d508      	bpl.n	800083c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	f001 fb29 	bl	8001e94 <USB_ReadInterrupts>
 8000842:	0486      	lsls	r6, r0, #18
 8000844:	d508      	bpl.n	8000858 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000846:	6822      	ldr	r2, [r4, #0]
 8000848:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800084c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	0c1b      	lsrs	r3, r3, #16
 8000854:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	f001 fb1b 	bl	8001e94 <USB_ReadInterrupts>
 800085e:	04c5      	lsls	r5, r0, #19
 8000860:	d51c      	bpl.n	800089c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000862:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000864:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000866:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800086a:	f023 0304 	bic.w	r3, r3, #4
 800086e:	041b      	lsls	r3, r3, #16
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000876:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800087a:	f023 0308 	bic.w	r3, r3, #8
 800087e:	041b      	lsls	r3, r3, #16
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000886:	f002 fa31 	bl	8002cec <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800088a:	6822      	ldr	r2, [r4, #0]
 800088c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	0c1b      	lsrs	r3, r3, #16
 8000898:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	f001 faf9 	bl	8001e94 <USB_ReadInterrupts>
 80008a2:	0500      	lsls	r0, r0, #20
 80008a4:	d51d      	bpl.n	80008e2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80008b6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008be:	041b      	lsls	r3, r3, #16
 80008c0:	0c1b      	lsrs	r3, r3, #16
 80008c2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80008c6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80008d4:	f001 fade 	bl	8001e94 <USB_ReadInterrupts>
 80008d8:	04c1      	lsls	r1, r0, #19
 80008da:	d402      	bmi.n	80008e2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80008dc:	4620      	mov	r0, r4
 80008de:	f002 f9f5 	bl	8002ccc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80008e2:	6820      	ldr	r0, [r4, #0]
 80008e4:	f001 fad6 	bl	8001e94 <USB_ReadInterrupts>
 80008e8:	0582      	lsls	r2, r0, #22
 80008ea:	d50b      	bpl.n	8000904 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80008ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80008ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80008f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008f8:	041b      	lsls	r3, r3, #16
 80008fa:	0c1b      	lsrs	r3, r3, #16
 80008fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000900:	f002 f9cd 	bl	8002c9e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000904:	6820      	ldr	r0, [r4, #0]
 8000906:	f001 fac5 	bl	8001e94 <USB_ReadInterrupts>
 800090a:	05c3      	lsls	r3, r0, #23
 800090c:	d508      	bpl.n	8000920 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800090e:	6822      	ldr	r2, [r4, #0]
 8000910:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	0c1b      	lsrs	r3, r3, #16
 800091c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000920:	b002      	add	sp, #8
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000926:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000928:	4fc8      	ldr	r7, [pc, #800]	; (8000c4c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800092a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000c50 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800092e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000c54 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000932:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000936:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800093a:	6820      	ldr	r0, [r4, #0]
 800093c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000940:	b29b      	uxth	r3, r3
 8000942:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	f57f af55 	bpl.w	80007f6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800094c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000950:	f015 050f 	ands.w	r5, r5, #15
 8000954:	f040 80ab 	bne.w	8000aae <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000958:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800095c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800095e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000962:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000964:	d126      	bne.n	80009b4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000966:	403b      	ands	r3, r7
 8000968:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800096a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800096e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000972:	b29b      	uxth	r3, r3
 8000974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000978:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800097c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000986:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000988:	4413      	add	r3, r2
 800098a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800098c:	4620      	mov	r0, r4
 800098e:	f002 f97f 	bl	8002c90 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000992:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0cf      	beq.n	800093a <HAL_PCD_IRQHandler+0x156>
 800099a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800099c:	2a00      	cmp	r2, #0
 800099e:	d1cc      	bne.n	800093a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80009a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80009a4:	6821      	ldr	r1, [r4, #0]
 80009a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009aa:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80009ae:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80009b2:	e7c2      	b.n	800093a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80009b4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80009b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009bc:	051a      	lsls	r2, r3, #20
 80009be:	d51f      	bpl.n	8000a00 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009c4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80009d6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009de:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80009e2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80009e6:	f001 fb6d 	bl	80020c4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80009ea:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80009ec:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80009ee:	8813      	ldrh	r3, [r2, #0]
 80009f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009f4:	051b      	lsls	r3, r3, #20
 80009f6:	0d1b      	lsrs	r3, r3, #20
 80009f8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80009fa:	f002 f93b 	bl	8002c74 <HAL_PCD_SetupStageCallback>
 80009fe:	e79c      	b.n	800093a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a04:	041b      	lsls	r3, r3, #16
 8000a06:	d598      	bpl.n	800093a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a08:	8803      	ldrh	r3, [r0, #0]
 8000a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a0e:	051b      	lsls	r3, r3, #20
 8000a10:	0d1b      	lsrs	r3, r3, #20
 8000a12:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a18:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a2e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000a32:	b163      	cbz	r3, 8000a4e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a34:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000a38:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000a3c:	f001 fb42 	bl	80020c4 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000a40:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000a44:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000a48:	4413      	add	r3, r2
 8000a4a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4620      	mov	r0, r4
 8000a52:	f002 f915 	bl	8002c80 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000a5c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000a60:	2d3e      	cmp	r5, #62	; 0x3e
 8000a62:	b289      	uxth	r1, r1
 8000a64:	f101 0106 	add.w	r1, r1, #6
 8000a68:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000a6c:	d917      	bls.n	8000a9e <HAL_PCD_IRQHandler+0x2ba>
 8000a6e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000a72:	06ee      	lsls	r6, r5, #27
 8000a74:	bf04      	itt	eq
 8000a76:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000a7a:	b29b      	uxtheq	r3, r3
 8000a7c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a86:	8813      	ldrh	r3, [r2, #0]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	ea03 0308 	and.w	r3, r3, r8
 8000a8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9a:	8013      	strh	r3, [r2, #0]
 8000a9c:	e74d      	b.n	800093a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a9e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000aa2:	07ed      	lsls	r5, r5, #31
 8000aa4:	bf44      	itt	mi
 8000aa6:	3301      	addmi	r3, #1
 8000aa8:	b29b      	uxthmi	r3, r3
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	e7e8      	b.n	8000a80 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000aae:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ab8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000abc:	0419      	lsls	r1, r3, #16
 8000abe:	d53f      	bpl.n	8000b40 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ac0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ac4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000acc:	051b      	lsls	r3, r3, #20
 8000ace:	0d1b      	lsrs	r3, r3, #20
 8000ad0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ad4:	eb04 010a 	add.w	r1, r4, sl
 8000ad8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d174      	bne.n	8000bca <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ae0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ae4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3306      	adds	r3, #6
 8000aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000af0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000af8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000afc:	b136      	cbz	r6, 8000b0c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000afe:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000b02:	4633      	mov	r3, r6
 8000b04:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000b08:	f001 fadc 	bl	80020c4 <USB_ReadPMA>
 8000b0c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000b10:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000b14:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000b18:	4433      	add	r3, r6
 8000b1a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000b1e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000b22:	4432      	add	r2, r6
 8000b24:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000b28:	b123      	cbz	r3, 8000b34 <HAL_PCD_IRQHandler+0x350>
 8000b2a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000b2e:	4286      	cmp	r6, r0
 8000b30:	f080 8086 	bcs.w	8000c40 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000b34:	44a2      	add	sl, r4
 8000b36:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f002 f8a0 	bl	8002c80 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000b40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b44:	061a      	lsls	r2, r3, #24
 8000b46:	f57f aef8 	bpl.w	800093a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b4a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000b4c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b4e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b52:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	403b      	ands	r3, r7
 8000b58:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b5c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000b60:	3502      	adds	r5, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d178      	bne.n	8000c58 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b6a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	3302      	adds	r3, #2
 8000b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b7e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b86:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000b88:	b11b      	cbz	r3, 8000b92 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000b8a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000b8c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b8e:	f001 f987 	bl	8001ea0 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	4426      	add	r6, r4
 8000b96:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000b9a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ba6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000baa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000bae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bb0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000bb4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000bb6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000bb8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000bba:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000bbc:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8085 	bne.w	8000cce <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000bc4:	f002 f864 	bl	8002c90 <HAL_PCD_DataInStageCallback>
 8000bc8:	e6b7      	b.n	800093a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000bca:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000bce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000bdc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000bde:	d021      	beq.n	8000c24 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000be0:	3202      	adds	r2, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000be8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000bec:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000bf0:	b136      	cbz	r6, 8000c00 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000bf2:	4633      	mov	r3, r6
 8000bf4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000bf8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000bfc:	f001 fa62 	bl	80020c4 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000c00:	eb04 030a 	add.w	r3, r4, sl
 8000c04:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c12:	051b      	lsls	r3, r3, #20
 8000c14:	0d1b      	lsrs	r3, r3, #20
 8000c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c1e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c22:	e773      	b.n	8000b0c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c24:	3206      	adds	r2, #6
 8000c26:	4413      	add	r3, r2
 8000c28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c2c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000c30:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e3      	beq.n	8000c00 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c38:	4633      	mov	r3, r6
 8000c3a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000c3e:	e7db      	b.n	8000bf8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c40:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fd98 	bl	800077a <HAL_PCD_EP_Receive>
 8000c4a:	e779      	b.n	8000b40 <HAL_PCD_IRQHandler+0x35c>
 8000c4c:	ffff8f0f 	.word	0xffff8f0f
 8000c50:	ffffbf8f 	.word	0xffffbf8f
 8000c54:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000c58:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000c5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c66:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000c6a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000c6c:	d020      	beq.n	8000cb0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c6e:	3202      	adds	r2, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c7a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c82:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000c84:	b11b      	cbz	r3, 8000c8e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000c86:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000c88:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c8a:	f001 f909 	bl	8001ea0 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000c8e:	19a3      	adds	r3, r4, r6
 8000c90:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000c94:	6822      	ldr	r2, [r4, #0]
 8000c96:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c9e:	051b      	lsls	r3, r3, #20
 8000ca0:	0d1b      	lsrs	r3, r3, #20
 8000ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000caa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000cae:	e770      	b.n	8000b92 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000cb0:	3206      	adds	r2, #6
 8000cb2:	4413      	add	r3, r2
 8000cb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000cb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000cbc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cc4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0e1      	beq.n	8000c8e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000cca:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000ccc:	e7dc      	b.n	8000c88 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000cce:	f7ff fd73 	bl	80007b8 <HAL_PCD_EP_Transmit>
 8000cd2:	e632      	b.n	800093a <HAL_PCD_IRQHandler+0x156>

08000cd4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000cd4:	2201      	movs	r2, #1
{
 8000cd6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000cd8:	b24b      	sxtb	r3, r1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ce0:	bfb5      	itete	lt
 8000ce2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000ce6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cea:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000cec:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000cf0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000cf2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000cf4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000cf6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000cf8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000cfa:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000cfe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00e      	beq.n	8000d22 <HAL_PCD_EP_SetStall+0x4e>
 8000d04:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000d08:	6800      	ldr	r0, [r0, #0]
 8000d0a:	f001 f845 	bl	8001d98 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000d0e:	b925      	cbnz	r5, 8000d1a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000d10:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000d14:	6820      	ldr	r0, [r4, #0]
 8000d16:	f001 f8c1 	bl	8001e9c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d22:	2002      	movs	r0, #2
}
 8000d24:	bd38      	pop	{r3, r4, r5, pc}

08000d26 <HAL_PCD_EP_ClrStall>:
{
 8000d26:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000d28:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000d2a:	b24b      	sxtb	r3, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d32:	bfb5      	itete	lt
 8000d34:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000d38:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d3c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000d3e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000d42:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000d44:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000d46:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000d48:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000d4a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000d4e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d009      	beq.n	8000d68 <HAL_PCD_EP_ClrStall+0x42>
 8000d54:	2301      	movs	r3, #1
 8000d56:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000d5a:	6800      	ldr	r0, [r0, #0]
 8000d5c:	f001 f84e 	bl	8001dfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000d60:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000d64:	4620      	mov	r0, r4
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000d68:	2002      	movs	r0, #2
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}

08000d6c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000d6c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d70:	bf1b      	ittet	ne
 8000d72:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000d76:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d7a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d7e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000d80:	bf08      	it	eq
 8000d82:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000d86:	b91a      	cbnz	r2, 8000d90 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000d88:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000d8a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000d90:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000d92:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d94:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000d96:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d98:	8103      	strh	r3, [r0, #8]
 8000d9a:	e7f7      	b.n	8000d8c <HAL_PCDEx_PMAConfig+0x20>

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8000da0:	4604      	mov	r4, r0
 8000da2:	b920      	cbnz	r0, 8000dae <HAL_RCC_OscConfig+0x12>
 8000da4:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000da8:	48a5      	ldr	r0, [pc, #660]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000daa:	f001 fe5c 	bl	8002a66 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	b133      	cbz	r3, 8000dc0 <HAL_RCC_OscConfig+0x24>
 8000db2:	071a      	lsls	r2, r3, #28
 8000db4:	d104      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x24>
 8000db6:	f240 1171 	movw	r1, #369	; 0x171
 8000dba:	48a1      	ldr	r0, [pc, #644]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000dbc:	f001 fe53 	bl	8002a66 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	07db      	lsls	r3, r3, #31
 8000dc4:	d418      	bmi.n	8000df8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	079f      	lsls	r7, r3, #30
 8000dca:	d472      	bmi.n	8000eb2 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	0719      	lsls	r1, r3, #28
 8000dd0:	f100 80b9 	bmi.w	8000f46 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	075a      	lsls	r2, r3, #29
 8000dd8:	f100 80eb 	bmi.w	8000fb2 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d904      	bls.n	8000dec <HAL_RCC_OscConfig+0x50>
 8000de2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8000de6:	4896      	ldr	r0, [pc, #600]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000de8:	f001 fe3d 	bl	8002a66 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dec:	69e2      	ldr	r2, [r4, #28]
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	f040 815e 	bne.w	80010b0 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
 8000df6:	e020      	b.n	8000e3a <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000dfe:	d007      	beq.n	8000e10 <HAL_RCC_OscConfig+0x74>
 8000e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e04:	d004      	beq.n	8000e10 <HAL_RCC_OscConfig+0x74>
 8000e06:	f240 1177 	movw	r1, #375	; 0x177
 8000e0a:	488d      	ldr	r0, [pc, #564]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000e0c:	f001 fe2b 	bl	8002a66 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e10:	4d8c      	ldr	r5, [pc, #560]	; (8001044 <HAL_RCC_OscConfig+0x2a8>)
 8000e12:	686b      	ldr	r3, [r5, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d007      	beq.n	8000e2c <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1c:	686b      	ldr	r3, [r5, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d10c      	bne.n	8000e40 <HAL_RCC_OscConfig+0xa4>
 8000e26:	686b      	ldr	r3, [r5, #4]
 8000e28:	03de      	lsls	r6, r3, #15
 8000e2a:	d509      	bpl.n	8000e40 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	039d      	lsls	r5, r3, #14
 8000e30:	d5c9      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x2a>
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1c6      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8000e38:	2001      	movs	r0, #1
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e40:	6863      	ldr	r3, [r4, #4]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d110      	bne.n	8000e6a <HAL_RCC_OscConfig+0xce>
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e50:	f7ff f99a 	bl	8000188 <HAL_GetTick>
 8000e54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	0398      	lsls	r0, r3, #14
 8000e5a:	d4b4      	bmi.n	8000dc6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff f994 	bl	8000188 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	2864      	cmp	r0, #100	; 0x64
 8000e64:	d9f7      	bls.n	8000e56 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e7e7      	b.n	8000e3a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	b99b      	cbnz	r3, 8000e94 <HAL_RCC_OscConfig+0xf8>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e7c:	f7ff f984 	bl	8000188 <HAL_GetTick>
 8000e80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	0399      	lsls	r1, r3, #14
 8000e86:	d59e      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff f97e 	bl	8000188 <HAL_GetTick>
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	2864      	cmp	r0, #100	; 0x64
 8000e90:	d9f7      	bls.n	8000e82 <HAL_RCC_OscConfig+0xe6>
 8000e92:	e7e8      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	d103      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x108>
 8000e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	e7d1      	b.n	8000e48 <HAL_RCC_OscConfig+0xac>
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	e7cd      	b.n	8000e4e <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d904      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x126>
 8000eb8:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000ebc:	4860      	ldr	r0, [pc, #384]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000ebe:	f001 fdd2 	bl	8002a66 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000ec2:	6963      	ldr	r3, [r4, #20]
 8000ec4:	2b1f      	cmp	r3, #31
 8000ec6:	d904      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x136>
 8000ec8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000ecc:	485c      	ldr	r0, [pc, #368]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	f001 fdca 	bl	8002a66 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed2:	4d5c      	ldr	r5, [pc, #368]	; (8001044 <HAL_RCC_OscConfig+0x2a8>)
 8000ed4:	686b      	ldr	r3, [r5, #4]
 8000ed6:	f013 0f0c 	tst.w	r3, #12
 8000eda:	d007      	beq.n	8000eec <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000edc:	686b      	ldr	r3, [r5, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d110      	bne.n	8000f08 <HAL_RCC_OscConfig+0x16c>
 8000ee6:	686b      	ldr	r3, [r5, #4]
 8000ee8:	03da      	lsls	r2, r3, #15
 8000eea:	d40d      	bmi.n	8000f08 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	079b      	lsls	r3, r3, #30
 8000ef0:	d502      	bpl.n	8000ef8 <HAL_RCC_OscConfig+0x15c>
 8000ef2:	6923      	ldr	r3, [r4, #16]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d19f      	bne.n	8000e38 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	6962      	ldr	r2, [r4, #20]
 8000efc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f04:	602b      	str	r3, [r5, #0]
 8000f06:	e761      	b.n	8000dcc <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f08:	6922      	ldr	r2, [r4, #16]
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	b16a      	cbz	r2, 8000f2a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f12:	f7ff f939 	bl	8000188 <HAL_GetTick>
 8000f16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	079f      	lsls	r7, r3, #30
 8000f1c:	d4ec      	bmi.n	8000ef8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff f933 	bl	8000188 <HAL_GetTick>
 8000f22:	1b80      	subs	r0, r0, r6
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d9f7      	bls.n	8000f18 <HAL_RCC_OscConfig+0x17c>
 8000f28:	e79d      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f2c:	f7ff f92c 	bl	8000188 <HAL_GetTick>
 8000f30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	682b      	ldr	r3, [r5, #0]
 8000f34:	0798      	lsls	r0, r3, #30
 8000f36:	f57f af49 	bpl.w	8000dcc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff f925 	bl	8000188 <HAL_GetTick>
 8000f3e:	1b80      	subs	r0, r0, r6
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f6      	bls.n	8000f32 <HAL_RCC_OscConfig+0x196>
 8000f44:	e78f      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000f46:	69a3      	ldr	r3, [r4, #24]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d904      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1ba>
 8000f4c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000f50:	483b      	ldr	r0, [pc, #236]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000f52:	f001 fd88 	bl	8002a66 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f56:	69a2      	ldr	r2, [r4, #24]
 8000f58:	4d3a      	ldr	r5, [pc, #232]	; (8001044 <HAL_RCC_OscConfig+0x2a8>)
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <HAL_RCC_OscConfig+0x2b0>)
 8000f5c:	b1da      	cbz	r2, 8000f96 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f62:	f7ff f911 	bl	8000188 <HAL_GetTick>
 8000f66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f6a:	079b      	lsls	r3, r3, #30
 8000f6c:	d50d      	bpl.n	8000f8a <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f72:	4b37      	ldr	r3, [pc, #220]	; (8001050 <HAL_RCC_OscConfig+0x2b4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f7a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f7c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	1e5a      	subs	r2, r3, #1
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f9      	bne.n	8000f7c <HAL_RCC_OscConfig+0x1e0>
 8000f88:	e724      	b.n	8000dd4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff f8fd 	bl	8000188 <HAL_GetTick>
 8000f8e:	1b80      	subs	r0, r0, r6
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9e9      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1cc>
 8000f94:	e767      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8000f96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f98:	f7ff f8f6 	bl	8000188 <HAL_GetTick>
 8000f9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fa0:	079f      	lsls	r7, r3, #30
 8000fa2:	f57f af17 	bpl.w	8000dd4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa6:	f7ff f8ef 	bl	8000188 <HAL_GetTick>
 8000faa:	1b80      	subs	r0, r0, r6
 8000fac:	2802      	cmp	r0, #2
 8000fae:	d9f6      	bls.n	8000f9e <HAL_RCC_OscConfig+0x202>
 8000fb0:	e759      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d906      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x22a>
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d004      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x22a>
 8000fbc:	f240 211b 	movw	r1, #539	; 0x21b
 8000fc0:	481f      	ldr	r0, [pc, #124]	; (8001040 <HAL_RCC_OscConfig+0x2a4>)
 8000fc2:	f001 fd50 	bl	8002a66 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4d1f      	ldr	r5, [pc, #124]	; (8001044 <HAL_RCC_OscConfig+0x2a8>)
 8000fc8:	69eb      	ldr	r3, [r5, #28]
 8000fca:	00d8      	lsls	r0, r3, #3
 8000fcc:	d424      	bmi.n	8001018 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8000fce:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	69eb      	ldr	r3, [r5, #28]
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	61eb      	str	r3, [r5, #28]
 8000fd8:	69eb      	ldr	r3, [r5, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	4e1c      	ldr	r6, [pc, #112]	; (8001054 <HAL_RCC_OscConfig+0x2b8>)
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	05d9      	lsls	r1, r3, #23
 8000fe8:	d518      	bpl.n	800101c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d133      	bne.n	8001058 <HAL_RCC_OscConfig+0x2bc>
 8000ff0:	6a2b      	ldr	r3, [r5, #32]
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ff8:	f7ff f8c6 	bl	8000188 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffc:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001000:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001002:	6a2b      	ldr	r3, [r5, #32]
 8001004:	079b      	lsls	r3, r3, #30
 8001006:	d54c      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8001008:	2f00      	cmp	r7, #0
 800100a:	f43f aee7 	beq.w	8000ddc <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 800100e:	69eb      	ldr	r3, [r5, #28]
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	61eb      	str	r3, [r5, #28]
 8001016:	e6e1      	b.n	8000ddc <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8001018:	2700      	movs	r7, #0
 800101a:	e7e2      	b.n	8000fe2 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101c:	6833      	ldr	r3, [r6, #0]
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001024:	f7ff f8b0 	bl	8000188 <HAL_GetTick>
 8001028:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	6833      	ldr	r3, [r6, #0]
 800102c:	05da      	lsls	r2, r3, #23
 800102e:	d4dc      	bmi.n	8000fea <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001030:	f7ff f8aa 	bl	8000188 <HAL_GetTick>
 8001034:	eba0 0008 	sub.w	r0, r0, r8
 8001038:	2864      	cmp	r0, #100	; 0x64
 800103a:	d9f6      	bls.n	800102a <HAL_RCC_OscConfig+0x28e>
 800103c:	e713      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
 800103e:	bf00      	nop
 8001040:	080030f8 	.word	0x080030f8
 8001044:	40021000 	.word	0x40021000
 8001048:	42420000 	.word	0x42420000
 800104c:	42420480 	.word	0x42420480
 8001050:	20000114 	.word	0x20000114
 8001054:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	b9ab      	cbnz	r3, 8001086 <HAL_RCC_OscConfig+0x2ea>
 800105a:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	622b      	str	r3, [r5, #32]
 8001066:	6a2b      	ldr	r3, [r5, #32]
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800106e:	f7ff f88b 	bl	8000188 <HAL_GetTick>
 8001072:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	6a2b      	ldr	r3, [r5, #32]
 8001076:	0798      	lsls	r0, r3, #30
 8001078:	d5c6      	bpl.n	8001008 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff f885 	bl	8000188 <HAL_GetTick>
 800107e:	1b80      	subs	r0, r0, r6
 8001080:	4540      	cmp	r0, r8
 8001082:	d9f7      	bls.n	8001074 <HAL_RCC_OscConfig+0x2d8>
 8001084:	e6ef      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	2b05      	cmp	r3, #5
 8001088:	6a2b      	ldr	r3, [r5, #32]
 800108a:	d103      	bne.n	8001094 <HAL_RCC_OscConfig+0x2f8>
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	622b      	str	r3, [r5, #32]
 8001092:	e7ad      	b.n	8000ff0 <HAL_RCC_OscConfig+0x254>
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	622b      	str	r3, [r5, #32]
 800109a:	6a2b      	ldr	r3, [r5, #32]
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	e7a9      	b.n	8000ff6 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff f871 	bl	8000188 <HAL_GetTick>
 80010a6:	eba0 0008 	sub.w	r0, r0, r8
 80010aa:	42b0      	cmp	r0, r6
 80010ac:	d9a9      	bls.n	8001002 <HAL_RCC_OscConfig+0x266>
 80010ae:	e6da      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b0:	4d38      	ldr	r5, [pc, #224]	; (8001194 <HAL_RCC_OscConfig+0x3f8>)
 80010b2:	686b      	ldr	r3, [r5, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	f43f aebd 	beq.w	8000e38 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010be:	2a02      	cmp	r2, #2
 80010c0:	4e35      	ldr	r6, [pc, #212]	; (8001198 <HAL_RCC_OscConfig+0x3fc>)
 80010c2:	d157      	bne.n	8001174 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80010c4:	6a23      	ldr	r3, [r4, #32]
 80010c6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80010ca:	d004      	beq.n	80010d6 <HAL_RCC_OscConfig+0x33a>
 80010cc:	f240 21c2 	movw	r1, #706	; 0x2c2
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <HAL_RCC_OscConfig+0x400>)
 80010d2:	f001 fcc8 	bl	8002a66 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80010d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010d8:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 80010dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80010e0:	d010      	beq.n	8001104 <HAL_RCC_OscConfig+0x368>
 80010e2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80010e6:	d00d      	beq.n	8001104 <HAL_RCC_OscConfig+0x368>
 80010e8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80010ec:	d00a      	beq.n	8001104 <HAL_RCC_OscConfig+0x368>
 80010ee:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80010f2:	d007      	beq.n	8001104 <HAL_RCC_OscConfig+0x368>
 80010f4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80010f8:	d004      	beq.n	8001104 <HAL_RCC_OscConfig+0x368>
 80010fa:	f240 21c3 	movw	r1, #707	; 0x2c3
 80010fe:	4827      	ldr	r0, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x400>)
 8001100:	f001 fcb1 	bl	8002a66 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff f83e 	bl	8000188 <HAL_GetTick>
 800110c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	0199      	lsls	r1, r3, #6
 8001112:	d429      	bmi.n	8001168 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001114:	6a23      	ldr	r3, [r4, #32]
 8001116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111a:	d10e      	bne.n	800113a <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8001122:	d004      	beq.n	800112e <HAL_RCC_OscConfig+0x392>
 8001124:	f240 21d9 	movw	r1, #729	; 0x2d9
 8001128:	481c      	ldr	r0, [pc, #112]	; (800119c <HAL_RCC_OscConfig+0x400>)
 800112a:	f001 fc9c 	bl	8002a66 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112e:	686b      	ldr	r3, [r5, #4]
 8001130:	68a2      	ldr	r2, [r4, #8]
 8001132:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001136:	4313      	orrs	r3, r2
 8001138:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113a:	6a23      	ldr	r3, [r4, #32]
 800113c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800113e:	686a      	ldr	r2, [r5, #4]
 8001140:	430b      	orrs	r3, r1
 8001142:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001146:	4313      	orrs	r3, r2
 8001148:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800114a:	2301      	movs	r3, #1
 800114c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800114e:	f7ff f81b 	bl	8000188 <HAL_GetTick>
 8001152:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	019a      	lsls	r2, r3, #6
 8001158:	f53f ae4c 	bmi.w	8000df4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff f814 	bl	8000188 <HAL_GetTick>
 8001160:	1b00      	subs	r0, r0, r4
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f6      	bls.n	8001154 <HAL_RCC_OscConfig+0x3b8>
 8001166:	e67e      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff f80e 	bl	8000188 <HAL_GetTick>
 800116c:	1bc0      	subs	r0, r0, r7
 800116e:	2802      	cmp	r0, #2
 8001170:	d9cd      	bls.n	800110e <HAL_RCC_OscConfig+0x372>
 8001172:	e678      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001178:	f7ff f806 	bl	8000188 <HAL_GetTick>
 800117c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	f57f ae37 	bpl.w	8000df4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7fe ffff 	bl	8000188 <HAL_GetTick>
 800118a:	1b00      	subs	r0, r0, r4
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x3e2>
 8001190:	e669      	b.n	8000e66 <HAL_RCC_OscConfig+0xca>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	42420060 	.word	0x42420060
 800119c:	080030f8 	.word	0x080030f8

080011a0 <HAL_RCC_GetSysClockFreq>:
{
 80011a0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80011a4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011a6:	ac02      	add	r4, sp, #8
 80011a8:	f103 0510 	add.w	r5, r3, #16
 80011ac:	4622      	mov	r2, r4
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	6859      	ldr	r1, [r3, #4]
 80011b2:	3308      	adds	r3, #8
 80011b4:	c203      	stmia	r2!, {r0, r1}
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	4614      	mov	r4, r2
 80011ba:	d1f7      	bne.n	80011ac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011bc:	2301      	movs	r3, #1
 80011be:	f88d 3004 	strb.w	r3, [sp, #4]
 80011c2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011c6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80011ca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011cc:	f003 020c 	and.w	r2, r3, #12
 80011d0:	2a08      	cmp	r2, #8
 80011d2:	d117      	bne.n	8001204 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011d8:	a806      	add	r0, sp, #24
 80011da:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011dc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011de:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011e2:	d50c      	bpl.n	80011fe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011e4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011e6:	480a      	ldr	r0, [pc, #40]	; (8001210 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011e8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ee:	aa06      	add	r2, sp, #24
 80011f0:	4413      	add	r3, r2
 80011f2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011f6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011fa:	b007      	add	sp, #28
 80011fc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_RCC_GetSysClockFreq+0x74>)
 8001200:	4350      	muls	r0, r2
 8001202:	e7fa      	b.n	80011fa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001206:	e7f8      	b.n	80011fa <HAL_RCC_GetSysClockFreq+0x5a>
 8001208:	0800303c 	.word	0x0800303c
 800120c:	40021000 	.word	0x40021000
 8001210:	007a1200 	.word	0x007a1200
 8001214:	003d0900 	.word	0x003d0900

08001218 <HAL_RCC_ClockConfig>:
{
 8001218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121c:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 800121e:	4604      	mov	r4, r0
 8001220:	b920      	cbnz	r0, 800122c <HAL_RCC_ClockConfig+0x14>
 8001222:	f240 312e 	movw	r1, #814	; 0x32e
 8001226:	487f      	ldr	r0, [pc, #508]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001228:	f001 fc1d 	bl	8002a66 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	071d      	lsls	r5, r3, #28
 8001230:	d104      	bne.n	800123c <HAL_RCC_ClockConfig+0x24>
 8001232:	f240 312f 	movw	r1, #815	; 0x32f
 8001236:	487b      	ldr	r0, [pc, #492]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001238:	f001 fc15 	bl	8002a66 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800123c:	2e02      	cmp	r6, #2
 800123e:	d904      	bls.n	800124a <HAL_RCC_ClockConfig+0x32>
 8001240:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001244:	4877      	ldr	r0, [pc, #476]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001246:	f001 fc0e 	bl	8002a66 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800124a:	4a77      	ldr	r2, [pc, #476]	; (8001428 <HAL_RCC_ClockConfig+0x210>)
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	429e      	cmp	r6, r3
 8001254:	d83d      	bhi.n	80012d2 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	0798      	lsls	r0, r3, #30
 800125a:	d447      	bmi.n	80012ec <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	07da      	lsls	r2, r3, #31
 8001260:	d470      	bmi.n	8001344 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001262:	4a71      	ldr	r2, [pc, #452]	; (8001428 <HAL_RCC_ClockConfig+0x210>)
 8001264:	6813      	ldr	r3, [r2, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	429e      	cmp	r6, r3
 800126c:	f0c0 80b5 	bcc.w	80013da <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	4d6e      	ldr	r5, [pc, #440]	; (800142c <HAL_RCC_ClockConfig+0x214>)
 8001274:	f013 0f04 	tst.w	r3, #4
 8001278:	f040 80bb 	bne.w	80013f2 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	071b      	lsls	r3, r3, #28
 8001280:	d517      	bpl.n	80012b2 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x8c>
 800128a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800128e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001292:	d007      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x8c>
 8001294:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001298:	d004      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x8c>
 800129a:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 800129e:	4861      	ldr	r0, [pc, #388]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 80012a0:	f001 fbe1 	bl	8002a66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012a4:	686b      	ldr	r3, [r5, #4]
 80012a6:	6922      	ldr	r2, [r4, #16]
 80012a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b2:	f7ff ff75 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 80012b6:	686b      	ldr	r3, [r5, #4]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <HAL_RCC_ClockConfig+0x218>)
 80012ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	40d8      	lsrs	r0, r3
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_ClockConfig+0x21c>)
 80012c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f001 fbf0 	bl	8002aac <HAL_InitTick>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
}
 80012ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f023 0307 	bic.w	r3, r3, #7
 80012d8:	4333      	orrs	r3, r6
 80012da:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	429e      	cmp	r6, r3
 80012e4:	d0b7      	beq.n	8001256 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012ec:	4d4f      	ldr	r5, [pc, #316]	; (800142c <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ee:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f2:	bf1e      	ittt	ne
 80012f4:	686a      	ldrne	r2, [r5, #4]
 80012f6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80012fa:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012fe:	bf42      	ittt	mi
 8001300:	686b      	ldrmi	r3, [r5, #4]
 8001302:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8001306:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001308:	68a3      	ldr	r3, [r4, #8]
 800130a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800130e:	d012      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11e>
 8001310:	f023 0220 	bic.w	r2, r3, #32
 8001314:	2a90      	cmp	r2, #144	; 0x90
 8001316:	d00e      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11e>
 8001318:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800131c:	2aa0      	cmp	r2, #160	; 0xa0
 800131e:	d00a      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11e>
 8001320:	f023 0210 	bic.w	r2, r3, #16
 8001324:	2ac0      	cmp	r2, #192	; 0xc0
 8001326:	d006      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11e>
 8001328:	2bf0      	cmp	r3, #240	; 0xf0
 800132a:	d004      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11e>
 800132c:	f240 3156 	movw	r1, #854	; 0x356
 8001330:	483c      	ldr	r0, [pc, #240]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001332:	f001 fb98 	bl	8002a66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001336:	686b      	ldr	r3, [r5, #4]
 8001338:	68a2      	ldr	r2, [r4, #8]
 800133a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800133e:	4313      	orrs	r3, r2
 8001340:	606b      	str	r3, [r5, #4]
 8001342:	e78b      	b.n	800125c <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d904      	bls.n	8001354 <HAL_RCC_ClockConfig+0x13c>
 800134a:	f240 315d 	movw	r1, #861	; 0x35d
 800134e:	4835      	ldr	r0, [pc, #212]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001350:	f001 fb89 	bl	8002a66 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001354:	6862      	ldr	r2, [r4, #4]
 8001356:	4d35      	ldr	r5, [pc, #212]	; (800142c <HAL_RCC_ClockConfig+0x214>)
 8001358:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	d11d      	bne.n	800139a <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	d0c0      	beq.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001364:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	4313      	orrs	r3, r2
 8001370:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001372:	f7fe ff09 	bl	8000188 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001378:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	2b01      	cmp	r3, #1
 800137c:	d115      	bne.n	80013aa <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800137e:	686b      	ldr	r3, [r5, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	f43f af6c 	beq.w	8001262 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f7fe fefd 	bl	8000188 <HAL_GetTick>
 800138e:	1bc0      	subs	r0, r0, r7
 8001390:	4540      	cmp	r0, r8
 8001392:	d9f4      	bls.n	800137e <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8001394:	2003      	movs	r0, #3
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139a:	2a02      	cmp	r2, #2
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013a2:	e7de      	b.n	8001362 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	f013 0f02 	tst.w	r3, #2
 80013a8:	e7db      	b.n	8001362 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d110      	bne.n	80013d0 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ae:	686b      	ldr	r3, [r5, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	f43f af54 	beq.w	8001262 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ba:	f7fe fee5 	bl	8000188 <HAL_GetTick>
 80013be:	1bc0      	subs	r0, r0, r7
 80013c0:	4540      	cmp	r0, r8
 80013c2:	d9f4      	bls.n	80013ae <HAL_RCC_ClockConfig+0x196>
 80013c4:	e7e6      	b.n	8001394 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f7fe fedf 	bl	8000188 <HAL_GetTick>
 80013ca:	1bc0      	subs	r0, r0, r7
 80013cc:	4540      	cmp	r0, r8
 80013ce:	d8e1      	bhi.n	8001394 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d0:	686b      	ldr	r3, [r5, #4]
 80013d2:	f013 0f0c 	tst.w	r3, #12
 80013d6:	d1f6      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
 80013d8:	e743      	b.n	8001262 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f023 0307 	bic.w	r3, r3, #7
 80013e0:	4333      	orrs	r3, r6
 80013e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	429e      	cmp	r6, r3
 80013ec:	f47f af7b 	bne.w	80012e6 <HAL_RCC_ClockConfig+0xce>
 80013f0:	e73e      	b.n	8001270 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80013f2:	68e3      	ldr	r3, [r4, #12]
 80013f4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_ClockConfig+0x1fc>
 80013fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013fe:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001402:	d007      	beq.n	8001414 <HAL_RCC_ClockConfig+0x1fc>
 8001404:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001408:	d004      	beq.n	8001414 <HAL_RCC_ClockConfig+0x1fc>
 800140a:	f240 31b1 	movw	r1, #945	; 0x3b1
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_RCC_ClockConfig+0x20c>)
 8001410:	f001 fb29 	bl	8002a66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001414:	686b      	ldr	r3, [r5, #4]
 8001416:	68e2      	ldr	r2, [r4, #12]
 8001418:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800141c:	4313      	orrs	r3, r2
 800141e:	606b      	str	r3, [r5, #4]
 8001420:	e72c      	b.n	800127c <HAL_RCC_ClockConfig+0x64>
 8001422:	bf00      	nop
 8001424:	080030f8 	.word	0x080030f8
 8001428:	40022000 	.word	0x40022000
 800142c:	40021000 	.word	0x40021000
 8001430:	080031a3 	.word	0x080031a3
 8001434:	20000114 	.word	0x20000114

08001438 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_RCC_GetPCLK2Freq+0x14>)
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_RCC_GetPCLK2Freq+0x18>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001446:	6810      	ldr	r0, [r2, #0]
} 
 8001448:	40d8      	lsrs	r0, r3
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	080031b3 	.word	0x080031b3
 8001454:	20000114 	.word	0x20000114

08001458 <HAL_RCC_GetClockConfig>:
{
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 800145c:	4604      	mov	r4, r0
 800145e:	b920      	cbnz	r0, 800146a <HAL_RCC_GetClockConfig+0x12>
 8001460:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <HAL_RCC_GetClockConfig+0x54>)
 8001466:	f001 fafe 	bl	8002a66 <assert_failed>
  assert_param(pFLatency != NULL);
 800146a:	b925      	cbnz	r5, 8001476 <HAL_RCC_GetClockConfig+0x1e>
 800146c:	f240 5131 	movw	r1, #1329	; 0x531
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <HAL_RCC_GetClockConfig+0x54>)
 8001472:	f001 faf8 	bl	8002a66 <assert_failed>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001476:	230f      	movs	r3, #15
 8001478:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_RCC_GetClockConfig+0x58>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800148a:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001492:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800149c:	6123      	str	r3, [r4, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetClockConfig+0x5c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	602b      	str	r3, [r5, #0]
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	bf00      	nop
 80014ac:	080030f8 	.word	0x080030f8
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80014b8:	6803      	ldr	r3, [r0, #0]
{
 80014ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80014be:	f013 0f13 	tst.w	r3, #19
{
 80014c2:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80014c4:	d103      	bne.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x16>
 80014c6:	217c      	movs	r1, #124	; 0x7c
 80014c8:	4845      	ldr	r0, [pc, #276]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80014ca:	f001 facc 	bl	8002a66 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	07d9      	lsls	r1, r3, #31
 80014d2:	d528      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80014d4:	686b      	ldr	r3, [r5, #4]
 80014d6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80014da:	d003      	beq.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80014dc:	2182      	movs	r1, #130	; 0x82
 80014de:	4840      	ldr	r0, [pc, #256]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80014e0:	f001 fac1 	bl	8002a66 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e4:	4c3f      	ldr	r4, [pc, #252]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80014e6:	69e3      	ldr	r3, [r4, #28]
 80014e8:	00da      	lsls	r2, r3, #3
 80014ea:	d444      	bmi.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80014ec:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	69e3      	ldr	r3, [r4, #28]
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61e3      	str	r3, [r4, #28]
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4e39      	ldr	r6, [pc, #228]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001502:	6833      	ldr	r3, [r6, #0]
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	d538      	bpl.n	800157a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001508:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800150a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800150e:	d148      	bne.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001510:	6a23      	ldr	r3, [r4, #32]
 8001512:	686a      	ldr	r2, [r5, #4]
 8001514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001518:	4313      	orrs	r3, r2
 800151a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800151c:	b11f      	cbz	r7, 8001526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	69e3      	ldr	r3, [r4, #28]
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	079b      	lsls	r3, r3, #30
 800152a:	d50e      	bpl.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800152c:	68ab      	ldr	r3, [r5, #8]
 800152e:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8001532:	d003      	beq.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001534:	21c9      	movs	r1, #201	; 0xc9
 8001536:	482a      	ldr	r0, [pc, #168]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001538:	f001 fa95 	bl	8002a66 <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800153c:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800153e:	68a9      	ldr	r1, [r5, #8]
 8001540:	6853      	ldr	r3, [r2, #4]
 8001542:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001546:	430b      	orrs	r3, r1
 8001548:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800154a:	6828      	ldr	r0, [r5, #0]
 800154c:	f010 0010 	ands.w	r0, r0, #16
 8001550:	d024      	beq.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8001552:	68eb      	ldr	r3, [r5, #12]
 8001554:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001558:	d004      	beq.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800155a:	f240 1125 	movw	r1, #293	; 0x125
 800155e:	4820      	ldr	r0, [pc, #128]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001560:	f001 fa81 	bl	8002a66 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001566:	68e9      	ldr	r1, [r5, #12]
 8001568:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800156a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800156c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001570:	430b      	orrs	r3, r1
 8001572:	6053      	str	r3, [r2, #4]
 8001574:	e012      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2700      	movs	r7, #0
 8001578:	e7c2      	b.n	8001500 <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	6833      	ldr	r3, [r6, #0]
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001582:	f7fe fe01 	bl	8000188 <HAL_GetTick>
 8001586:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	6833      	ldr	r3, [r6, #0]
 800158a:	05d8      	lsls	r0, r3, #23
 800158c:	d4bc      	bmi.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7fe fdfb 	bl	8000188 <HAL_GetTick>
 8001592:	eba0 0008 	sub.w	r0, r0, r8
 8001596:	2864      	cmp	r0, #100	; 0x64
 8001598:	d9f6      	bls.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
}
 800159c:	b002      	add	sp, #8
 800159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015a2:	686a      	ldr	r2, [r5, #4]
 80015a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d0b1      	beq.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80015ac:	2001      	movs	r0, #1
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015b0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80015b2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015b4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015ba:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80015bc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015be:	07d9      	lsls	r1, r3, #31
 80015c0:	d5a6      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80015c2:	f7fe fde1 	bl	8000188 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	6a23      	ldr	r3, [r4, #32]
 80015ce:	079a      	lsls	r2, r3, #30
 80015d0:	d49e      	bmi.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7fe fdd9 	bl	8000188 <HAL_GetTick>
 80015d6:	1b80      	subs	r0, r0, r6
 80015d8:	4540      	cmp	r0, r8
 80015da:	d9f7      	bls.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x114>
 80015dc:	e7dd      	b.n	800159a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80015de:	bf00      	nop
 80015e0:	08003130 	.word	0x08003130
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42420440 	.word	0x42420440

080015f0 <HAL_TIM_Base_MspInit>:
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_TIM_Base_Start_IT+0x44>)
{
 80015f8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80015fa:	4293      	cmp	r3, r2
{
 80015fc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80015fe:	d00f      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x2c>
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d00c      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x2c>
 8001606:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800160a:	4293      	cmp	r3, r2
 800160c:	d008      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x2c>
 800160e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x2c>
 8001616:	f240 1161 	movw	r1, #353	; 0x161
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <HAL_TIM_Base_Start_IT+0x48>)
 800161c:	f001 fa23 	bl	8002a66 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001620:	6823      	ldr	r3, [r4, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001622:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bd10      	pop	{r4, pc}
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00
 800163c:	0800316b 	.word	0x0800316b

08001640 <HAL_TIM_OC_DelayElapsedCallback>:
 8001640:	4770      	bx	lr

08001642 <HAL_TIM_IC_CaptureCallback>:
 8001642:	4770      	bx	lr

08001644 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001644:	4770      	bx	lr

08001646 <HAL_TIM_TriggerCallback>:
 8001646:	4770      	bx	lr

08001648 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001648:	6803      	ldr	r3, [r0, #0]
{
 800164a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800164c:	691a      	ldr	r2, [r3, #16]
{
 800164e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001650:	0791      	lsls	r1, r2, #30
 8001652:	d50e      	bpl.n	8001672 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	0792      	lsls	r2, r2, #30
 8001658:	d50b      	bpl.n	8001672 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800165a:	f06f 0202 	mvn.w	r2, #2
 800165e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001660:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001662:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001664:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001666:	079b      	lsls	r3, r3, #30
 8001668:	d077      	beq.n	800175a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800166a:	f7ff ffea 	bl	8001642 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	2300      	movs	r3, #0
 8001670:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	0750      	lsls	r0, r2, #29
 8001678:	d510      	bpl.n	800169c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	0751      	lsls	r1, r2, #29
 800167e:	d50d      	bpl.n	800169c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001680:	f06f 0204 	mvn.w	r2, #4
 8001684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001686:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001688:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800168a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800168c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001690:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001692:	d068      	beq.n	8001766 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001694:	f7ff ffd5 	bl	8001642 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001698:	2300      	movs	r3, #0
 800169a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	0712      	lsls	r2, r2, #28
 80016a2:	d50f      	bpl.n	80016c4 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	0710      	lsls	r0, r2, #28
 80016a8:	d50c      	bpl.n	80016c4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016aa:	f06f 0208 	mvn.w	r2, #8
 80016ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016b0:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016b2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016b4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016b6:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80016b8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016ba:	d05a      	beq.n	8001772 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80016bc:	f7ff ffc1 	bl	8001642 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c0:	2300      	movs	r3, #0
 80016c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	06d2      	lsls	r2, r2, #27
 80016ca:	d510      	bpl.n	80016ee <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	06d0      	lsls	r0, r2, #27
 80016d0:	d50d      	bpl.n	80016ee <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016d2:	f06f 0210 	mvn.w	r2, #16
 80016d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d8:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016dc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016de:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016e4:	d04b      	beq.n	800177e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80016e6:	f7ff ffac 	bl	8001642 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	2300      	movs	r3, #0
 80016ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	07d1      	lsls	r1, r2, #31
 80016f4:	d508      	bpl.n	8001708 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	d505      	bpl.n	8001708 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016fc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001700:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001702:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001704:	f001 f9a4 	bl	8002a50 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	0610      	lsls	r0, r2, #24
 800170e:	d508      	bpl.n	8001722 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	0611      	lsls	r1, r2, #24
 8001714:	d505      	bpl.n	8001722 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001716:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800171a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800171c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800171e:	f000 f8c2 	bl	80018a6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	0652      	lsls	r2, r2, #25
 8001728:	d508      	bpl.n	800173c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	0650      	lsls	r0, r2, #25
 800172e:	d505      	bpl.n	800173c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001730:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001734:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001736:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001738:	f7ff ff85 	bl	8001646 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	0691      	lsls	r1, r2, #26
 8001742:	d522      	bpl.n	800178a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	0692      	lsls	r2, r2, #26
 8001748:	d51f      	bpl.n	800178a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800174e:	4620      	mov	r0, r4
    }
  }
}
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001754:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001756:	f000 b8a5 	b.w	80018a4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800175a:	f7ff ff71 	bl	8001640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ff70 	bl	8001644 <HAL_TIM_PWM_PulseFinishedCallback>
 8001764:	e783      	b.n	800166e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	f7ff ff6b 	bl	8001640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff ff6a 	bl	8001644 <HAL_TIM_PWM_PulseFinishedCallback>
 8001770:	e792      	b.n	8001698 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001772:	f7ff ff65 	bl	8001640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff ff64 	bl	8001644 <HAL_TIM_PWM_PulseFinishedCallback>
 800177c:	e7a0      	b.n	80016c0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177e:	f7ff ff5f 	bl	8001640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff ff5e 	bl	8001644 <HAL_TIM_PWM_PulseFinishedCallback>
 8001788:	e7af      	b.n	80016ea <HAL_TIM_IRQHandler+0xa2>
 800178a:	bd10      	pop	{r4, pc}

0800178c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800178e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001790:	4290      	cmp	r0, r2
 8001792:	d00a      	beq.n	80017aa <TIM_Base_SetConfig+0x1e>
 8001794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0x1e>
 800179a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800179e:	4290      	cmp	r0, r2
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0x1e>
 80017a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a6:	4290      	cmp	r0, r2
 80017a8:	d115      	bne.n	80017d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017b0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <TIM_Base_SetConfig+0x6c>)
 80017b4:	4290      	cmp	r0, r2
 80017b6:	d00a      	beq.n	80017ce <TIM_Base_SetConfig+0x42>
 80017b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017bc:	d007      	beq.n	80017ce <TIM_Base_SetConfig+0x42>
 80017be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017c2:	4290      	cmp	r0, r2
 80017c4:	d003      	beq.n	80017ce <TIM_Base_SetConfig+0x42>
 80017c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ca:	4290      	cmp	r0, r2
 80017cc:	d103      	bne.n	80017d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017d6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80017d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017dc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017de:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e0:	688b      	ldr	r3, [r1, #8]
 80017e2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017e4:	680b      	ldr	r3, [r1, #0]
 80017e6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <TIM_Base_SetConfig+0x6c>)
 80017ea:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ec:	bf04      	itt	eq
 80017ee:	690b      	ldreq	r3, [r1, #16]
 80017f0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80017f2:	2301      	movs	r3, #1
 80017f4:	6143      	str	r3, [r0, #20]
 80017f6:	4770      	bx	lr
 80017f8:	40012c00 	.word	0x40012c00

080017fc <HAL_TIM_Base_Init>:
{
 80017fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	2800      	cmp	r0, #0
 8001802:	d049      	beq.n	8001898 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001804:	6803      	ldr	r3, [r0, #0]
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_TIM_Base_Init+0xa0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_TIM_Base_Init+0x2e>
 800180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001810:	d00b      	beq.n	800182a <HAL_TIM_Base_Init+0x2e>
 8001812:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_TIM_Base_Init+0x2e>
 800181a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181e:	4293      	cmp	r3, r2
 8001820:	d003      	beq.n	800182a <HAL_TIM_Base_Init+0x2e>
 8001822:	21d9      	movs	r1, #217	; 0xd9
 8001824:	481e      	ldr	r0, [pc, #120]	; (80018a0 <HAL_TIM_Base_Init+0xa4>)
 8001826:	f001 f91e 	bl	8002a66 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800182a:	68a3      	ldr	r3, [r4, #8]
 800182c:	f033 0210 	bics.w	r2, r3, #16
 8001830:	d009      	beq.n	8001846 <HAL_TIM_Base_Init+0x4a>
 8001832:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001836:	2a20      	cmp	r2, #32
 8001838:	d005      	beq.n	8001846 <HAL_TIM_Base_Init+0x4a>
 800183a:	2b40      	cmp	r3, #64	; 0x40
 800183c:	d003      	beq.n	8001846 <HAL_TIM_Base_Init+0x4a>
 800183e:	21da      	movs	r1, #218	; 0xda
 8001840:	4817      	ldr	r0, [pc, #92]	; (80018a0 <HAL_TIM_Base_Init+0xa4>)
 8001842:	f001 f910 	bl	8002a66 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001846:	6923      	ldr	r3, [r4, #16]
 8001848:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800184c:	d006      	beq.n	800185c <HAL_TIM_Base_Init+0x60>
 800184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001852:	d003      	beq.n	800185c <HAL_TIM_Base_Init+0x60>
 8001854:	21db      	movs	r1, #219	; 0xdb
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <HAL_TIM_Base_Init+0xa4>)
 8001858:	f001 f905 	bl	8002a66 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800185c:	69a3      	ldr	r3, [r4, #24]
 800185e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8001862:	d003      	beq.n	800186c <HAL_TIM_Base_Init+0x70>
 8001864:	21dc      	movs	r1, #220	; 0xdc
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <HAL_TIM_Base_Init+0xa4>)
 8001868:	f001 f8fd 	bl	8002a66 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800186c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001870:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001874:	b923      	cbnz	r3, 8001880 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8001876:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff feb8 	bl	80015f0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001880:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001882:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001884:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	1d21      	adds	r1, r4, #4
 800188a:	f7ff ff7f 	bl	800178c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800188e:	2301      	movs	r3, #1
  return HAL_OK;
 8001890:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001896:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
}
 800189a:	bd10      	pop	{r4, pc}
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	0800316b 	.word	0x0800316b

080018a4 <HAL_TIMEx_CommutationCallback>:
 80018a4:	4770      	bx	lr

080018a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018a6:	4770      	bx	lr

080018a8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80018a8:	b084      	sub	sp, #16
 80018aa:	a801      	add	r0, sp, #4
 80018ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80018b0:	b004      	add	sp, #16
 80018b2:	2000      	movs	r0, #0
 80018b4:	4770      	bx	lr

080018b6 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80018b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80018c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80018c4:	2000      	movs	r0, #0
 80018c6:	4770      	bx	lr

080018c8 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80018c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018cc:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80018d0:	045b      	lsls	r3, r3, #17
 80018d2:	0c5b      	lsrs	r3, r3, #17
 80018d4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80018d8:	2000      	movs	r0, #0
 80018da:	4770      	bx	lr

080018dc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80018e0:	b084      	sub	sp, #16
 80018e2:	b510      	push	{r4, lr}
 80018e4:	ac03      	add	r4, sp, #12
 80018e6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 80018ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80018ee:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80018f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80018fa:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80018fe:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001902:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001906:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001908:	b29b      	uxth	r3, r3
 800190a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800190e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001912:	4610      	mov	r0, r2
 8001914:	4770      	bx	lr
	...

08001918 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001918:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 800191a:	78cb      	ldrb	r3, [r1, #3]
 800191c:	780a      	ldrb	r2, [r1, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d80f      	bhi.n	8001942 <USB_ActivateEndpoint+0x2a>
 8001922:	e8df f003 	tbb	[pc, r3]
 8001926:	6402      	.short	0x6402
 8001928:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800192a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800192e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800193e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001942:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001946:	780c      	ldrb	r4, [r1, #0]
 8001948:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800194c:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001950:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001954:	401a      	ands	r2, r3
 8001956:	432a      	orrs	r2, r5
 8001958:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800195c:	7a8a      	ldrb	r2, [r1, #10]
 800195e:	780d      	ldrb	r5, [r1, #0]
 8001960:	2a00      	cmp	r2, #0
 8001962:	f040 8097 	bne.w	8001a94 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001966:	784c      	ldrb	r4, [r1, #1]
 8001968:	888a      	ldrh	r2, [r1, #4]
 800196a:	2c00      	cmp	r4, #0
 800196c:	d04a      	beq.n	8001a04 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800196e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001972:	0852      	lsrs	r2, r2, #1
 8001974:	b2a4      	uxth	r4, r4
 8001976:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800197a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001984:	780c      	ldrb	r4, [r1, #0]
 8001986:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800198a:	0652      	lsls	r2, r2, #25
 800198c:	d508      	bpl.n	80019a0 <USB_ActivateEndpoint+0x88>
 800198e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001992:	4013      	ands	r3, r2
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800199c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80019a0:	780a      	ldrb	r2, [r1, #0]
 80019a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019ae:	041b      	lsls	r3, r3, #16
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80019c2:	2000      	movs	r0, #0
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80019c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80019ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	e7b2      	b.n	800193e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80019d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019dc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80019ec:	e7a7      	b.n	800193e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80019ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	e79c      	b.n	800193e <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001a04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a08:	0852      	lsrs	r2, r2, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001a12:	0052      	lsls	r2, r2, #1
 8001a14:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001a18:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001a1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a20:	690d      	ldr	r5, [r1, #16]
 8001a22:	b292      	uxth	r2, r2
 8001a24:	780b      	ldrb	r3, [r1, #0]
 8001a26:	3206      	adds	r2, #6
 8001a28:	2d3e      	cmp	r5, #62	; 0x3e
 8001a2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a2e:	d929      	bls.n	8001a84 <USB_ActivateEndpoint+0x16c>
 8001a30:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001a34:	06eb      	lsls	r3, r5, #27
 8001a36:	bf04      	itt	eq
 8001a38:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001a3c:	b29e      	uxtheq	r6, r3
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <USB_ActivateEndpoint+0x2e0>)
 8001a40:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a4a:	780a      	ldrb	r2, [r1, #0]
 8001a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a50:	045e      	lsls	r6, r3, #17
 8001a52:	d50b      	bpl.n	8001a6c <USB_ActivateEndpoint+0x154>
 8001a54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5c:	051b      	lsls	r3, r3, #20
 8001a5e:	0d1b      	lsrs	r3, r3, #20
 8001a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a6c:	780a      	ldrb	r2, [r1, #0]
 8001a6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a82:	e798      	b.n	80019b6 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001a84:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001a88:	07ed      	lsls	r5, r5, #31
 8001a8a:	bf44      	itt	mi
 8001a8c:	3301      	addmi	r3, #1
 8001a8e:	b29b      	uxthmi	r3, r3
 8001a90:	029b      	lsls	r3, r3, #10
 8001a92:	e7d7      	b.n	8001a44 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001a94:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001a98:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001a9c:	0512      	lsls	r2, r2, #20
 8001a9e:	0d12      	lsrs	r2, r2, #20
 8001aa0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa8:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001aac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ab0:	780c      	ldrb	r4, [r1, #0]
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001ab8:	88cc      	ldrh	r4, [r1, #6]
 8001aba:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001abe:	0864      	lsrs	r4, r4, #1
 8001ac0:	0064      	lsls	r4, r4, #1
 8001ac2:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001ac6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001aca:	780c      	ldrb	r4, [r1, #0]
 8001acc:	b292      	uxth	r2, r2
 8001ace:	3204      	adds	r2, #4
 8001ad0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001ad4:	890c      	ldrh	r4, [r1, #8]
 8001ad6:	0864      	lsrs	r4, r4, #1
 8001ad8:	0064      	lsls	r4, r4, #1
 8001ada:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001ade:	784a      	ldrb	r2, [r1, #1]
 8001ae0:	780c      	ldrb	r4, [r1, #0]
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d147      	bne.n	8001b76 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ae6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001aea:	0455      	lsls	r5, r2, #17
 8001aec:	d508      	bpl.n	8001b00 <USB_ActivateEndpoint+0x1e8>
 8001aee:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001af2:	4013      	ands	r3, r2
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b00:	780a      	ldrb	r2, [r1, #0]
 8001b02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b06:	065c      	lsls	r4, r3, #25
 8001b08:	d50b      	bpl.n	8001b22 <USB_ActivateEndpoint+0x20a>
 8001b0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b12:	051b      	lsls	r3, r3, #20
 8001b14:	0d1b      	lsrs	r3, r3, #20
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001b22:	780a      	ldrb	r2, [r1, #0]
 8001b24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	0d1b      	lsrs	r3, r3, #20
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b3c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b40:	780c      	ldrb	r4, [r1, #0]
 8001b42:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b5c:	7809      	ldrb	r1, [r1, #0]
 8001b5e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001b74:	e725      	b.n	80019c2 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b76:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b7a:	0452      	lsls	r2, r2, #17
 8001b7c:	d508      	bpl.n	8001b90 <USB_ActivateEndpoint+0x278>
 8001b7e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b82:	4013      	ands	r3, r2
 8001b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b90:	780a      	ldrb	r2, [r1, #0]
 8001b92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b96:	065b      	lsls	r3, r3, #25
 8001b98:	d50b      	bpl.n	8001bb2 <USB_ActivateEndpoint+0x29a>
 8001b9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba2:	051b      	lsls	r3, r3, #20
 8001ba4:	0d1b      	lsrs	r3, r3, #20
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001bb2:	780a      	ldrb	r2, [r1, #0]
 8001bb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bbc:	051b      	lsls	r3, r3, #20
 8001bbe:	0d1b      	lsrs	r3, r3, #20
 8001bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001bcc:	f248 0280 	movw	r2, #32896	; 0x8080
 8001bd0:	780c      	ldrb	r4, [r1, #0]
 8001bd2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001be8:	7809      	ldrb	r1, [r1, #0]
 8001bea:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf6:	e7b8      	b.n	8001b6a <USB_ActivateEndpoint+0x252>
 8001bf8:	ffff8000 	.word	0xffff8000

08001bfc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001bfc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001bfe:	7a8c      	ldrb	r4, [r1, #10]
 8001c00:	784a      	ldrb	r2, [r1, #1]
 8001c02:	780b      	ldrb	r3, [r1, #0]
 8001c04:	bbcc      	cbnz	r4, 8001c7a <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001c06:	b302      	cbz	r2, 8001c4a <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c08:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c0c:	0652      	lsls	r2, r2, #25
 8001c0e:	d50b      	bpl.n	8001c28 <USB_DeactivateEndpoint+0x2c>
 8001c10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c18:	0512      	lsls	r2, r2, #20
 8001c1a:	0d12      	lsrs	r2, r2, #20
 8001c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c20:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001c24:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001c28:	780a      	ldrb	r2, [r1, #0]
 8001c2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001c46:	2000      	movs	r0, #0
 8001c48:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c4e:	0454      	lsls	r4, r2, #17
 8001c50:	d50b      	bpl.n	8001c6a <USB_DeactivateEndpoint+0x6e>
 8001c52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c5a:	0512      	lsls	r2, r2, #20
 8001c5c:	0d12      	lsrs	r2, r2, #20
 8001c5e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c66:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c6a:	780a      	ldrb	r2, [r1, #0]
 8001c6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c78:	e7dd      	b.n	8001c36 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d148      	bne.n	8001d10 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c82:	0452      	lsls	r2, r2, #17
 8001c84:	d50b      	bpl.n	8001c9e <USB_DeactivateEndpoint+0xa2>
 8001c86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c8e:	0512      	lsls	r2, r2, #20
 8001c90:	0d12      	lsrs	r2, r2, #20
 8001c92:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c9e:	780a      	ldrb	r2, [r1, #0]
 8001ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ca4:	065c      	lsls	r4, r3, #25
 8001ca6:	d50b      	bpl.n	8001cc0 <USB_DeactivateEndpoint+0xc4>
 8001ca8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb0:	051b      	lsls	r3, r3, #20
 8001cb2:	0d1b      	lsrs	r3, r3, #20
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001cc0:	780a      	ldrb	r2, [r1, #0]
 8001cc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cca:	051b      	lsls	r3, r3, #20
 8001ccc:	0d1b      	lsrs	r3, r3, #20
 8001cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cda:	f248 0280 	movw	r2, #32896	; 0x8080
 8001cde:	780c      	ldrb	r4, [r1, #0]
 8001ce0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001cf6:	7809      	ldrb	r1, [r1, #0]
 8001cf8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001d0e:	e79a      	b.n	8001c46 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d14:	0452      	lsls	r2, r2, #17
 8001d16:	d50b      	bpl.n	8001d30 <USB_DeactivateEndpoint+0x134>
 8001d18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d20:	0512      	lsls	r2, r2, #20
 8001d22:	0d12      	lsrs	r2, r2, #20
 8001d24:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d30:	780a      	ldrb	r2, [r1, #0]
 8001d32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d36:	065b      	lsls	r3, r3, #25
 8001d38:	d50b      	bpl.n	8001d52 <USB_DeactivateEndpoint+0x156>
 8001d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d42:	051b      	lsls	r3, r3, #20
 8001d44:	0d1b      	lsrs	r3, r3, #20
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001d52:	780a      	ldrb	r2, [r1, #0]
 8001d54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d5c:	051b      	lsls	r3, r3, #20
 8001d5e:	0d1b      	lsrs	r3, r3, #20
 8001d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d6c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001d70:	780c      	ldrb	r4, [r1, #0]
 8001d72:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d88:	7809      	ldrb	r1, [r1, #0]
 8001d8a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	e7b5      	b.n	8001d04 <USB_DeactivateEndpoint+0x108>

08001d98 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001d98:	780a      	ldrb	r2, [r1, #0]
 8001d9a:	b98a      	cbnz	r2, 8001dc0 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001d9c:	8803      	ldrh	r3, [r0, #0]
 8001d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dae:	f083 0310 	eor.w	r3, r3, #16
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dba:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	4770      	bx	lr
    if (ep->is_in)
 8001dc0:	784b      	ldrb	r3, [r1, #1]
 8001dc2:	b183      	cbz	r3, 8001de6 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001dc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	0c1b      	lsrs	r3, r3, #16
 8001dd4:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001de4:	e7ea      	b.n	8001dbc <USB_EPSetStall+0x24>
 8001de6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dfa:	e7ed      	b.n	8001dd8 <USB_EPSetStall+0x40>

08001dfc <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001dfc:	784b      	ldrb	r3, [r1, #1]
 8001dfe:	780a      	ldrb	r2, [r1, #0]
 8001e00:	b313      	cbz	r3, 8001e48 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e06:	065b      	lsls	r3, r3, #25
 8001e08:	d50b      	bpl.n	8001e22 <USB_EPClearStall+0x26>
 8001e0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	0d1b      	lsrs	r3, r3, #20
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001e22:	780a      	ldrb	r2, [r1, #0]
 8001e24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001e44:	2000      	movs	r0, #0
 8001e46:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e4c:	045b      	lsls	r3, r3, #17
 8001e4e:	d50b      	bpl.n	8001e68 <USB_EPClearStall+0x6c>
 8001e50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e58:	051b      	lsls	r3, r3, #20
 8001e5a:	0d1b      	lsrs	r3, r3, #20
 8001e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e68:	780a      	ldrb	r2, [r1, #0]
 8001e6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e7e:	e7db      	b.n	8001e38 <USB_EPClearStall+0x3c>

08001e80 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001e80:	b911      	cbnz	r1, 8001e88 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001e88:	2000      	movs	r0, #0
 8001e8a:	4770      	bx	lr

08001e8c <USB_DevConnect>:
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	4770      	bx	lr

08001e90 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e90:	2000      	movs	r0, #0
 8001e92:	4770      	bx	lr

08001e94 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001e94:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001e98:	b280      	uxth	r0, r0
 8001e9a:	4770      	bx	lr

08001e9c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	4770      	bx	lr

08001ea0 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001ea0:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001ea2:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001ea4:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001ea6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001eaa:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001eac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001eb0:	42a3      	cmp	r3, r4
 8001eb2:	d100      	bne.n	8001eb6 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001eba:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001ebe:	3401      	adds	r4, #1
 8001ec0:	e7f6      	b.n	8001eb0 <USB_WritePMA+0x10>
	...

08001ec4 <USB_EPStartXfer>:
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001ec8:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001eca:	7849      	ldrb	r1, [r1, #1]
{
 8001ecc:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001ece:	2901      	cmp	r1, #1
 8001ed0:	6933      	ldr	r3, [r6, #16]
 8001ed2:	7ab0      	ldrb	r0, [r6, #10]
 8001ed4:	d166      	bne.n	8001fa4 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001eda:	bf9b      	ittet	ls
 8001edc:	2300      	movls	r3, #0
 8001ede:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001ee0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001ee2:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001ee4:	bf88      	it	hi
 8001ee6:	61b2      	strhi	r2, [r6, #24]
 8001ee8:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001eea:	bb10      	cbnz	r0, 8001f32 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001eec:	88b2      	ldrh	r2, [r6, #4]
 8001eee:	6971      	ldr	r1, [r6, #20]
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f7ff ffd5 	bl	8001ea0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001ef6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001efa:	7832      	ldrb	r2, [r6, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3302      	adds	r3, #2
 8001f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f04:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f08:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001f0c:	7832      	ldrb	r2, [r6, #0]
 8001f0e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001f2e:	2000      	movs	r0, #0
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f32:	7832      	ldrb	r2, [r6, #0]
 8001f34:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001f38:	00d2      	lsls	r2, r2, #3
 8001f3a:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f3e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001f42:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f44:	d01a      	beq.n	8001f7c <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f46:	3102      	adds	r1, #2
 8001f48:	440a      	add	r2, r1
 8001f4a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f4e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001f52:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001f54:	6971      	ldr	r1, [r6, #20]
 8001f56:	4628      	mov	r0, r5
 8001f58:	f7ff ffa2 	bl	8001ea0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001f5c:	7873      	ldrb	r3, [r6, #1]
 8001f5e:	7832      	ldrb	r2, [r6, #0]
 8001f60:	b99b      	cbnz	r3, 8001f8a <USB_EPStartXfer+0xc6>
 8001f62:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f6a:	051b      	lsls	r3, r3, #20
 8001f6c:	0d1b      	lsrs	r3, r3, #20
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f76:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001f7a:	e7c7      	b.n	8001f0c <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001f7c:	440a      	add	r2, r1
 8001f7e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f82:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001f86:	88f2      	ldrh	r2, [r6, #6]
 8001f88:	e7e4      	b.n	8001f54 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d1be      	bne.n	8001f0c <USB_EPStartXfer+0x48>
 8001f8e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f96:	051b      	lsls	r3, r3, #20
 8001f98:	0d1b      	lsrs	r3, r3, #20
 8001f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa2:	e7e8      	b.n	8001f76 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001fa4:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001fa6:	bf93      	iteet	ls
 8001fa8:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001faa:	1ad2      	subhi	r2, r2, r3
 8001fac:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001fae:	61b3      	strls	r3, [r6, #24]
 8001fb0:	bf98      	it	ls
 8001fb2:	4613      	movls	r3, r2
 8001fb4:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001fb6:	bb70      	cbnz	r0, 8002016 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001fb8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8001fbe:	b289      	uxth	r1, r1
 8001fc0:	f101 0106 	add.w	r1, r1, #6
 8001fc4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001fc8:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001fcc:	d918      	bls.n	8002000 <USB_EPStartXfer+0x13c>
 8001fce:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001fd2:	06db      	lsls	r3, r3, #27
 8001fd4:	bf04      	itt	eq
 8001fd6:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001fda:	b29a      	uxtheq	r2, r3
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <USB_EPStartXfer+0x1fc>)
 8001fde:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fe8:	7832      	ldrb	r2, [r6, #0]
 8001fea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ffe:	e790      	b.n	8001f22 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002000:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002004:	07dc      	lsls	r4, r3, #31
 8002006:	bf44      	itt	mi
 8002008:	3201      	addmi	r2, #1
 800200a:	b292      	uxthmi	r2, r2
 800200c:	0292      	lsls	r2, r2, #10
 800200e:	b292      	uxth	r2, r2
 8002010:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002014:	e7e8      	b.n	8001fe8 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002016:	b9b9      	cbnz	r1, 8002048 <USB_EPStartXfer+0x184>
 8002018:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800201c:	2b3e      	cmp	r3, #62	; 0x3e
 800201e:	b289      	uxth	r1, r1
 8002020:	f101 0102 	add.w	r1, r1, #2
 8002024:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002028:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 800202c:	d928      	bls.n	8002080 <USB_EPStartXfer+0x1bc>
 800202e:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002032:	06da      	lsls	r2, r3, #27
 8002034:	bf04      	itt	eq
 8002036:	f100 32ff 	addeq.w	r2, r0, #4294967295
 800203a:	b290      	uxtheq	r0, r2
 800203c:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <USB_EPStartXfer+0x1fc>)
 800203e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002042:	b292      	uxth	r2, r2
 8002044:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002048:	7872      	ldrb	r2, [r6, #1]
 800204a:	7831      	ldrb	r1, [r6, #0]
 800204c:	bb5a      	cbnz	r2, 80020a6 <USB_EPStartXfer+0x1e2>
 800204e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002052:	2b3e      	cmp	r3, #62	; 0x3e
 8002054:	b292      	uxth	r2, r2
 8002056:	f102 0206 	add.w	r2, r2, #6
 800205a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800205e:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002062:	d915      	bls.n	8002090 <USB_EPStartXfer+0x1cc>
 8002064:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002068:	06dc      	lsls	r4, r3, #27
 800206a:	bf04      	itt	eq
 800206c:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002070:	b299      	uxtheq	r1, r3
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <USB_EPStartXfer+0x1fc>)
 8002074:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002078:	b29b      	uxth	r3, r3
 800207a:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 800207e:	e7b3      	b.n	8001fe8 <USB_EPStartXfer+0x124>
 8002080:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002084:	07d8      	lsls	r0, r3, #31
 8002086:	bf44      	itt	mi
 8002088:	3201      	addmi	r2, #1
 800208a:	b292      	uxthmi	r2, r2
 800208c:	0292      	lsls	r2, r2, #10
 800208e:	e7d8      	b.n	8002042 <USB_EPStartXfer+0x17e>
 8002090:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002094:	07db      	lsls	r3, r3, #31
 8002096:	bf44      	itt	mi
 8002098:	3101      	addmi	r1, #1
 800209a:	b289      	uxthmi	r1, r1
 800209c:	0289      	lsls	r1, r1, #10
 800209e:	b289      	uxth	r1, r1
 80020a0:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80020a4:	e7a0      	b.n	8001fe8 <USB_EPStartXfer+0x124>
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d19e      	bne.n	8001fe8 <USB_EPStartXfer+0x124>
 80020aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80020ae:	b292      	uxth	r2, r2
 80020b0:	3202      	adds	r2, #2
 80020b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80020b6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80020ba:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80020be:	e793      	b.n	8001fe8 <USB_EPStartXfer+0x124>
 80020c0:	ffff8000 	.word	0xffff8000

080020c4 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80020c4:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80020c6:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80020c8:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80020ca:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80020ce:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80020d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80020d4:	42a3      	cmp	r3, r4
 80020d6:	d100      	bne.n	80020da <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80020d8:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80020da:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80020de:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 80020e2:	3401      	adds	r4, #1
 80020e4:	e7f6      	b.n	80020d4 <USB_ReadPMA+0x10>

080020e6 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80020e6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80020ea:	b11b      	cbz	r3, 80020f4 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80020ec:	2000      	movs	r0, #0
 80020ee:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80020f2:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80020f4:	2002      	movs	r0, #2
  }
}
 80020f6:	4770      	bx	lr

080020f8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80020f8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80020fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80020fe:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002102:	b15b      	cbz	r3, 800211c <USBD_CDC_EP0_RxReady+0x24>
 8002104:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002108:	28ff      	cmp	r0, #255	; 0xff
 800210a:	d007      	beq.n	800211c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002112:	4621      	mov	r1, r4
 8002114:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002116:	23ff      	movs	r3, #255	; 0xff
 8002118:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800211c:	2000      	movs	r0, #0
 800211e:	bd10      	pop	{r4, pc}

08002120 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002120:	2343      	movs	r3, #67	; 0x43
 8002122:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002124:	4800      	ldr	r0, [pc, #0]	; (8002128 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002126:	4770      	bx	lr
 8002128:	2000003c 	.word	0x2000003c

0800212c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800212c:	2343      	movs	r3, #67	; 0x43
 800212e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002130:	4800      	ldr	r0, [pc, #0]	; (8002134 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002132:	4770      	bx	lr
 8002134:	20000080 	.word	0x20000080

08002138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002138:	2343      	movs	r3, #67	; 0x43
 800213a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800213c:	4800      	ldr	r0, [pc, #0]	; (8002140 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800213e:	4770      	bx	lr
 8002140:	200000d0 	.word	0x200000d0

08002144 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002144:	230a      	movs	r3, #10
 8002146:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002148:	4800      	ldr	r0, [pc, #0]	; (800214c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800214a:	4770      	bx	lr
 800214c:	200000c4 	.word	0x200000c4

08002150 <USBD_CDC_DataOut>:
{      
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002154:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002158:	f000 fe8e 	bl	8002e78 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800215c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002160:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002164:	b14b      	cbz	r3, 800217a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002166:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800216a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002174:	4798      	blx	r3
    return USBD_OK;
 8002176:	2000      	movs	r0, #0
 8002178:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800217a:	2002      	movs	r0, #2
}
 800217c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002180 <USBD_CDC_Setup>:
{
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002182:	780f      	ldrb	r7, [r1, #0]
{
 8002184:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002186:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800218a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800218c:	d023      	beq.n	80021d6 <USBD_CDC_Setup+0x56>
 800218e:	2b20      	cmp	r3, #32
 8002190:	d119      	bne.n	80021c6 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002192:	88ca      	ldrh	r2, [r1, #6]
 8002194:	784b      	ldrb	r3, [r1, #1]
 8002196:	b1c2      	cbz	r2, 80021ca <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002198:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800219a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800219e:	d50b      	bpl.n	80021b8 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80021a0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80021a4:	4618      	mov	r0, r3
 80021a6:	688f      	ldr	r7, [r1, #8]
 80021a8:	4629      	mov	r1, r5
 80021aa:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80021ac:	4629      	mov	r1, r5
 80021ae:	4630      	mov	r0, r6
 80021b0:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80021b2:	f000 fb72 	bl	800289a <USBD_CtlSendData>
      break;
 80021b6:	e006      	b.n	80021c6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80021b8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80021bc:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80021c0:	4629      	mov	r1, r5
 80021c2:	f000 fb7f 	bl	80028c4 <USBD_CtlPrepareRx>
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80021ca:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80021ce:	6884      	ldr	r4, [r0, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	47a0      	blx	r4
 80021d4:	e7f7      	b.n	80021c6 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80021d6:	784b      	ldrb	r3, [r1, #1]
 80021d8:	2b0a      	cmp	r3, #10
 80021da:	d1f4      	bne.n	80021c6 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80021dc:	2201      	movs	r2, #1
 80021de:	4901      	ldr	r1, [pc, #4]	; (80021e4 <USBD_CDC_Setup+0x64>)
 80021e0:	e7e7      	b.n	80021b2 <USBD_CDC_Setup+0x32>
 80021e2:	bf00      	nop
 80021e4:	20000194 	.word	0x20000194

080021e8 <USBD_CDC_DeInit>:
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80021ec:	2181      	movs	r1, #129	; 0x81
 80021ee:	f000 fddf 	bl	8002db0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80021f2:	2101      	movs	r1, #1
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 fddb 	bl	8002db0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80021fa:	2182      	movs	r1, #130	; 0x82
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 fdd7 	bl	8002db0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002202:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002206:	b153      	cbz	r3, 800221e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002208:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002210:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002214:	f000 fe3a 	bl	8002e8c <USBD_static_free>
    pdev->pClassData = NULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd10      	pop	{r4, pc}

08002222 <USBD_CDC_Init>:
{
 8002222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002224:	7c03      	ldrb	r3, [r0, #16]
{
 8002226:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002228:	bb7b      	cbnz	r3, 800228a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800222a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222e:	2202      	movs	r2, #2
 8002230:	2181      	movs	r1, #129	; 0x81
 8002232:	f000 fdad 	bl	8002d90 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002236:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800223a:	2202      	movs	r2, #2
 800223c:	2101      	movs	r1, #1
 800223e:	4620      	mov	r0, r4
 8002240:	f000 fda6 	bl	8002d90 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002244:	2308      	movs	r3, #8
 8002246:	2203      	movs	r2, #3
 8002248:	2182      	movs	r1, #130	; 0x82
 800224a:	4620      	mov	r0, r4
 800224c:	f000 fda0 	bl	8002d90 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002254:	f000 fe16 	bl	8002e84 <USBD_static_malloc>
 8002258:	4606      	mov	r6, r0
 800225a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800225e:	b320      	cbz	r0, 80022aa <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002260:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002262:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800226a:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800226c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002270:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002274:	b987      	cbnz	r7, 8002298 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800227e:	2101      	movs	r1, #1
 8002280:	4620      	mov	r0, r4
 8002282:	f000 fdeb 	bl	8002e5c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002286:	4638      	mov	r0, r7
 8002288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800228a:	2340      	movs	r3, #64	; 0x40
 800228c:	2202      	movs	r2, #2
 800228e:	2181      	movs	r1, #129	; 0x81
 8002290:	f000 fd7e 	bl	8002d90 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002294:	2340      	movs	r3, #64	; 0x40
 8002296:	e7d0      	b.n	800223a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002298:	2340      	movs	r3, #64	; 0x40
 800229a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800229e:	2101      	movs	r1, #1
 80022a0:	4620      	mov	r0, r4
 80022a2:	f000 fddb 	bl	8002e5c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80022a6:	4628      	mov	r0, r5
 80022a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80022aa:	2001      	movs	r0, #1
}
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022ae <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80022ae:	b119      	cbz	r1, 80022b8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80022b0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80022b4:	2000      	movs	r0, #0
 80022b6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80022b8:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80022ba:	4770      	bx	lr

080022bc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80022bc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80022c0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80022c2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80022c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80022ca:	4770      	bx	lr

080022cc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80022cc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80022d0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80022d2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80022d6:	4770      	bx	lr

080022d8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80022d8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80022dc:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80022de:	b162      	cbz	r2, 80022fa <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80022e0:	7c04      	ldrb	r4, [r0, #16]
 80022e2:	b944      	cbnz	r4, 80022f6 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80022e4:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80022e8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80022ec:	2101      	movs	r1, #1
 80022ee:	f000 fdb5 	bl	8002e5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80022f2:	2000      	movs	r0, #0
 80022f4:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	e7f6      	b.n	80022e8 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80022fa:	2002      	movs	r0, #2
  }
}
 80022fc:	bd10      	pop	{r4, pc}

080022fe <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80022fe:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002300:	b180      	cbz	r0, 8002324 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002302:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002306:	b113      	cbz	r3, 800230e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800230e:	b109      	cbz	r1, 8002314 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002310:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002314:	2301      	movs	r3, #1
  pdev->id = id;
 8002316:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002318:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800231c:	f000 fcea 	bl	8002cf4 <USBD_LL_Init>
  
  return USBD_OK; 
 8002320:	2000      	movs	r0, #0
 8002322:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002324:	2002      	movs	r0, #2
}
 8002326:	bd08      	pop	{r3, pc}

08002328 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002328:	b119      	cbz	r1, 8002332 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800232a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800232e:	2000      	movs	r0, #0
 8002330:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002332:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002334:	4770      	bx	lr

08002336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002336:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002338:	f000 fd1c 	bl	8002d74 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800233c:	2000      	movs	r0, #0
 800233e:	bd08      	pop	{r3, pc}

08002340 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002340:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002342:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002346:	b90b      	cbnz	r3, 800234c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002348:	2002      	movs	r0, #2
 800234a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4798      	blx	r3
 8002350:	2800      	cmp	r0, #0
 8002352:	d1f9      	bne.n	8002348 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002354:	bd08      	pop	{r3, pc}

08002356 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002356:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002358:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4798      	blx	r3
  return USBD_OK;
}
 8002360:	2000      	movs	r0, #0
 8002362:	bd08      	pop	{r3, pc}

08002364 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002364:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002366:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 800236a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800236c:	4628      	mov	r0, r5
 800236e:	f000 fa64 	bl	800283a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002372:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002374:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002378:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800237c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002380:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002384:	f001 031f 	and.w	r3, r1, #31
 8002388:	2b01      	cmp	r3, #1
 800238a:	d00e      	beq.n	80023aa <USBD_LL_SetupStage+0x46>
 800238c:	d307      	bcc.n	800239e <USBD_LL_SetupStage+0x3a>
 800238e:	2b02      	cmp	r3, #2
 8002390:	d010      	beq.n	80023b4 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002392:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002396:	4620      	mov	r0, r4
 8002398:	f000 fd18 	bl	8002dcc <USBD_LL_StallEP>
    break;
 800239c:	e003      	b.n	80023a6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800239e:	4629      	mov	r1, r5
 80023a0:	4620      	mov	r0, r4
 80023a2:	f000 f8d5 	bl	8002550 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80023a6:	2000      	movs	r0, #0
 80023a8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80023aa:	4629      	mov	r1, r5
 80023ac:	4620      	mov	r0, r4
 80023ae:	f000 f9c9 	bl	8002744 <USBD_StdItfReq>
    break;
 80023b2:	e7f8      	b.n	80023a6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80023b4:	4629      	mov	r1, r5
 80023b6:	4620      	mov	r0, r4
 80023b8:	f000 f9dc 	bl	8002774 <USBD_StdEPReq>
    break;
 80023bc:	e7f3      	b.n	80023a6 <USBD_LL_SetupStage+0x42>

080023be <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80023be:	b538      	push	{r3, r4, r5, lr}
 80023c0:	4604      	mov	r4, r0
 80023c2:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80023c4:	bb11      	cbnz	r1, 800240c <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80023c6:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d10f      	bne.n	80023ee <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80023ce:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80023d2:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d90b      	bls.n	80023f2 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80023da:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf28      	it	cs
 80023e0:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80023e2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80023e6:	b292      	uxth	r2, r2
 80023e8:	4629      	mov	r1, r5
 80023ea:	f000 fa7a 	bl	80028e2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023ee:	2000      	movs	r0, #0
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80023f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	b123      	cbz	r3, 8002404 <USBD_LL_DataOutStage+0x46>
 80023fa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80023fe:	2a03      	cmp	r2, #3
 8002400:	d100      	bne.n	8002404 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002402:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002404:	4620      	mov	r0, r4
 8002406:	f000 fa74 	bl	80028f2 <USBD_CtlSendStatus>
 800240a:	e7f0      	b.n	80023ee <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800240c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0eb      	beq.n	80023ee <USBD_LL_DataOutStage+0x30>
 8002416:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800241a:	2a03      	cmp	r2, #3
 800241c:	d1e7      	bne.n	80023ee <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800241e:	4798      	blx	r3
 8002420:	e7e5      	b.n	80023ee <USBD_LL_DataOutStage+0x30>

08002422 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002422:	b570      	push	{r4, r5, r6, lr}
 8002424:	4613      	mov	r3, r2
 8002426:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002428:	460e      	mov	r6, r1
 800242a:	2900      	cmp	r1, #0
 800242c:	d13d      	bne.n	80024aa <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800242e:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002432:	2a02      	cmp	r2, #2
 8002434:	d10f      	bne.n	8002456 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002436:	69c5      	ldr	r5, [r0, #28]
 8002438:	6a02      	ldr	r2, [r0, #32]
 800243a:	4295      	cmp	r5, r2
 800243c:	d914      	bls.n	8002468 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800243e:	1aaa      	subs	r2, r5, r2
 8002440:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002442:	4619      	mov	r1, r3
 8002444:	b292      	uxth	r2, r2
 8002446:	f000 fa35 	bl	80028b4 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800244a:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800244c:	461a      	mov	r2, r3
 800244e:	4619      	mov	r1, r3
 8002450:	4620      	mov	r0, r4
 8002452:	f000 fd03 	bl	8002e5c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002456:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002464:	2000      	movs	r0, #0
 8002466:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002468:	6983      	ldr	r3, [r0, #24]
 800246a:	fbb3 f5f2 	udiv	r5, r3, r2
 800246e:	fb02 3515 	mls	r5, r2, r5, r3
 8002472:	b965      	cbnz	r5, 800248e <USBD_LL_DataInStage+0x6c>
 8002474:	429a      	cmp	r2, r3
 8002476:	d80a      	bhi.n	800248e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002478:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800247c:	4293      	cmp	r3, r2
 800247e:	d206      	bcs.n	800248e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002480:	462a      	mov	r2, r5
 8002482:	f000 fa17 	bl	80028b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002486:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800248a:	462b      	mov	r3, r5
 800248c:	e7de      	b.n	800244c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800248e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	b12b      	cbz	r3, 80024a2 <USBD_LL_DataInStage+0x80>
 8002496:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800249a:	2a03      	cmp	r2, #3
 800249c:	d101      	bne.n	80024a2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800249e:	4620      	mov	r0, r4
 80024a0:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80024a2:	4620      	mov	r0, r4
 80024a4:	f000 fa30 	bl	8002908 <USBD_CtlReceiveStatus>
 80024a8:	e7d5      	b.n	8002456 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80024aa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0d7      	beq.n	8002464 <USBD_LL_DataInStage+0x42>
 80024b4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024b8:	2a03      	cmp	r2, #3
 80024ba:	d1d3      	bne.n	8002464 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80024bc:	4798      	blx	r3
 80024be:	e7d1      	b.n	8002464 <USBD_LL_DataInStage+0x42>

080024c0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80024c0:	2200      	movs	r2, #0
{
 80024c2:	b538      	push	{r3, r4, r5, lr}
 80024c4:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80024c6:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80024c8:	4611      	mov	r1, r2
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	f000 fc60 	bl	8002d90 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80024d0:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80024d2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80024d6:	2200      	movs	r2, #0
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	4620      	mov	r0, r4
 80024dc:	f000 fc58 	bl	8002d90 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80024e6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80024ea:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80024ec:	b12b      	cbz	r3, 80024fa <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80024ee:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80024f2:	7921      	ldrb	r1, [r4, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4620      	mov	r0, r4
 80024f8:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80024fa:	2000      	movs	r0, #0
 80024fc:	bd38      	pop	{r3, r4, r5, pc}

080024fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80024fe:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002500:	2000      	movs	r0, #0
 8002502:	4770      	bx	lr

08002504 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002504:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002508:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800250c:	2304      	movs	r3, #4
 800250e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002512:	2000      	movs	r0, #0
 8002514:	4770      	bx	lr

08002516 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002516:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800251a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800251e:	2000      	movs	r0, #0
 8002520:	4770      	bx	lr

08002522 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002522:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002524:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002528:	2a03      	cmp	r2, #3
 800252a:	d104      	bne.n	8002536 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800252c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	b103      	cbz	r3, 8002536 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002534:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002536:	2000      	movs	r0, #0
 8002538:	bd08      	pop	{r3, pc}

0800253a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800253a:	b510      	push	{r4, lr}
 800253c:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	f000 fc44 	bl	8002dcc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002544:	4620      	mov	r0, r4
}
 8002546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800254a:	2100      	movs	r1, #0
 800254c:	f000 bc3e 	b.w	8002dcc <USBD_LL_StallEP>

08002550 <USBD_StdDevReq>:
{
 8002550:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002552:	784b      	ldrb	r3, [r1, #1]
{
 8002554:	4604      	mov	r4, r0
 8002556:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002558:	2b09      	cmp	r3, #9
 800255a:	d879      	bhi.n	8002650 <USBD_StdDevReq+0x100>
 800255c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002560:	00e500c9 	.word	0x00e500c9
 8002564:	00d90078 	.word	0x00d90078
 8002568:	006d0078 	.word	0x006d0078
 800256c:	0078000a 	.word	0x0078000a
 8002570:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002574:	884b      	ldrh	r3, [r1, #2]
 8002576:	0a1a      	lsrs	r2, r3, #8
 8002578:	3a01      	subs	r2, #1
 800257a:	2a06      	cmp	r2, #6
 800257c:	d868      	bhi.n	8002650 <USBD_StdDevReq+0x100>
 800257e:	e8df f002 	tbb	[pc, r2]
 8002582:	1c04      	.short	0x1c04
 8002584:	49676729 	.word	0x49676729
 8002588:	52          	.byte	0x52
 8002589:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800258a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800258e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002590:	f10d 0106 	add.w	r1, sp, #6
 8002594:	7c20      	ldrb	r0, [r4, #16]
 8002596:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002598:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800259c:	2a00      	cmp	r2, #0
 800259e:	d067      	beq.n	8002670 <USBD_StdDevReq+0x120>
 80025a0:	88eb      	ldrh	r3, [r5, #6]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d064      	beq.n	8002670 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80025a6:	429a      	cmp	r2, r3
 80025a8:	bf28      	it	cs
 80025aa:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80025ac:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80025ae:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80025b2:	4620      	mov	r0, r4
 80025b4:	f000 f971 	bl	800289a <USBD_CtlSendData>
 80025b8:	e05a      	b.n	8002670 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80025ba:	7c02      	ldrb	r2, [r0, #16]
 80025bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025c0:	b932      	cbnz	r2, 80025d0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80025c4:	f10d 0006 	add.w	r0, sp, #6
 80025c8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80025ca:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80025cc:	7043      	strb	r3, [r0, #1]
 80025ce:	e7e3      	b.n	8002598 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	e7f7      	b.n	80025c4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d83a      	bhi.n	8002650 <USBD_StdDevReq+0x100>
 80025da:	e8df f003 	tbb	[pc, r3]
 80025de:	0703      	.short	0x0703
 80025e0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80025e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	e7d1      	b.n	8002590 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80025ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	e7cd      	b.n	8002590 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80025f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	e7c9      	b.n	8002590 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80025fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	e7c5      	b.n	8002590 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002604:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	e7c1      	b.n	8002590 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800260c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	e7bd      	b.n	8002590 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002614:	7c03      	ldrb	r3, [r0, #16]
 8002616:	b9db      	cbnz	r3, 8002650 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002618:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800261c:	f10d 0006 	add.w	r0, sp, #6
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	4798      	blx	r3
 8002624:	e7b8      	b.n	8002598 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002626:	7c03      	ldrb	r3, [r0, #16]
 8002628:	b993      	cbnz	r3, 8002650 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800262a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800262e:	f10d 0006 	add.w	r0, sp, #6
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002636:	2307      	movs	r3, #7
 8002638:	e7c8      	b.n	80025cc <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800263a:	888b      	ldrh	r3, [r1, #4]
 800263c:	b943      	cbnz	r3, 8002650 <USBD_StdDevReq+0x100>
 800263e:	88cb      	ldrh	r3, [r1, #6]
 8002640:	b933      	cbnz	r3, 8002650 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002642:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002646:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002648:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800264a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800264e:	d103      	bne.n	8002658 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff ff72 	bl	800253a <USBD_CtlError.constprop.0>
    break;
 8002656:	e00b      	b.n	8002670 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002658:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800265c:	4629      	mov	r1, r5
 800265e:	f000 fbe1 	bl	8002e24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002662:	4620      	mov	r0, r4
 8002664:	f000 f945 	bl	80028f2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002668:	b12d      	cbz	r5, 8002676 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800266a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800266c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002670:	2000      	movs	r0, #0
 8002672:	b003      	add	sp, #12
 8002674:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002676:	2301      	movs	r3, #1
 8002678:	e7f8      	b.n	800266c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800267a:	7889      	ldrb	r1, [r1, #2]
 800267c:	4d30      	ldr	r5, [pc, #192]	; (8002740 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800267e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002680:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002682:	d8e5      	bhi.n	8002650 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002684:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002688:	2b02      	cmp	r3, #2
 800268a:	d00c      	beq.n	80026a6 <USBD_StdDevReq+0x156>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d1df      	bne.n	8002650 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002690:	b9b1      	cbnz	r1, 80026c0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002692:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002694:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002696:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800269a:	f7ff fe5c 	bl	8002356 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 f927 	bl	80028f2 <USBD_CtlSendStatus>
 80026a4:	e7e4      	b.n	8002670 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80026a6:	2900      	cmp	r1, #0
 80026a8:	d0f9      	beq.n	800269e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80026aa:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80026ac:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80026ae:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80026b0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fe43 	bl	8002340 <USBD_SetClassConfig>
 80026ba:	2802      	cmp	r0, #2
 80026bc:	d1ef      	bne.n	800269e <USBD_StdDevReq+0x14e>
 80026be:	e7c7      	b.n	8002650 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80026c0:	6841      	ldr	r1, [r0, #4]
 80026c2:	2901      	cmp	r1, #1
 80026c4:	d0eb      	beq.n	800269e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80026c6:	b2c9      	uxtb	r1, r1
 80026c8:	f7ff fe45 	bl	8002356 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80026cc:	7829      	ldrb	r1, [r5, #0]
 80026ce:	6061      	str	r1, [r4, #4]
 80026d0:	e7f0      	b.n	80026b4 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80026d2:	88ca      	ldrh	r2, [r1, #6]
 80026d4:	2a01      	cmp	r2, #1
 80026d6:	d1bb      	bne.n	8002650 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80026d8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d003      	beq.n	80026e8 <USBD_StdDevReq+0x198>
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d1b5      	bne.n	8002650 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80026e4:	1d01      	adds	r1, r0, #4
 80026e6:	e764      	b.n	80025b2 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80026e8:	4601      	mov	r1, r0
 80026ea:	2300      	movs	r3, #0
 80026ec:	f841 3f08 	str.w	r3, [r1, #8]!
 80026f0:	e75f      	b.n	80025b2 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80026f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026f6:	3b02      	subs	r3, #2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d8a9      	bhi.n	8002650 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80026fc:	2301      	movs	r3, #1
 80026fe:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002700:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002704:	b10b      	cbz	r3, 800270a <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002706:	2303      	movs	r3, #3
 8002708:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800270a:	2202      	movs	r2, #2
 800270c:	f104 010c 	add.w	r1, r4, #12
 8002710:	e74f      	b.n	80025b2 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002712:	884b      	ldrh	r3, [r1, #2]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d1ab      	bne.n	8002670 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002718:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800271c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002720:	4629      	mov	r1, r5
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4620      	mov	r0, r4
 8002726:	4798      	blx	r3
 8002728:	e7b9      	b.n	800269e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800272a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800272e:	3b02      	subs	r3, #2
 8002730:	2b01      	cmp	r3, #1
 8002732:	d88d      	bhi.n	8002650 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002734:	884b      	ldrh	r3, [r1, #2]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d19a      	bne.n	8002670 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800273a:	2300      	movs	r3, #0
 800273c:	e7ec      	b.n	8002718 <USBD_StdDevReq+0x1c8>
 800273e:	bf00      	nop
 8002740:	20000195 	.word	0x20000195

08002744 <USBD_StdItfReq>:
{
 8002744:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002746:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800274a:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 800274c:	2b03      	cmp	r3, #3
{
 800274e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002750:	d10d      	bne.n	800276e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002752:	790b      	ldrb	r3, [r1, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d80a      	bhi.n	800276e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002758:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002760:	88eb      	ldrh	r3, [r5, #6]
 8002762:	b913      	cbnz	r3, 800276a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002764:	4620      	mov	r0, r4
 8002766:	f000 f8c4 	bl	80028f2 <USBD_CtlSendStatus>
}
 800276a:	2000      	movs	r0, #0
 800276c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800276e:	f7ff fee4 	bl	800253a <USBD_CtlError.constprop.0>
    break;
 8002772:	e7fa      	b.n	800276a <USBD_StdItfReq+0x26>

08002774 <USBD_StdEPReq>:
{
 8002774:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002776:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002778:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800277a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800277e:	2a20      	cmp	r2, #32
{
 8002780:	4604      	mov	r4, r0
 8002782:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002784:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002786:	d105      	bne.n	8002794 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002788:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4798      	blx	r3
}
 8002790:	2000      	movs	r0, #0
 8002792:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002794:	784a      	ldrb	r2, [r1, #1]
 8002796:	2a01      	cmp	r2, #1
 8002798:	d01c      	beq.n	80027d4 <USBD_StdEPReq+0x60>
 800279a:	d32a      	bcc.n	80027f2 <USBD_StdEPReq+0x7e>
 800279c:	2a03      	cmp	r2, #3
 800279e:	d1f7      	bne.n	8002790 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80027a0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80027a4:	2a02      	cmp	r2, #2
 80027a6:	d040      	beq.n	800282a <USBD_StdEPReq+0xb6>
 80027a8:	2a03      	cmp	r2, #3
 80027aa:	d002      	beq.n	80027b2 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80027ac:	f7ff fec5 	bl	800253a <USBD_CtlError.constprop.0>
      break;
 80027b0:	e7ee      	b.n	8002790 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80027b2:	884a      	ldrh	r2, [r1, #2]
 80027b4:	b922      	cbnz	r2, 80027c0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80027b6:	065e      	lsls	r6, r3, #25
 80027b8:	d002      	beq.n	80027c0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80027ba:	4619      	mov	r1, r3
 80027bc:	f000 fb06 	bl	8002dcc <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80027c0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027c4:	4629      	mov	r1, r5
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4620      	mov	r0, r4
 80027ca:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80027cc:	4620      	mov	r0, r4
 80027ce:	f000 f890 	bl	80028f2 <USBD_CtlSendStatus>
 80027d2:	e7dd      	b.n	8002790 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80027d4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80027d8:	2a02      	cmp	r2, #2
 80027da:	d026      	beq.n	800282a <USBD_StdEPReq+0xb6>
 80027dc:	2a03      	cmp	r2, #3
 80027de:	d1e5      	bne.n	80027ac <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80027e0:	884a      	ldrh	r2, [r1, #2]
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d1d4      	bne.n	8002790 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80027e6:	0659      	lsls	r1, r3, #25
 80027e8:	d0f0      	beq.n	80027cc <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80027ea:	4619      	mov	r1, r3
 80027ec:	f000 fafc 	bl	8002de8 <USBD_LL_ClearStallEP>
 80027f0:	e7e6      	b.n	80027c0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80027f2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80027f6:	2a02      	cmp	r2, #2
 80027f8:	d017      	beq.n	800282a <USBD_StdEPReq+0xb6>
 80027fa:	2a03      	cmp	r2, #3
 80027fc:	d1d6      	bne.n	80027ac <USBD_StdEPReq+0x38>
 80027fe:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002802:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002806:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800280a:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800280c:	bf14      	ite	ne
 800280e:	3514      	addne	r5, #20
 8002810:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002814:	f000 faf6 	bl	8002e04 <USBD_LL_IsStallEP>
 8002818:	b168      	cbz	r0, 8002836 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800281a:	2301      	movs	r3, #1
 800281c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800281e:	2202      	movs	r2, #2
 8002820:	4629      	mov	r1, r5
 8002822:	4620      	mov	r0, r4
 8002824:	f000 f839 	bl	800289a <USBD_CtlSendData>
      break;
 8002828:	e7b2      	b.n	8002790 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800282a:	065a      	lsls	r2, r3, #25
 800282c:	d0b0      	beq.n	8002790 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800282e:	4619      	mov	r1, r3
 8002830:	f000 facc 	bl	8002dcc <USBD_LL_StallEP>
 8002834:	e7ac      	b.n	8002790 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002836:	6028      	str	r0, [r5, #0]
 8002838:	e7f1      	b.n	800281e <USBD_StdEPReq+0xaa>

0800283a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800283a:	780b      	ldrb	r3, [r1, #0]
 800283c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800283e:	784b      	ldrb	r3, [r1, #1]
 8002840:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002842:	78ca      	ldrb	r2, [r1, #3]
 8002844:	788b      	ldrb	r3, [r1, #2]
 8002846:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800284a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800284c:	794a      	ldrb	r2, [r1, #5]
 800284e:	790b      	ldrb	r3, [r1, #4]
 8002850:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002854:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002856:	79ca      	ldrb	r2, [r1, #7]
 8002858:	798b      	ldrb	r3, [r1, #6]
 800285a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800285e:	80c3      	strh	r3, [r0, #6]
 8002860:	4770      	bx	lr

08002862 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002862:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002864:	b188      	cbz	r0, 800288a <USBD_GetString+0x28>
 8002866:	4605      	mov	r5, r0
 8002868:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800286a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2c00      	cmp	r4, #0
 8002872:	d1f9      	bne.n	8002868 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	3302      	adds	r3, #2
 8002878:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800287a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800287c:	2303      	movs	r3, #3
 800287e:	704b      	strb	r3, [r1, #1]
 8002880:	2302      	movs	r3, #2
 8002882:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002884:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002888:	b905      	cbnz	r5, 800288c <USBD_GetString+0x2a>
 800288a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	54cd      	strb	r5, [r1, r3]
 8002890:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002892:	3302      	adds	r3, #2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	548c      	strb	r4, [r1, r2]
 8002898:	e7f4      	b.n	8002884 <USBD_GetString+0x22>

0800289a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800289a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800289c:	2202      	movs	r2, #2
{
 800289e:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80028a0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80028a4:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80028a6:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80028a8:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80028aa:	2100      	movs	r1, #0
 80028ac:	f000 fac8 	bl	8002e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80028b0:	2000      	movs	r0, #0
 80028b2:	bd10      	pop	{r4, pc}

080028b4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80028b4:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80028b6:	4613      	mov	r3, r2
 80028b8:	460a      	mov	r2, r1
 80028ba:	2100      	movs	r1, #0
 80028bc:	f000 fac0 	bl	8002e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80028c0:	2000      	movs	r0, #0
 80028c2:	bd08      	pop	{r3, pc}

080028c4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80028c4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80028c6:	2203      	movs	r2, #3
{
 80028c8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80028ca:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80028ce:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80028d2:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80028d4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80028d8:	2100      	movs	r1, #0
 80028da:	f000 fabf 	bl	8002e5c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80028de:	2000      	movs	r0, #0
 80028e0:	bd10      	pop	{r4, pc}

080028e2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80028e2:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80028e4:	4613      	mov	r3, r2
 80028e6:	460a      	mov	r2, r1
 80028e8:	2100      	movs	r1, #0
 80028ea:	f000 fab7 	bl	8002e5c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd08      	pop	{r3, pc}

080028f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80028f2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80028f4:	2304      	movs	r3, #4
 80028f6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80028fa:	2300      	movs	r3, #0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	f000 fa9e 	bl	8002e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002904:	2000      	movs	r0, #0
 8002906:	bd08      	pop	{r3, pc}

08002908 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002908:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800290a:	2305      	movs	r3, #5
 800290c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002910:	2300      	movs	r3, #0
 8002912:	461a      	mov	r2, r3
 8002914:	4619      	mov	r1, r3
 8002916:	f000 faa1 	bl	8002e5c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800291a:	2000      	movs	r0, #0
 800291c:	bd08      	pop	{r3, pc}
	...

08002920 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	2210      	movs	r2, #16
{
 8002922:	b510      	push	{r4, lr}
 8002924:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002926:	eb0d 0002 	add.w	r0, sp, r2
 800292a:	2100      	movs	r1, #0
 800292c:	f000 fb72 	bl	8003014 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002932:	4c19      	ldr	r4, [pc, #100]	; (8002998 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002934:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002936:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002938:	f042 0210 	orr.w	r2, r2, #16
 800293c:	619a      	str	r2, [r3, #24]
 800293e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002944:	f002 0210 	and.w	r2, r2, #16
 8002948:	9201      	str	r2, [sp, #4]
 800294a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	619a      	str	r2, [r3, #24]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	f002 0220 	and.w	r2, r2, #32
 800295a:	9202      	str	r2, [sp, #8]
 800295c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	f042 0204 	orr.w	r2, r2, #4
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	9303      	str	r3, [sp, #12]
 8002970:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002972:	f7fd fe03 	bl	800057c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002980:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	a904      	add	r1, sp, #16
 8002984:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002986:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f7fd fc8b 	bl	80002a4 <HAL_GPIO_Init>

}
 800298e:	b008      	add	sp, #32
 8002990:	bd10      	pop	{r4, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40011000 	.word	0x40011000

0800299c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299c:	2228      	movs	r2, #40	; 0x28
{
 800299e:	b570      	push	{r4, r5, r6, lr}
 80029a0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a2:	eb0d 0002 	add.w	r0, sp, r2
 80029a6:	2100      	movs	r1, #0
 80029a8:	f000 fb34 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ac:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ae:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b0:	eb0d 0002 	add.w	r0, sp, r2
 80029b4:	2100      	movs	r1, #0
 80029b6:	f000 fb2d 	bl	8003014 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ba:	462a      	mov	r2, r5
 80029bc:	2100      	movs	r1, #0
 80029be:	a801      	add	r0, sp, #4
 80029c0:	f000 fb28 	bl	8003014 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029c8:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ca:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029cc:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ce:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029d6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029d8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029da:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029dc:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029de:	f7fe f9dd 	bl	8000d9c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029ec:	4621      	mov	r1, r4
 80029ee:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f2:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f6:	9606      	str	r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029f8:	f7fe fc0e 	bl	8001218 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a00:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a02:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a04:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a06:	f7fe fd57 	bl	80014b8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002a0a:	b014      	add	sp, #80	; 0x50
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a10 <main>:
{
 8002a10:	b508      	push	{r3, lr}
  HAL_Init();
 8002a12:	f7fd fb9b 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8002a16:	f7ff ffc1 	bl	800299c <SystemClock_Config>
  MX_GPIO_Init();
 8002a1a:	f7ff ff81 	bl	8002920 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002a1e:	f000 f8bd 	bl	8002b9c <MX_USB_DEVICE_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a22:	4c0a      	ldr	r4, [pc, #40]	; (8002a4c <main+0x3c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7fd fda6 	bl	800057c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8002a30:	200a      	movs	r0, #10
 8002a32:	f7fd fbaf 	bl	8000194 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002a36:	4620      	mov	r0, r4
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a3e:	f7fd fd9d 	bl	800057c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8002a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a46:	f7fd fba5 	bl	8000194 <HAL_Delay>
 8002a4a:	e7eb      	b.n	8002a24 <main+0x14>
 8002a4c:	40011000 	.word	0x40011000

08002a50 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a50:	6802      	ldr	r2, [r0, #0]
 8002a52:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d101      	bne.n	8002a5c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002a58:	f7fd bb8a 	b.w	8000170 <HAL_IncTick>
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00

08002a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a64:	4770      	bx	lr

08002a66 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8002a66:	4770      	bx	lr

08002a68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_MspInit+0x3c>)
{
 8002a6a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	619a      	str	r2, [r3, #24]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	f002 0201 	and.w	r2, r2, #1
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a84:	61da      	str	r2, [r3, #28]
 8002a86:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a92:	6853      	ldr	r3, [r2, #4]
 8002a94:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	b002      	add	sp, #8
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000

08002aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002aae:	4601      	mov	r1, r0
{
 8002ab0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2019      	movs	r0, #25
 8002ab6:	f7fd fb9d 	bl	80001f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002aba:	2019      	movs	r0, #25
 8002abc:	f7fd fbdc 	bl	8000278 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ac2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac4:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ac6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002acc:	619a      	str	r2, [r3, #24]
 8002ace:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ad0:	4c11      	ldr	r4, [pc, #68]	; (8002b18 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ada:	f7fe fcbd 	bl	8001458 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ade:	f7fe fcab 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_InitTick+0x70>)
 8002ae4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002ae6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002aea:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_InitTick+0x74>)
 8002aee:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002af2:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002af4:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002af6:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002af8:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002afa:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afc:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002afe:	f7fe fe7d 	bl	80017fc <HAL_TIM_Base_Init>
 8002b02:	b920      	cbnz	r0, 8002b0e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7fe fd75 	bl	80015f4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002b0a:	b008      	add	sp, #32
 8002b0c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e7fb      	b.n	8002b0a <HAL_InitTick+0x5e>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	200003bc 	.word	0x200003bc
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	000f4240 	.word	0x000f4240

08002b24 <NMI_Handler>:
 8002b24:	4770      	bx	lr

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	e7fe      	b.n	8002b26 <HardFault_Handler>

08002b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	e7fe      	b.n	8002b2a <BusFault_Handler>

08002b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler>

08002b2e <SVC_Handler>:
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:
 8002b30:	4770      	bx	lr

08002b32 <PendSV_Handler>:
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	4770      	bx	lr
	...

08002b38 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002b3a:	f7fd be53 	b.w	80007e4 <HAL_PCD_IRQHandler>
 8002b3e:	bf00      	nop
 8002b40:	20000df0 	.word	0x20000df0

08002b44 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <TIM1_UP_IRQHandler+0x8>)
 8002b46:	f7fe bd7f 	b.w	8001648 <HAL_TIM_IRQHandler>
 8002b4a:	bf00      	nop
 8002b4c:	200003bc 	.word	0x200003bc

08002b50 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <SystemInit+0x40>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <SystemInit+0x44>)
 8002b5e:	400a      	ands	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002b68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b74:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <SystemInit+0x48>)
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	f8ff0000 	.word	0xf8ff0000
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <MX_USB_DEVICE_Init+0x40>)
 8002ba2:	480f      	ldr	r0, [pc, #60]	; (8002be0 <MX_USB_DEVICE_Init+0x44>)
 8002ba4:	f7ff fbab 	bl	80022fe <USBD_Init>
 8002ba8:	b108      	cbz	r0, 8002bae <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002baa:	f7ff ff5b 	bl	8002a64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002bae:	490d      	ldr	r1, [pc, #52]	; (8002be4 <MX_USB_DEVICE_Init+0x48>)
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <MX_USB_DEVICE_Init+0x44>)
 8002bb2:	f7ff fbb9 	bl	8002328 <USBD_RegisterClass>
 8002bb6:	b108      	cbz	r0, 8002bbc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002bb8:	f7ff ff54 	bl	8002a64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002bbc:	490a      	ldr	r1, [pc, #40]	; (8002be8 <MX_USB_DEVICE_Init+0x4c>)
 8002bbe:	4808      	ldr	r0, [pc, #32]	; (8002be0 <MX_USB_DEVICE_Init+0x44>)
 8002bc0:	f7ff fb75 	bl	80022ae <USBD_CDC_RegisterInterface>
 8002bc4:	b108      	cbz	r0, 8002bca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002bc6:	f7ff ff4d 	bl	8002a64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_USB_DEVICE_Init+0x44>)
 8002bcc:	f7ff fbb3 	bl	8002336 <USBD_Start>
 8002bd0:	b118      	cbz	r0, 8002bda <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002bd6:	f7ff bf45 	b.w	8002a64 <Error_Handler>
 8002bda:	bd08      	pop	{r3, pc}
 8002bdc:	20000128 	.word	0x20000128
 8002be0:	200003fc 	.word	0x200003fc
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000118 	.word	0x20000118

08002bec <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002bec:	2000      	movs	r0, #0
 8002bee:	4770      	bx	lr

08002bf0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4770      	bx	lr

08002bf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002bf4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002bf6:	4c05      	ldr	r4, [pc, #20]	; (8002c0c <CDC_Receive_FS+0x18>)
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff fb66 	bl	80022cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff fb69 	bl	80022d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002c06:	2000      	movs	r0, #0
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200003fc 	.word	0x200003fc

08002c10 <CDC_Init_FS>:
{
 8002c10:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002c12:	4c06      	ldr	r4, [pc, #24]	; (8002c2c <CDC_Init_FS+0x1c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	4906      	ldr	r1, [pc, #24]	; (8002c30 <CDC_Init_FS+0x20>)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff fb4f 	bl	80022bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002c1e:	4905      	ldr	r1, [pc, #20]	; (8002c34 <CDC_Init_FS+0x24>)
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fb53 	bl	80022cc <USBD_CDC_SetRxBuffer>
}
 8002c26:	2000      	movs	r0, #0
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200003fc 	.word	0x200003fc
 8002c30:	20000a08 	.word	0x20000a08
 8002c34:	20000620 	.word	0x20000620

08002c38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002c38:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_PCD_MspInit+0x38>)
 8002c3c:	6802      	ldr	r2, [r0, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d112      	bne.n	8002c68 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c42:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002c46:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c48:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002c4a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c4e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002c52:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c54:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c5e:	f7fd fac9 	bl	80001f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002c62:	2014      	movs	r0, #20
 8002c64:	f7fd fb08 	bl	8000278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002c68:	b003      	add	sp, #12
 8002c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c6e:	bf00      	nop
 8002c70:	40005c00 	.word	0x40005c00

08002c74 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002c74:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002c78:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002c7c:	f7ff bb72 	b.w	8002364 <USBD_LL_SetupStage>

08002c80 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002c80:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002c84:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002c88:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002c8c:	f7ff bb97 	b.w	80023be <USBD_LL_DataOutStage>

08002c90 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002c90:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c96:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002c9a:	f7ff bbc2 	b.w	8002422 <USBD_LL_DataInStage>

08002c9e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002c9e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002ca2:	f7ff bc3e 	b.w	8002522 <USBD_LL_SOF>

08002ca6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002ca6:	6883      	ldr	r3, [r0, #8]
{ 
 8002ca8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002caa:	2b02      	cmp	r3, #2
{ 
 8002cac:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002cae:	d001      	beq.n	8002cb4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002cb0:	f7ff fed8 	bl	8002a64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002cb4:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8002cb8:	2101      	movs	r1, #1
 8002cba:	f7ff fc20 	bl	80024fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002cbe:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002cc6:	f7ff bbfb 	b.w	80024c0 <USBD_LL_Reset>
	...

08002ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002cd0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002cd4:	f7ff fc16 	bl	8002504 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002cd8:	69a3      	ldr	r3, [r4, #24]
 8002cda:	b123      	cbz	r3, 8002ce6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002cdc:	4a02      	ldr	r2, [pc, #8]	; (8002ce8 <HAL_PCD_SuspendCallback+0x1c>)
 8002cde:	6913      	ldr	r3, [r2, #16]
 8002ce0:	f043 0306 	orr.w	r3, r3, #6
 8002ce4:	6113      	str	r3, [r2, #16]
 8002ce6:	bd10      	pop	{r4, pc}
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002cec:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002cf0:	f7ff bc11 	b.w	8002516 <USBD_LL_Resume>

08002cf4 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	2208      	movs	r2, #8
{
 8002cf8:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002cfa:	491c      	ldr	r1, [pc, #112]	; (8002d6c <USBD_LL_Init+0x78>)
{
 8002cfc:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002cfe:	481c      	ldr	r0, [pc, #112]	; (8002d70 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002d00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d04:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002d06:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002d0a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d0e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002d10:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002d12:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002d14:	f7fd fc4c 	bl	80005b0 <HAL_PCD_Init>
 8002d18:	b108      	cbz	r0, 8002d1e <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002d1a:	f7ff fea3 	bl	8002a64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2318      	movs	r3, #24
 8002d22:	4611      	mov	r1, r2
 8002d24:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002d28:	f7fe f820 	bl	8000d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002d2c:	2358      	movs	r3, #88	; 0x58
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002d36:	f7fe f819 	bl	8000d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002d3a:	23c0      	movs	r3, #192	; 0xc0
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2181      	movs	r1, #129	; 0x81
 8002d40:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002d44:	f7fe f812 	bl	8000d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002d48:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2101      	movs	r1, #1
 8002d50:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002d54:	f7fe f80a 	bl	8000d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2182      	movs	r1, #130	; 0x82
 8002d60:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002d64:	f7fe f802 	bl	8000d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002d68:	2000      	movs	r0, #0
 8002d6a:	bd10      	pop	{r4, pc}
 8002d6c:	40005c00 	.word	0x40005c00
 8002d70:	20000df0 	.word	0x20000df0

08002d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002d74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002d76:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d7a:	f7fd fc8f 	bl	800069c <HAL_PCD_Start>
 8002d7e:	2803      	cmp	r0, #3
 8002d80:	bf9a      	itte	ls
 8002d82:	4b02      	ldrls	r3, [pc, #8]	; (8002d8c <USBD_LL_Start+0x18>)
 8002d84:	5c18      	ldrbls	r0, [r3, r0]
 8002d86:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002d88:	bd08      	pop	{r3, pc}
 8002d8a:	bf00      	nop
 8002d8c:	080031bb 	.word	0x080031bb

08002d90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002d94:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d98:	4613      	mov	r3, r2
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	f7fd fca9 	bl	80006f2 <HAL_PCD_EP_Open>
 8002da0:	2803      	cmp	r0, #3
 8002da2:	bf9a      	itte	ls
 8002da4:	4b01      	ldrls	r3, [pc, #4]	; (8002dac <USBD_LL_OpenEP+0x1c>)
 8002da6:	5c18      	ldrbls	r0, [r3, r0]
 8002da8:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002daa:	bd10      	pop	{r4, pc}
 8002dac:	080031bb 	.word	0x080031bb

08002db0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002db0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002db2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002db6:	f7fd fcbf 	bl	8000738 <HAL_PCD_EP_Close>
 8002dba:	2803      	cmp	r0, #3
 8002dbc:	bf9a      	itte	ls
 8002dbe:	4b02      	ldrls	r3, [pc, #8]	; (8002dc8 <USBD_LL_CloseEP+0x18>)
 8002dc0:	5c18      	ldrbls	r0, [r3, r0]
 8002dc2:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002dc4:	bd08      	pop	{r3, pc}
 8002dc6:	bf00      	nop
 8002dc8:	080031bb 	.word	0x080031bb

08002dcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002dcc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002dce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002dd2:	f7fd ff7f 	bl	8000cd4 <HAL_PCD_EP_SetStall>
 8002dd6:	2803      	cmp	r0, #3
 8002dd8:	bf9a      	itte	ls
 8002dda:	4b02      	ldrls	r3, [pc, #8]	; (8002de4 <USBD_LL_StallEP+0x18>)
 8002ddc:	5c18      	ldrbls	r0, [r3, r0]
 8002dde:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002de0:	bd08      	pop	{r3, pc}
 8002de2:	bf00      	nop
 8002de4:	080031bb 	.word	0x080031bb

08002de8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002de8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002dea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002dee:	f7fd ff9a 	bl	8000d26 <HAL_PCD_EP_ClrStall>
 8002df2:	2803      	cmp	r0, #3
 8002df4:	bf9a      	itte	ls
 8002df6:	4b02      	ldrls	r3, [pc, #8]	; (8002e00 <USBD_LL_ClearStallEP+0x18>)
 8002df8:	5c18      	ldrbls	r0, [r3, r0]
 8002dfa:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	080031bb 	.word	0x080031bb

08002e04 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002e04:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002e06:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002e0a:	bf45      	ittet	mi
 8002e0c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002e10:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002e14:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002e18:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002e1c:	bf58      	it	pl
 8002e1e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002e22:	4770      	bx	lr

08002e24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002e24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002e26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e2a:	f7fd fc4e 	bl	80006ca <HAL_PCD_SetAddress>
 8002e2e:	2803      	cmp	r0, #3
 8002e30:	bf9a      	itte	ls
 8002e32:	4b02      	ldrls	r3, [pc, #8]	; (8002e3c <USBD_LL_SetUSBAddress+0x18>)
 8002e34:	5c18      	ldrbls	r0, [r3, r0]
 8002e36:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002e38:	bd08      	pop	{r3, pc}
 8002e3a:	bf00      	nop
 8002e3c:	080031bb 	.word	0x080031bb

08002e40 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002e40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002e42:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e46:	f7fd fcb7 	bl	80007b8 <HAL_PCD_EP_Transmit>
 8002e4a:	2803      	cmp	r0, #3
 8002e4c:	bf9a      	itte	ls
 8002e4e:	4b02      	ldrls	r3, [pc, #8]	; (8002e58 <USBD_LL_Transmit+0x18>)
 8002e50:	5c18      	ldrbls	r0, [r3, r0]
 8002e52:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002e54:	bd08      	pop	{r3, pc}
 8002e56:	bf00      	nop
 8002e58:	080031bb 	.word	0x080031bb

08002e5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002e5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002e5e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e62:	f7fd fc8a 	bl	800077a <HAL_PCD_EP_Receive>
 8002e66:	2803      	cmp	r0, #3
 8002e68:	bf9a      	itte	ls
 8002e6a:	4b02      	ldrls	r3, [pc, #8]	; (8002e74 <USBD_LL_PrepareReceive+0x18>)
 8002e6c:	5c18      	ldrbls	r0, [r3, r0]
 8002e6e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002e70:	bd08      	pop	{r3, pc}
 8002e72:	bf00      	nop
 8002e74:	080031bb 	.word	0x080031bb

08002e78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002e78:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002e7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e7e:	f7fd fc94 	bl	80007aa <HAL_PCD_EP_GetRxCount>
}
 8002e82:	bd08      	pop	{r3, pc}

08002e84 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002e84:	4800      	ldr	r0, [pc, #0]	; (8002e88 <USBD_static_malloc+0x4>)
 8002e86:	4770      	bx	lr
 8002e88:	20000198 	.word	0x20000198

08002e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002e8c:	4770      	bx	lr

08002e8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002e8e:	4770      	bx	lr

08002e90 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002e90:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002e92:	4801      	ldr	r0, [pc, #4]	; (8002e98 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002e94:	800b      	strh	r3, [r1, #0]
}
 8002e96:	4770      	bx	lr
 8002e98:	20000144 	.word	0x20000144

08002e9c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002e9c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002e9e:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002ea0:	800b      	strh	r3, [r1, #0]
}
 8002ea2:	4770      	bx	lr
 8002ea4:	20000158 	.word	0x20000158

08002ea8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002ea8:	2300      	movs	r3, #0
{
 8002eaa:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002eac:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002eae:	b2dc      	uxtb	r4, r3
 8002eb0:	42a2      	cmp	r2, r4
 8002eb2:	d800      	bhi.n	8002eb6 <IntToUnicode+0xe>
  }
}
 8002eb4:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002eb6:	0f04      	lsrs	r4, r0, #28
 8002eb8:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002eba:	bf94      	ite	ls
 8002ebc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002ebe:	3437      	addhi	r4, #55	; 0x37
 8002ec0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002ec4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002ec8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002eca:	7065      	strb	r5, [r4, #1]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e7ee      	b.n	8002eae <IntToUnicode+0x6>

08002ed0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002ed0:	231a      	movs	r3, #26
{
 8002ed2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002ed4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <USBD_FS_SerialStrDescriptor+0x2c>)
 8002ed8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002eda:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002edc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002ede:	18c0      	adds	r0, r0, r3
 8002ee0:	d00a      	beq.n	8002ef8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002ee4:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002ee6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002ee8:	4906      	ldr	r1, [pc, #24]	; (8002f04 <USBD_FS_SerialStrDescriptor+0x34>)
 8002eea:	f7ff ffdd 	bl	8002ea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4905      	ldr	r1, [pc, #20]	; (8002f08 <USBD_FS_SerialStrDescriptor+0x38>)
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7ff ffd8 	bl	8002ea8 <IntToUnicode>
}
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <USBD_FS_SerialStrDescriptor+0x3c>)
 8002efa:	bd10      	pop	{r4, pc}
 8002efc:	1ffff7e8 	.word	0x1ffff7e8
 8002f00:	1ffff7ec 	.word	0x1ffff7ec
 8002f04:	2000015e 	.word	0x2000015e
 8002f08:	2000016e 	.word	0x2000016e
 8002f0c:	2000015c 	.word	0x2000015c

08002f10 <USBD_FS_ManufacturerStrDescriptor>:
{
 8002f10:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002f12:	4c04      	ldr	r4, [pc, #16]	; (8002f24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002f14:	460a      	mov	r2, r1
 8002f16:	4804      	ldr	r0, [pc, #16]	; (8002f28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002f18:	4621      	mov	r1, r4
 8002f1a:	f7ff fca2 	bl	8002862 <USBD_GetString>
}
 8002f1e:	4620      	mov	r0, r4
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	20001250 	.word	0x20001250
 8002f28:	080031d8 	.word	0x080031d8

08002f2c <USBD_FS_ProductStrDescriptor>:
{
 8002f2c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002f2e:	4c04      	ldr	r4, [pc, #16]	; (8002f40 <USBD_FS_ProductStrDescriptor+0x14>)
 8002f30:	460a      	mov	r2, r1
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <USBD_FS_ProductStrDescriptor+0x18>)
 8002f34:	4621      	mov	r1, r4
 8002f36:	f7ff fc94 	bl	8002862 <USBD_GetString>
}
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	20001250 	.word	0x20001250
 8002f44:	080031eb 	.word	0x080031eb

08002f48 <USBD_FS_ConfigStrDescriptor>:
{
 8002f48:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002f4a:	4c04      	ldr	r4, [pc, #16]	; (8002f5c <USBD_FS_ConfigStrDescriptor+0x14>)
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	4804      	ldr	r0, [pc, #16]	; (8002f60 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002f50:	4621      	mov	r1, r4
 8002f52:	f7ff fc86 	bl	8002862 <USBD_GetString>
}
 8002f56:	4620      	mov	r0, r4
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20001250 	.word	0x20001250
 8002f60:	080031bf 	.word	0x080031bf

08002f64 <USBD_FS_InterfaceStrDescriptor>:
{
 8002f64:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002f66:	4c04      	ldr	r4, [pc, #16]	; (8002f78 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002f68:	460a      	mov	r2, r1
 8002f6a:	4804      	ldr	r0, [pc, #16]	; (8002f7c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	f7ff fc78 	bl	8002862 <USBD_GetString>
}
 8002f72:	4620      	mov	r0, r4
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	bf00      	nop
 8002f78:	20001250 	.word	0x20001250
 8002f7c:	080031ca 	.word	0x080031ca

08002f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f82:	e003      	b.n	8002f8c <LoopCopyDataInit>

08002f84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f8a:	3104      	adds	r1, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f8c:	480a      	ldr	r0, [pc, #40]	; (8002fb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f94:	d3f6      	bcc.n	8002f84 <CopyDataInit>
  ldr r2, =_sbss
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f98:	e002      	b.n	8002fa0 <LoopFillZerobss>

08002f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f9c:	f842 3b04 	str.w	r3, [r2], #4

08002fa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fa4:	d3f9      	bcc.n	8002f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fa6:	f7ff fdd3 	bl	8002b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002faa:	f000 f80f 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fae:	f7ff fd2f 	bl	8002a10 <main>
  bx lr
 8002fb2:	4770      	bx	lr
  ldr r3, =_sidata
 8002fb4:	0800320c 	.word	0x0800320c
  ldr r0, =_sdata
 8002fb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fbc:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 8002fc0:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 8002fc4:	20001450 	.word	0x20001450

08002fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc8:	e7fe      	b.n	8002fc8 <ADC1_2_IRQHandler>
	...

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	2500      	movs	r5, #0
 8002fd0:	4e0c      	ldr	r6, [pc, #48]	; (8003004 <__libc_init_array+0x38>)
 8002fd2:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd4:	1ba4      	subs	r4, r4, r6
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	42a5      	cmp	r5, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	f000 f822 	bl	8003024 <_init>
 8002fe0:	2500      	movs	r5, #0
 8002fe2:	4e0a      	ldr	r6, [pc, #40]	; (800300c <__libc_init_array+0x40>)
 8002fe4:	4c0a      	ldr	r4, [pc, #40]	; (8003010 <__libc_init_array+0x44>)
 8002fe6:	1ba4      	subs	r4, r4, r6
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	42a5      	cmp	r5, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff4:	4798      	blx	r3
 8002ff6:	3501      	adds	r5, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffe:	4798      	blx	r3
 8003000:	3501      	adds	r5, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	08003204 	.word	0x08003204
 8003008:	08003204 	.word	0x08003204
 800300c:	08003204 	.word	0x08003204
 8003010:	08003208 	.word	0x08003208

08003014 <memset>:
 8003014:	4603      	mov	r3, r0
 8003016:	4402      	add	r2, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <_init>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr

08003030 <_fini>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr
