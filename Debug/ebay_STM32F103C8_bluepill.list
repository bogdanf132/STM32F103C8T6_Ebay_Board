
ebay_STM32F103C8_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  20000000  080042c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002bd4  2000017c  08004444  0002017c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002d50  08004444  00022d50  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a4ac  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000594d  00000000  00000000  0004a651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b351  00000000  00000000  0004ff9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011f0  00000000  00000000  0005b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001680  00000000  00000000  0005c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000be7c  00000000  00000000  0005db60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000060f7  00000000  00000000  000699dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006fad3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003238  00000000  00000000  0006fb50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004004 	.word	0x08004004

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	08004004 	.word	0x08004004

08000150 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
{
 8000152:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000156:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015e:	f000 f9d9 	bl	8000514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f003 fc96 	bl	8003a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fc6c 	bl	8003a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_IncTick+0x14>)
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20001c74 	.word	0x20001c74
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20001c74 	.word	0x20001c74

08000198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000198:	b538      	push	{r3, r4, r5, lr}
 800019a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800019c:	f7ff fff6 	bl	800018c <HAL_GetTick>
 80001a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a4:	bf1e      	ittt	ne
 80001a6:	4b04      	ldrne	r3, [pc, #16]	; (80001b8 <HAL_Delay+0x20>)
 80001a8:	781b      	ldrbne	r3, [r3, #0]
 80001aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001ac:	f7ff ffee 	bl	800018c <HAL_GetTick>
 80001b0:	1b40      	subs	r0, r0, r5
 80001b2:	4284      	cmp	r4, r0
 80001b4:	d8fa      	bhi.n	80001ac <HAL_Delay+0x14>
  {
  }
}
 80001b6:	bd38      	pop	{r3, r4, r5, pc}
 80001b8:	20000000 	.word	0x20000000

080001bc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001bc:	2300      	movs	r3, #0
{ 
 80001be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80001c0:	4a51      	ldr	r2, [pc, #324]	; (8000308 <HAL_ADC_ConfigChannel+0x14c>)
  __IO uint32_t wait_loop_index = 0U;
 80001c2:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80001c4:	6803      	ldr	r3, [r0, #0]
{ 
 80001c6:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80001c8:	4293      	cmp	r3, r2
{ 
 80001ca:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80001cc:	d008      	beq.n	80001e0 <HAL_ADC_ConfigChannel+0x24>
 80001ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d004      	beq.n	80001e0 <HAL_ADC_ConfigChannel+0x24>
 80001d6:	f240 61aa 	movw	r1, #1706	; 0x6aa
 80001da:	484c      	ldr	r0, [pc, #304]	; (800030c <HAL_ADC_ConfigChannel+0x150>)
 80001dc:	f003 fc31 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80001e0:	682b      	ldr	r3, [r5, #0]
 80001e2:	2b11      	cmp	r3, #17
 80001e4:	d904      	bls.n	80001f0 <HAL_ADC_ConfigChannel+0x34>
 80001e6:	f240 61ab 	movw	r1, #1707	; 0x6ab
 80001ea:	4848      	ldr	r0, [pc, #288]	; (800030c <HAL_ADC_ConfigChannel+0x150>)
 80001ec:	f003 fc29 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80001f0:	686b      	ldr	r3, [r5, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	d904      	bls.n	8000202 <HAL_ADC_ConfigChannel+0x46>
 80001f8:	f240 61ac 	movw	r1, #1708	; 0x6ac
 80001fc:	4843      	ldr	r0, [pc, #268]	; (800030c <HAL_ADC_ConfigChannel+0x150>)
 80001fe:	f003 fc20 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000202:	68ab      	ldr	r3, [r5, #8]
 8000204:	2b07      	cmp	r3, #7
 8000206:	d904      	bls.n	8000212 <HAL_ADC_ConfigChannel+0x56>
 8000208:	f240 61ad 	movw	r1, #1709	; 0x6ad
 800020c:	483f      	ldr	r0, [pc, #252]	; (800030c <HAL_ADC_ConfigChannel+0x150>)
 800020e:	f003 fc18 	bl	8003a42 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000212:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000216:	2b01      	cmp	r3, #1
 8000218:	d073      	beq.n	8000302 <HAL_ADC_ConfigChannel+0x146>
 800021a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800021c:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 800021e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000222:	2806      	cmp	r0, #6
 8000224:	6822      	ldr	r2, [r4, #0]
 8000226:	6829      	ldr	r1, [r5, #0]
 8000228:	ea4f 0380 	mov.w	r3, r0, lsl #2
 800022c:	d824      	bhi.n	8000278 <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800022e:	4403      	add	r3, r0
 8000230:	201f      	movs	r0, #31
 8000232:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000234:	3b05      	subs	r3, #5
 8000236:	4098      	lsls	r0, r3
 8000238:	ea26 0000 	bic.w	r0, r6, r0
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	4303      	orrs	r3, r0
 8000242:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000244:	2909      	cmp	r1, #9
 8000246:	68ad      	ldr	r5, [r5, #8]
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	d92e      	bls.n	80002ac <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800024e:	2607      	movs	r6, #7
 8000250:	440b      	add	r3, r1
 8000252:	68d0      	ldr	r0, [r2, #12]
 8000254:	3b1e      	subs	r3, #30
 8000256:	409e      	lsls	r6, r3
 8000258:	ea20 0006 	bic.w	r0, r0, r6
 800025c:	fa05 f303 	lsl.w	r3, r5, r3
 8000260:	4303      	orrs	r3, r0
 8000262:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000264:	f1a1 0310 	sub.w	r3, r1, #16
 8000268:	2b01      	cmp	r3, #1
 800026a:	d92a      	bls.n	80002c2 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800026c:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800026e:	2300      	movs	r3, #0
 8000270:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000274:	b002      	add	sp, #8
 8000276:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000278:	280c      	cmp	r0, #12
 800027a:	d80b      	bhi.n	8000294 <HAL_ADC_ConfigChannel+0xd8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800027c:	4403      	add	r3, r0
 800027e:	201f      	movs	r0, #31
 8000280:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000282:	3b23      	subs	r3, #35	; 0x23
 8000284:	4098      	lsls	r0, r3
 8000286:	ea26 0000 	bic.w	r0, r6, r0
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	4303      	orrs	r3, r0
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
 8000292:	e7d7      	b.n	8000244 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000294:	4403      	add	r3, r0
 8000296:	201f      	movs	r0, #31
 8000298:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800029a:	3b41      	subs	r3, #65	; 0x41
 800029c:	4098      	lsls	r0, r3
 800029e:	ea26 0000 	bic.w	r0, r6, r0
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	4303      	orrs	r3, r0
 80002a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002aa:	e7cb      	b.n	8000244 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002ac:	2607      	movs	r6, #7
 80002ae:	6910      	ldr	r0, [r2, #16]
 80002b0:	440b      	add	r3, r1
 80002b2:	409e      	lsls	r6, r3
 80002b4:	ea20 0006 	bic.w	r0, r0, r6
 80002b8:	fa05 f303 	lsl.w	r3, r5, r3
 80002bc:	4303      	orrs	r3, r0
 80002be:	6113      	str	r3, [r2, #16]
 80002c0:	e7d0      	b.n	8000264 <HAL_ADC_ConfigChannel+0xa8>
    if (hadc->Instance == ADC1)
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <HAL_ADC_ConfigChannel+0x14c>)
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d116      	bne.n	80002f6 <HAL_ADC_ConfigChannel+0x13a>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002c8:	6893      	ldr	r3, [r2, #8]
 80002ca:	021b      	lsls	r3, r3, #8
 80002cc:	d4ce      	bmi.n	800026c <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002ce:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002d0:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002d6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002d8:	d1c8      	bne.n	800026c <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <HAL_ADC_ConfigChannel+0x154>)
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <HAL_ADC_ConfigChannel+0x158>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80002e4:	230a      	movs	r3, #10
 80002e6:	4353      	muls	r3, r2
            wait_loop_index--;
 80002e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002ea:	9b01      	ldr	r3, [sp, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0bd      	beq.n	800026c <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 80002f0:	9b01      	ldr	r3, [sp, #4]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	e7f8      	b.n	80002e8 <HAL_ADC_ConfigChannel+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002f8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8000300:	e7b5      	b.n	800026e <HAL_ADC_ConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 8000302:	2002      	movs	r0, #2
 8000304:	e7b6      	b.n	8000274 <HAL_ADC_ConfigChannel+0xb8>
 8000306:	bf00      	nop
 8000308:	40012400 	.word	0x40012400
 800030c:	08004090 	.word	0x08004090
 8000310:	20000118 	.word	0x20000118
 8000314:	000f4240 	.word	0x000f4240

08000318 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000318:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800031a:	6803      	ldr	r3, [r0, #0]
{
 800031c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	d401      	bmi.n	8000328 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000324:	2000      	movs	r0, #0
 8000326:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	f022 0201 	bic.w	r2, r2, #1
 800032e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000330:	f7ff ff2c 	bl	800018c <HAL_GetTick>
 8000334:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000336:	6823      	ldr	r3, [r4, #0]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	07db      	lsls	r3, r3, #31
 800033c:	d5f2      	bpl.n	8000324 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800033e:	f7ff ff25 	bl	800018c <HAL_GetTick>
 8000342:	1b40      	subs	r0, r0, r5
 8000344:	2802      	cmp	r0, #2
 8000346:	d9f6      	bls.n	8000336 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800034c:	f043 0310 	orr.w	r3, r3, #16
 8000350:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	62e3      	str	r3, [r4, #44]	; 0x2c
 800035a:	bd38      	pop	{r3, r4, r5, pc}

0800035c <HAL_ADC_Init>:
{
 800035c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800035e:	4604      	mov	r4, r0
 8000360:	2800      	cmp	r0, #0
 8000362:	f000 80c9 	beq.w	80004f8 <HAL_ADC_Init+0x19c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000366:	6803      	ldr	r3, [r0, #0]
 8000368:	4a66      	ldr	r2, [pc, #408]	; (8000504 <HAL_ADC_Init+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d008      	beq.n	8000380 <HAL_ADC_Init+0x24>
 800036e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000372:	4293      	cmp	r3, r2
 8000374:	d004      	beq.n	8000380 <HAL_ADC_Init+0x24>
 8000376:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800037a:	4863      	ldr	r0, [pc, #396]	; (8000508 <HAL_ADC_Init+0x1ac>)
 800037c:	f003 fb61 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000380:	6863      	ldr	r3, [r4, #4]
 8000382:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8000386:	d004      	beq.n	8000392 <HAL_ADC_Init+0x36>
 8000388:	f240 1183 	movw	r1, #387	; 0x183
 800038c:	485e      	ldr	r0, [pc, #376]	; (8000508 <HAL_ADC_Init+0x1ac>)
 800038e:	f003 fb58 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000392:	68a3      	ldr	r3, [r4, #8]
 8000394:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8000398:	d004      	beq.n	80003a4 <HAL_ADC_Init+0x48>
 800039a:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800039e:	485a      	ldr	r0, [pc, #360]	; (8000508 <HAL_ADC_Init+0x1ac>)
 80003a0:	f003 fb4f 	bl	8003a42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80003a4:	68e3      	ldr	r3, [r4, #12]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d904      	bls.n	80003b4 <HAL_ADC_Init+0x58>
 80003aa:	f240 1185 	movw	r1, #389	; 0x185
 80003ae:	4856      	ldr	r0, [pc, #344]	; (8000508 <HAL_ADC_Init+0x1ac>)
 80003b0:	f003 fb47 	bl	8003a42 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80003b4:	69e3      	ldr	r3, [r4, #28]
 80003b6:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 80003ba:	d00c      	beq.n	80003d6 <HAL_ADC_Init+0x7a>
 80003bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80003c0:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 80003c4:	d007      	beq.n	80003d6 <HAL_ADC_Init+0x7a>
 80003c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80003ca:	d004      	beq.n	80003d6 <HAL_ADC_Init+0x7a>
 80003cc:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80003d0:	484d      	ldr	r0, [pc, #308]	; (8000508 <HAL_ADC_Init+0x1ac>)
 80003d2:	f003 fb36 	bl	8003a42 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80003d6:	68a3      	ldr	r3, [r4, #8]
 80003d8:	b1db      	cbz	r3, 8000412 <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80003da:	6923      	ldr	r3, [r4, #16]
 80003dc:	3b01      	subs	r3, #1
 80003de:	2b0f      	cmp	r3, #15
 80003e0:	d904      	bls.n	80003ec <HAL_ADC_Init+0x90>
 80003e2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80003e6:	4848      	ldr	r0, [pc, #288]	; (8000508 <HAL_ADC_Init+0x1ac>)
 80003e8:	f003 fb2b 	bl	8003a42 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80003ec:	6963      	ldr	r3, [r4, #20]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d904      	bls.n	80003fc <HAL_ADC_Init+0xa0>
 80003f2:	f240 118b 	movw	r1, #395	; 0x18b
 80003f6:	4844      	ldr	r0, [pc, #272]	; (8000508 <HAL_ADC_Init+0x1ac>)
 80003f8:	f003 fb23 	bl	8003a42 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80003fc:	6963      	ldr	r3, [r4, #20]
 80003fe:	b143      	cbz	r3, 8000412 <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000400:	69a3      	ldr	r3, [r4, #24]
 8000402:	3b01      	subs	r3, #1
 8000404:	2b07      	cmp	r3, #7
 8000406:	d904      	bls.n	8000412 <HAL_ADC_Init+0xb6>
 8000408:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800040c:	483e      	ldr	r0, [pc, #248]	; (8000508 <HAL_ADC_Init+0x1ac>)
 800040e:	f003 fb18 	bl	8003a42 <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000414:	b92b      	cbnz	r3, 8000422 <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 8000416:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000418:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800041c:	4620      	mov	r0, r4
 800041e:	f003 f9cd 	bl	80037bc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000422:	4620      	mov	r0, r4
 8000424:	f7ff ff78 	bl	8000318 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800042a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800042e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000430:	d164      	bne.n	80004fc <HAL_ADC_Init+0x1a0>
 8000432:	2800      	cmp	r0, #0
 8000434:	d162      	bne.n	80004fc <HAL_ADC_Init+0x1a0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000436:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800043c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000446:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000448:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800044a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800044c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800044e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000452:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000456:	d038      	beq.n	80004ca <HAL_ADC_Init+0x16e>
 8000458:	2901      	cmp	r1, #1
 800045a:	bf14      	ite	ne
 800045c:	4606      	movne	r6, r0
 800045e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000462:	6965      	ldr	r5, [r4, #20]
 8000464:	2d01      	cmp	r5, #1
 8000466:	d107      	bne.n	8000478 <HAL_ADC_Init+0x11c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000468:	2b00      	cmp	r3, #0
 800046a:	d130      	bne.n	80004ce <HAL_ADC_Init+0x172>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800046c:	69a3      	ldr	r3, [r4, #24]
 800046e:	3b01      	subs	r3, #1
 8000470:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000474:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000478:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800047a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800047e:	685d      	ldr	r5, [r3, #4]
 8000480:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000484:	ea45 0506 	orr.w	r5, r5, r6
 8000488:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800048a:	689e      	ldr	r6, [r3, #8]
 800048c:	4d1f      	ldr	r5, [pc, #124]	; (800050c <HAL_ADC_Init+0x1b0>)
 800048e:	ea05 0506 	and.w	r5, r5, r6
 8000492:	ea45 0502 	orr.w	r5, r5, r2
 8000496:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000498:	d001      	beq.n	800049e <HAL_ADC_Init+0x142>
 800049a:	2901      	cmp	r1, #1
 800049c:	d120      	bne.n	80004e0 <HAL_ADC_Init+0x184>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800049e:	6921      	ldr	r1, [r4, #16]
 80004a0:	3901      	subs	r1, #1
 80004a2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004a4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004a6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004aa:	4329      	orrs	r1, r5
 80004ac:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004ae:	6899      	ldr	r1, [r3, #8]
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <HAL_ADC_Init+0x1b4>)
 80004b2:	400b      	ands	r3, r1
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d115      	bne.n	80004e4 <HAL_ADC_Init+0x188>
      ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	2300      	movs	r3, #0
 80004ba:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80004bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004be:	f023 0303 	bic.w	r3, r3, #3
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004ca:	460e      	mov	r6, r1
 80004cc:	e7c9      	b.n	8000462 <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004d0:	f043 0320 	orr.w	r3, r3, #32
 80004d4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004de:	e7cb      	b.n	8000478 <HAL_ADC_Init+0x11c>
  uint32_t tmp_sqr1 = 0U;
 80004e0:	2100      	movs	r1, #0
 80004e2:	e7df      	b.n	80004a4 <HAL_ADC_Init+0x148>
      ADC_STATE_CLR_SET(hadc->State,
 80004e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004e6:	f023 0312 	bic.w	r3, r3, #18
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
}
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004fc:	f043 0310 	orr.w	r3, r3, #16
 8000500:	62a3      	str	r3, [r4, #40]	; 0x28
 8000502:	e7f9      	b.n	80004f8 <HAL_ADC_Init+0x19c>
 8000504:	40012400 	.word	0x40012400
 8000508:	08004090 	.word	0x08004090
 800050c:	ffe1f7fd 	.word	0xffe1f7fd
 8000510:	ff1f0efe 	.word	0xff1f0efe

08000514 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000514:	1ec3      	subs	r3, r0, #3
 8000516:	2b04      	cmp	r3, #4
{
 8000518:	b510      	push	{r4, lr}
 800051a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800051c:	d903      	bls.n	8000526 <HAL_NVIC_SetPriorityGrouping+0x12>
 800051e:	21a2      	movs	r1, #162	; 0xa2
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000522:	f003 fa8e 	bl	8003a42 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000528:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052a:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800052c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000534:	041b      	lsls	r3, r3, #16
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000540:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000542:	60d4      	str	r4, [r2, #12]
 8000544:	bd10      	pop	{r4, pc}
 8000546:	bf00      	nop
 8000548:	080040c8 	.word	0x080040c8
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000550:	2a0f      	cmp	r2, #15
{ 
 8000552:	b570      	push	{r4, r5, r6, lr}
 8000554:	4604      	mov	r4, r0
 8000556:	460e      	mov	r6, r1
 8000558:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800055a:	d903      	bls.n	8000564 <HAL_NVIC_SetPriority+0x14>
 800055c:	21ba      	movs	r1, #186	; 0xba
 800055e:	481a      	ldr	r0, [pc, #104]	; (80005c8 <HAL_NVIC_SetPriority+0x78>)
 8000560:	f003 fa6f 	bl	8003a42 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000564:	2e0f      	cmp	r6, #15
 8000566:	d903      	bls.n	8000570 <HAL_NVIC_SetPriority+0x20>
 8000568:	21bb      	movs	r1, #187	; 0xbb
 800056a:	4817      	ldr	r0, [pc, #92]	; (80005c8 <HAL_NVIC_SetPriority+0x78>)
 800056c:	f003 fa69 	bl	8003a42 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000572:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	68d9      	ldr	r1, [r3, #12]
 8000576:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057a:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057e:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	2b04      	cmp	r3, #4
 8000582:	bf28      	it	cs
 8000584:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	2a06      	cmp	r2, #6
 8000588:	bf94      	ite	ls
 800058a:	2100      	movls	r1, #0
 800058c:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058e:	fa00 f203 	lsl.w	r2, r0, r3
 8000592:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000594:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000596:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000598:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059a:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059c:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 800059e:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	ea42 0205 	orr.w	r2, r2, r5
 80005a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	bfaf      	iteee	ge
 80005aa:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	4b08      	ldrlt	r3, [pc, #32]	; (80005d0 <HAL_NVIC_SetPriority+0x80>)
 80005b0:	f004 040f 	andlt.w	r4, r4, #15
 80005b4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	bfa5      	ittet	ge
 80005b8:	b2d2      	uxtbge	r2, r2
 80005ba:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	080040c8 	.word	0x080040c8
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000ed14 	.word	0xe000ed14

080005d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80005d6:	1e04      	subs	r4, r0, #0
 80005d8:	da03      	bge.n	80005e2 <HAL_NVIC_EnableIRQ+0xe>
 80005da:	21ce      	movs	r1, #206	; 0xce
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <HAL_NVIC_EnableIRQ+0x24>)
 80005de:	f003 fa30 	bl	8003a42 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e2:	2301      	movs	r3, #1
 80005e4:	0962      	lsrs	r2, r4, #5
 80005e6:	f004 041f 	and.w	r4, r4, #31
 80005ea:	fa03 f404 	lsl.w	r4, r3, r4
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <HAL_NVIC_EnableIRQ+0x28>)
 80005f0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	080040c8 	.word	0x080040c8
 80005fc:	e000e100 	.word	0xe000e100

08000600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000604:	4aaa      	ldr	r2, [pc, #680]	; (80008b0 <HAL_GPIO_Init+0x2b0>)
{
 8000606:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000608:	4290      	cmp	r0, r2
{
 800060a:	4604      	mov	r4, r0
 800060c:	468b      	mov	fp, r1
 800060e:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000610:	d013      	beq.n	800063a <HAL_GPIO_Init+0x3a>
 8000612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000616:	4290      	cmp	r0, r2
 8000618:	d00f      	beq.n	800063a <HAL_GPIO_Init+0x3a>
 800061a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800061e:	4290      	cmp	r0, r2
 8000620:	d00b      	beq.n	800063a <HAL_GPIO_Init+0x3a>
 8000622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000626:	4290      	cmp	r0, r2
 8000628:	d007      	beq.n	800063a <HAL_GPIO_Init+0x3a>
 800062a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800062e:	4290      	cmp	r0, r2
 8000630:	d003      	beq.n	800063a <HAL_GPIO_Init+0x3a>
 8000632:	21cd      	movs	r1, #205	; 0xcd
 8000634:	489f      	ldr	r0, [pc, #636]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 8000636:	f003 fa04 	bl	8003a42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800063a:	f8db 2000 	ldr.w	r2, [fp]
 800063e:	b291      	uxth	r1, r2
 8000640:	b111      	cbz	r1, 8000648 <HAL_GPIO_Init+0x48>
 8000642:	0c12      	lsrs	r2, r2, #16
 8000644:	0412      	lsls	r2, r2, #16
 8000646:	b11a      	cbz	r2, 8000650 <HAL_GPIO_Init+0x50>
 8000648:	21ce      	movs	r1, #206	; 0xce
 800064a:	489a      	ldr	r0, [pc, #616]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 800064c:	f003 f9f9 	bl	8003a42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000650:	f8db 2004 	ldr.w	r2, [fp, #4]
 8000654:	2a03      	cmp	r2, #3
 8000656:	d917      	bls.n	8000688 <HAL_GPIO_Init+0x88>
 8000658:	f1a2 0111 	sub.w	r1, r2, #17
 800065c:	2901      	cmp	r1, #1
 800065e:	d913      	bls.n	8000688 <HAL_GPIO_Init+0x88>
 8000660:	4895      	ldr	r0, [pc, #596]	; (80008b8 <HAL_GPIO_Init+0x2b8>)
 8000662:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8000666:	4281      	cmp	r1, r0
 8000668:	d00e      	beq.n	8000688 <HAL_GPIO_Init+0x88>
 800066a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800066e:	4282      	cmp	r2, r0
 8000670:	d00a      	beq.n	8000688 <HAL_GPIO_Init+0x88>
 8000672:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8000676:	4281      	cmp	r1, r0
 8000678:	d006      	beq.n	8000688 <HAL_GPIO_Init+0x88>
 800067a:	4990      	ldr	r1, [pc, #576]	; (80008bc <HAL_GPIO_Init+0x2bc>)
 800067c:	428a      	cmp	r2, r1
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x88>
 8000680:	21cf      	movs	r1, #207	; 0xcf
 8000682:	488c      	ldr	r0, [pc, #560]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 8000684:	f003 f9dd 	bl	8003a42 <assert_failed>
{
 8000688:	2500      	movs	r5, #0
 800068a:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800068c:	f8df a244 	ldr.w	sl, [pc, #580]	; 80008d4 <HAL_GPIO_Init+0x2d4>
 8000690:	4e8b      	ldr	r6, [pc, #556]	; (80008c0 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8000692:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000694:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 8000698:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 80006a0:	45b9      	cmp	r9, r7
 80006a2:	f040 808f 	bne.w	80007c4 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80006a6:	9b01      	ldr	r3, [sp, #4]
 80006a8:	429c      	cmp	r4, r3
 80006aa:	d011      	beq.n	80006d0 <HAL_GPIO_Init+0xd0>
 80006ac:	4985      	ldr	r1, [pc, #532]	; (80008c4 <HAL_GPIO_Init+0x2c4>)
 80006ae:	428c      	cmp	r4, r1
 80006b0:	d00e      	beq.n	80006d0 <HAL_GPIO_Init+0xd0>
 80006b2:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <HAL_GPIO_Init+0x2c8>)
 80006b4:	429c      	cmp	r4, r3
 80006b6:	d00b      	beq.n	80006d0 <HAL_GPIO_Init+0xd0>
 80006b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80006bc:	428c      	cmp	r4, r1
 80006be:	d007      	beq.n	80006d0 <HAL_GPIO_Init+0xd0>
 80006c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80006c4:	428c      	cmp	r4, r1
 80006c6:	d003      	beq.n	80006d0 <HAL_GPIO_Init+0xd0>
 80006c8:	21dd      	movs	r1, #221	; 0xdd
 80006ca:	487a      	ldr	r0, [pc, #488]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 80006cc:	f003 f9b9 	bl	8003a42 <assert_failed>
      switch (GPIO_Init->Mode)
 80006d0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80006d4:	2912      	cmp	r1, #18
 80006d6:	f000 80d3 	beq.w	8000880 <HAL_GPIO_Init+0x280>
 80006da:	f200 808d 	bhi.w	80007f8 <HAL_GPIO_Init+0x1f8>
 80006de:	2902      	cmp	r1, #2
 80006e0:	f000 80c1 	beq.w	8000866 <HAL_GPIO_Init+0x266>
 80006e4:	d877      	bhi.n	80007d6 <HAL_GPIO_Init+0x1d6>
 80006e6:	2900      	cmp	r1, #0
 80006e8:	f000 8093 	beq.w	8000812 <HAL_GPIO_Init+0x212>
 80006ec:	2901      	cmp	r1, #1
 80006ee:	f000 80ae 	beq.w	800084e <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006f2:	2fff      	cmp	r7, #255	; 0xff
 80006f4:	bf82      	ittt	hi
 80006f6:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 80006fa:	f1ae 0e08 	subhi.w	lr, lr, #8
 80006fe:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000702:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000706:	bf9d      	ittte	ls
 8000708:	4620      	movls	r0, r4
 800070a:	6822      	ldrls	r2, [r4, #0]
 800070c:	ea4f 0188 	movls.w	r1, r8, lsl #2
 8000710:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000712:	fa0e fc01 	lsl.w	ip, lr, r1
 8000716:	ea22 020c 	bic.w	r2, r2, ip
 800071a:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800071e:	bf88      	it	hi
 8000720:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000722:	4311      	orrs	r1, r2
 8000724:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000726:	f8db 0004 	ldr.w	r0, [fp, #4]
 800072a:	00c3      	lsls	r3, r0, #3
 800072c:	d54a      	bpl.n	80007c4 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000732:	f028 0103 	bic.w	r1, r8, #3
 8000736:	f042 0201 	orr.w	r2, r2, #1
 800073a:	f8ca 2018 	str.w	r2, [sl, #24]
 800073e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000742:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000746:	f002 0201 	and.w	r2, r2, #1
 800074a:	9203      	str	r2, [sp, #12]
 800074c:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000750:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000754:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000758:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800075c:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800075e:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000762:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000764:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000768:	f000 809b 	beq.w	80008a2 <HAL_GPIO_Init+0x2a2>
 800076c:	4a55      	ldr	r2, [pc, #340]	; (80008c4 <HAL_GPIO_Init+0x2c4>)
 800076e:	4294      	cmp	r4, r2
 8000770:	f000 8099 	beq.w	80008a6 <HAL_GPIO_Init+0x2a6>
 8000774:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <HAL_GPIO_Init+0x2c8>)
 8000776:	429c      	cmp	r4, r3
 8000778:	f000 8097 	beq.w	80008aa <HAL_GPIO_Init+0x2aa>
 800077c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000780:	4294      	cmp	r4, r2
 8000782:	bf14      	ite	ne
 8000784:	2204      	movne	r2, #4
 8000786:	2203      	moveq	r2, #3
 8000788:	fa02 f20c 	lsl.w	r2, r2, ip
 800078c:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8000790:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000792:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000794:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000796:	bf4c      	ite	mi
 8000798:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800079a:	43ba      	bicpl	r2, r7
 800079c:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800079e:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a0:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80007a2:	bf4c      	ite	mi
 80007a4:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007a6:	43ba      	bicpl	r2, r7
 80007a8:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007aa:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ac:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80007ae:	bf4c      	ite	mi
 80007b0:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007b2:	43ba      	bicpl	r2, r7
 80007b4:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007b6:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b8:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80007ba:	bf4c      	ite	mi
 80007bc:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007be:	ea22 0707 	bicpl.w	r7, r2, r7
 80007c2:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007c4:	f108 0801 	add.w	r8, r8, #1
 80007c8:	f1b8 0f10 	cmp.w	r8, #16
 80007cc:	f47f af61 	bne.w	8000692 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 80007d0:	b005      	add	sp, #20
 80007d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80007d6:	2903      	cmp	r1, #3
 80007d8:	d05f      	beq.n	800089a <HAL_GPIO_Init+0x29a>
 80007da:	2911      	cmp	r1, #17
 80007dc:	d189      	bne.n	80006f2 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80007de:	f8db 200c 	ldr.w	r2, [fp, #12]
 80007e2:	3a01      	subs	r2, #1
 80007e4:	2a02      	cmp	r2, #2
 80007e6:	d903      	bls.n	80007f0 <HAL_GPIO_Init+0x1f0>
 80007e8:	21ec      	movs	r1, #236	; 0xec
 80007ea:	4832      	ldr	r0, [pc, #200]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 80007ec:	f003 f929 	bl	8003a42 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007f0:	f8db 500c 	ldr.w	r5, [fp, #12]
 80007f4:	3504      	adds	r5, #4
          break;
 80007f6:	e77c      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007f8:	4834      	ldr	r0, [pc, #208]	; (80008cc <HAL_GPIO_Init+0x2cc>)
 80007fa:	4281      	cmp	r1, r0
 80007fc:	d009      	beq.n	8000812 <HAL_GPIO_Init+0x212>
 80007fe:	d81c      	bhi.n	800083a <HAL_GPIO_Init+0x23a>
 8000800:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8000804:	4281      	cmp	r1, r0
 8000806:	d004      	beq.n	8000812 <HAL_GPIO_Init+0x212>
 8000808:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800080c:	4281      	cmp	r1, r0
 800080e:	f47f af70 	bne.w	80006f2 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000812:	f8db 1008 	ldr.w	r1, [fp, #8]
 8000816:	2902      	cmp	r1, #2
 8000818:	d904      	bls.n	8000824 <HAL_GPIO_Init+0x224>
 800081a:	f240 1107 	movw	r1, #263	; 0x107
 800081e:	4825      	ldr	r0, [pc, #148]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 8000820:	f003 f90f 	bl	8003a42 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000824:	f8db 1008 	ldr.w	r1, [fp, #8]
 8000828:	b3c9      	cbz	r1, 800089e <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800082a:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 800082c:	bf0c      	ite	eq
 800082e:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 8000832:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000836:	2508      	movs	r5, #8
 8000838:	e75b      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800083a:	4825      	ldr	r0, [pc, #148]	; (80008d0 <HAL_GPIO_Init+0x2d0>)
 800083c:	4281      	cmp	r1, r0
 800083e:	d0e8      	beq.n	8000812 <HAL_GPIO_Init+0x212>
 8000840:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8000844:	4281      	cmp	r1, r0
 8000846:	d0e4      	beq.n	8000812 <HAL_GPIO_Init+0x212>
 8000848:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800084c:	e7de      	b.n	800080c <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800084e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000852:	3a01      	subs	r2, #1
 8000854:	2a02      	cmp	r2, #2
 8000856:	d903      	bls.n	8000860 <HAL_GPIO_Init+0x260>
 8000858:	21e5      	movs	r1, #229	; 0xe5
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 800085c:	f003 f8f1 	bl	8003a42 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000860:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8000864:	e745      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000866:	f8db 200c 	ldr.w	r2, [fp, #12]
 800086a:	3a01      	subs	r2, #1
 800086c:	2a02      	cmp	r2, #2
 800086e:	d903      	bls.n	8000878 <HAL_GPIO_Init+0x278>
 8000870:	21f3      	movs	r1, #243	; 0xf3
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 8000874:	f003 f8e5 	bl	8003a42 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000878:	f8db 500c 	ldr.w	r5, [fp, #12]
 800087c:	3508      	adds	r5, #8
          break;
 800087e:	e738      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000880:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000884:	3a01      	subs	r2, #1
 8000886:	2a02      	cmp	r2, #2
 8000888:	d903      	bls.n	8000892 <HAL_GPIO_Init+0x292>
 800088a:	21fa      	movs	r1, #250	; 0xfa
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_GPIO_Init+0x2b4>)
 800088e:	f003 f8d8 	bl	8003a42 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000892:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000896:	350c      	adds	r5, #12
          break;
 8000898:	e72b      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800089a:	2500      	movs	r5, #0
 800089c:	e729      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800089e:	2504      	movs	r5, #4
 80008a0:	e727      	b.n	80006f2 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a2:	2200      	movs	r2, #0
 80008a4:	e770      	b.n	8000788 <HAL_GPIO_Init+0x188>
 80008a6:	2201      	movs	r2, #1
 80008a8:	e76e      	b.n	8000788 <HAL_GPIO_Init+0x188>
 80008aa:	2202      	movs	r2, #2
 80008ac:	e76c      	b.n	8000788 <HAL_GPIO_Init+0x188>
 80008ae:	bf00      	nop
 80008b0:	40010800 	.word	0x40010800
 80008b4:	08004103 	.word	0x08004103
 80008b8:	10110000 	.word	0x10110000
 80008bc:	10220000 	.word	0x10220000
 80008c0:	40010400 	.word	0x40010400
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	40011000 	.word	0x40011000
 80008cc:	10210000 	.word	0x10210000
 80008d0:	10310000 	.word	0x10310000
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	4605      	mov	r5, r0
 80008dc:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80008de:	460c      	mov	r4, r1
 80008e0:	b921      	cbnz	r1, 80008ec <HAL_GPIO_WritePin+0x14>
 80008e2:	f240 11e3 	movw	r1, #483	; 0x1e3
 80008e6:	4808      	ldr	r0, [pc, #32]	; (8000908 <HAL_GPIO_WritePin+0x30>)
 80008e8:	f003 f8ab 	bl	8003a42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80008ec:	2e01      	cmp	r6, #1
 80008ee:	d906      	bls.n	80008fe <HAL_GPIO_WritePin+0x26>
 80008f0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <HAL_GPIO_WritePin+0x30>)
 80008f6:	f003 f8a4 	bl	8003a42 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008fa:	612c      	str	r4, [r5, #16]
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d1fb      	bne.n	80008fa <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000902:	0424      	lsls	r4, r4, #16
 8000904:	e7f9      	b.n	80008fa <HAL_GPIO_WritePin+0x22>
 8000906:	bf00      	nop
 8000908:	08004103 	.word	0x08004103

0800090c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000910:	4604      	mov	r4, r0
{
 8000912:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000914:	2800      	cmp	r0, #0
 8000916:	d069      	beq.n	80009ec <HAL_PCD_Init+0xe0>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <HAL_PCD_Init+0xe4>)
 800091c:	429a      	cmp	r2, r3
 800091e:	d003      	beq.n	8000928 <HAL_PCD_Init+0x1c>
 8000920:	219f      	movs	r1, #159	; 0x9f
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <HAL_PCD_Init+0xe8>)
 8000924:	f003 f88d 	bl	8003a42 <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000928:	f894 3429 	ldrb.w	r3, [r4, #1065]	; 0x429
 800092c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000930:	b923      	cbnz	r3, 800093c <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000932:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000936:	4620      	mov	r0, r4
 8000938:	f003 f96e 	bl	8003c18 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800093c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800093e:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000940:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000942:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000946:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 800094a:	f001 f96b 	bl	8001c24 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	f104 0804 	add.w	r8, r4, #4
 8000958:	6033      	str	r3, [r6, #0]
 800095a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	f001 f950 	bl	8001c04 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000964:	2100      	movs	r1, #0
 8000966:	6820      	ldr	r0, [r4, #0]
 8000968:	f001 f966 	bl	8001c38 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800096c:	2100      	movs	r1, #0
 800096e:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000970:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000972:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000974:	4608      	mov	r0, r1
 8000976:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800097a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800097e:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000980:	3101      	adds	r1, #1
 8000982:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000984:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000988:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 800098c:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800098e:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000990:	6410      	str	r0, [r2, #64]	; 0x40
 8000992:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000996:	d1f0      	bne.n	800097a <HAL_PCD_Init+0x6e>
 8000998:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800099a:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 800099c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 80009a0:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80009a2:	3201      	adds	r2, #1
 80009a4:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 80009a6:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80009aa:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 80009ae:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80009b2:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 80009b6:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80009ba:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 80009be:	d1ed      	bne.n	800099c <HAL_PCD_Init+0x90>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80009c0:	466e      	mov	r6, sp
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009c6:	682b      	ldr	r3, [r5, #0]
 80009c8:	6033      	str	r3, [r6, #0]
 80009ca:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80009ce:	6820      	ldr	r0, [r4, #0]
 80009d0:	f001 f934 	bl	8001c3c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80009d4:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80009d6:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80009da:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80009dc:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80009e0:	f001 fc04 	bl	80021ec <USB_DevDisconnect>
  return HAL_OK;
 80009e4:	2000      	movs	r0, #0
}
 80009e6:	b006      	add	sp, #24
 80009e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
 80009ee:	e7fa      	b.n	80009e6 <HAL_PCD_Init+0xda>
 80009f0:	40005c00 	.word	0x40005c00
 80009f4:	0800413c 	.word	0x0800413c

080009f8 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80009f8:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80009fc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80009fe:	2b01      	cmp	r3, #1
{
 8000a00:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a02:	d00e      	beq.n	8000a22 <HAL_PCD_Start+0x2a>
 8000a04:	2101      	movs	r1, #1
 8000a06:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000a0a:	f003 fa30 	bl	8003e6e <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000a0e:	6820      	ldr	r0, [r4, #0]
 8000a10:	f001 fbea 	bl	80021e8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a14:	6820      	ldr	r0, [r4, #0]
 8000a16:	f001 f8fc 	bl	8001c12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000a20:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a22:	2002      	movs	r0, #2
}
 8000a24:	bd10      	pop	{r4, pc}

08000a26 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000a26:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000a2a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000a2c:	2a01      	cmp	r2, #1
{
 8000a2e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a30:	d00b      	beq.n	8000a4a <HAL_PCD_SetAddress+0x24>
 8000a32:	2201      	movs	r2, #1
 8000a34:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000a38:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000a3c:	6800      	ldr	r0, [r0, #0]
 8000a3e:	f001 fbcd 	bl	80021dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000a48:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a4a:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000a4c:	bd10      	pop	{r4, pc}

08000a4e <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000a4e:	b538      	push	{r3, r4, r5, lr}
 8000a50:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000a52:	b248      	sxtb	r0, r1
 8000a54:	2800      	cmp	r0, #0
 8000a56:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a5a:	bfb5      	itete	lt
 8000a5c:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a60:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a64:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a66:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a6a:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000a6c:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a6e:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000a70:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000a72:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000a76:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d009      	beq.n	8000a90 <HAL_PCD_EP_Open+0x42>
 8000a7c:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a7e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000a80:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a84:	f001 f8f6 	bl	8001c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000a90:	2002      	movs	r0, #2
}
 8000a92:	bd38      	pop	{r3, r4, r5, pc}

08000a94 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000a94:	b24b      	sxtb	r3, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a9c:	bfb5      	itete	lt
 8000a9e:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000aa2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000aa6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000aa8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000aac:	0fdb      	lsrs	r3, r3, #31
{  
 8000aae:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000ab0:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ab2:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000ab4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000ab8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d009      	beq.n	8000ad2 <HAL_PCD_EP_Close+0x3e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000ac4:	6800      	ldr	r0, [r0, #0]
 8000ac6:	f001 fa47 	bl	8001f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000ad0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ad2:	2002      	movs	r0, #2
}
 8000ad4:	bd10      	pop	{r4, pc}

08000ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ad6:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000ad8:	2600      	movs	r6, #0
 8000ada:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000ade:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000ae0:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000ae2:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ae6:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000aea:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000aec:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000af0:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000af4:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000af8:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000afc:	6800      	ldr	r0, [r0, #0]
 8000afe:	f001 fb8f 	bl	8002220 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000b02:	4630      	mov	r0, r6
 8000b04:	bd70      	pop	{r4, r5, r6, pc}

08000b06 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000b06:	f001 010f 	and.w	r1, r1, #15
 8000b0a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000b0e:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000b12:	4770      	bx	lr

08000b14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000b14:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000b1c:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000b1e:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000b20:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000b22:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000b24:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b28:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b2c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000b2e:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000b30:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000b32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b36:	6800      	ldr	r0, [r0, #0]
 8000b38:	f001 fb72 	bl	8002220 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}

08000b40 <HAL_PCD_IRQHandler>:
{ 
 8000b40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b46:	6800      	ldr	r0, [r0, #0]
 8000b48:	f001 fb52 	bl	80021f0 <USB_ReadInterrupts>
 8000b4c:	0400      	lsls	r0, r0, #16
 8000b4e:	f100 8098 	bmi.w	8000c82 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000b52:	6820      	ldr	r0, [r4, #0]
 8000b54:	f001 fb4c 	bl	80021f0 <USB_ReadInterrupts>
 8000b58:	0541      	lsls	r1, r0, #21
 8000b5a:	d50f      	bpl.n	8000b7c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b5c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000b5e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b68:	041b      	lsls	r3, r3, #16
 8000b6a:	0c1b      	lsrs	r3, r3, #16
 8000b6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000b70:	f003 f889 	bl	8003c86 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000b74:	2100      	movs	r1, #0
 8000b76:	4620      	mov	r0, r4
 8000b78:	f7ff ff55 	bl	8000a26 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	f001 fb37 	bl	80021f0 <USB_ReadInterrupts>
 8000b82:	0447      	lsls	r7, r0, #17
 8000b84:	d508      	bpl.n	8000b98 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	f001 fb29 	bl	80021f0 <USB_ReadInterrupts>
 8000b9e:	0486      	lsls	r6, r0, #18
 8000ba0:	d508      	bpl.n	8000bb4 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ba2:	6822      	ldr	r2, [r4, #0]
 8000ba4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	0c1b      	lsrs	r3, r3, #16
 8000bb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000bb4:	6820      	ldr	r0, [r4, #0]
 8000bb6:	f001 fb1b 	bl	80021f0 <USB_ReadInterrupts>
 8000bba:	04c5      	lsls	r5, r0, #19
 8000bbc:	d51c      	bpl.n	8000bf8 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000bbe:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000bc0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000bc2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000bc6:	f023 0304 	bic.w	r3, r3, #4
 8000bca:	041b      	lsls	r3, r3, #16
 8000bcc:	0c1b      	lsrs	r3, r3, #16
 8000bce:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000bd2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000bd6:	f023 0308 	bic.w	r3, r3, #8
 8000bda:	041b      	lsls	r3, r3, #16
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000be2:	f003 f873 	bl	8003ccc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bf0:	041b      	lsls	r3, r3, #16
 8000bf2:	0c1b      	lsrs	r3, r3, #16
 8000bf4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000bf8:	6820      	ldr	r0, [r4, #0]
 8000bfa:	f001 faf9 	bl	80021f0 <USB_ReadInterrupts>
 8000bfe:	0500      	lsls	r0, r0, #20
 8000c00:	d51d      	bpl.n	8000c3e <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000c02:	6820      	ldr	r0, [r4, #0]
 8000c04:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000c12:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c1a:	041b      	lsls	r3, r3, #16
 8000c1c:	0c1b      	lsrs	r3, r3, #16
 8000c1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000c22:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000c30:	f001 fade 	bl	80021f0 <USB_ReadInterrupts>
 8000c34:	04c1      	lsls	r1, r0, #19
 8000c36:	d402      	bmi.n	8000c3e <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f003 f837 	bl	8003cac <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000c3e:	6820      	ldr	r0, [r4, #0]
 8000c40:	f001 fad6 	bl	80021f0 <USB_ReadInterrupts>
 8000c44:	0582      	lsls	r2, r0, #22
 8000c46:	d50b      	bpl.n	8000c60 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c48:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000c4a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000c5c:	f003 f80f 	bl	8003c7e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	f001 fac5 	bl	80021f0 <USB_ReadInterrupts>
 8000c66:	05c3      	lsls	r3, r0, #23
 8000c68:	d508      	bpl.n	8000c7c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c6a:	6822      	ldr	r2, [r4, #0]
 8000c6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c74:	041b      	lsls	r3, r3, #16
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000c82:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c84:	4fc8      	ldr	r7, [pc, #800]	; (8000fa8 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c86:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000fac <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c8a:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000fb0 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000c8e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000c92:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000c96:	6820      	ldr	r0, [r4, #0]
 8000c98:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	f57f af55 	bpl.w	8000b52 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ca8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000cac:	f015 050f 	ands.w	r5, r5, #15
 8000cb0:	f040 80ab 	bne.w	8000e0a <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000cb4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cb8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000cba:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cbe:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000cc0:	d126      	bne.n	8000d10 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cc2:	403b      	ands	r3, r7
 8000cc4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cd4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000cd8:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000cdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ce2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000ce4:	4413      	add	r3, r2
 8000ce6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f002 ffc1 	bl	8003c70 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000cee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0cf      	beq.n	8000c96 <HAL_PCD_IRQHandler+0x156>
 8000cf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d1cc      	bne.n	8000c96 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000cfc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d00:	6821      	ldr	r1, [r4, #0]
 8000d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d06:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000d0a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000d0e:	e7c2      	b.n	8000c96 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d10:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d18:	051a      	lsls	r2, r3, #20
 8000d1a:	d51f      	bpl.n	8000d5c <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d20:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d32:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d3a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d3e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000d42:	f001 fb6d 	bl	8002420 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d46:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d48:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d4a:	8813      	ldrh	r3, [r2, #0]
 8000d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d50:	051b      	lsls	r3, r3, #20
 8000d52:	0d1b      	lsrs	r3, r3, #20
 8000d54:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d56:	f002 ff7d 	bl	8003c54 <HAL_PCD_SetupStageCallback>
 8000d5a:	e79c      	b.n	8000c96 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d60:	041b      	lsls	r3, r3, #16
 8000d62:	d598      	bpl.n	8000c96 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d64:	8803      	ldrh	r3, [r0, #0]
 8000d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d6a:	051b      	lsls	r3, r3, #20
 8000d6c:	0d1b      	lsrs	r3, r3, #20
 8000d6e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d74:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d7e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d82:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d8a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000d8e:	b163      	cbz	r3, 8000daa <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000d90:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000d94:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000d98:	f001 fb42 	bl	8002420 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000d9c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000da0:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000da4:	4413      	add	r3, r2
 8000da6:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4620      	mov	r0, r4
 8000dae:	f002 ff57 	bl	8003c60 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000db8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000dbc:	2d3e      	cmp	r5, #62	; 0x3e
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	f101 0106 	add.w	r1, r1, #6
 8000dc4:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000dc8:	d917      	bls.n	8000dfa <HAL_PCD_IRQHandler+0x2ba>
 8000dca:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000dce:	06ee      	lsls	r6, r5, #27
 8000dd0:	bf04      	itt	eq
 8000dd2:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000dd6:	b29b      	uxtheq	r3, r3
 8000dd8:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000de2:	8813      	ldrh	r3, [r2, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	ea03 0308 	and.w	r3, r3, r8
 8000dea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df6:	8013      	strh	r3, [r2, #0]
 8000df8:	e74d      	b.n	8000c96 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000dfa:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000dfe:	07ed      	lsls	r5, r5, #31
 8000e00:	bf44      	itt	mi
 8000e02:	3301      	addmi	r3, #1
 8000e04:	b29b      	uxthmi	r3, r3
 8000e06:	029b      	lsls	r3, r3, #10
 8000e08:	e7e8      	b.n	8000ddc <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e0a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e18:	0419      	lsls	r1, r3, #16
 8000e1a:	d53f      	bpl.n	8000e9c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e1c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e20:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e28:	051b      	lsls	r3, r3, #20
 8000e2a:	0d1b      	lsrs	r3, r3, #20
 8000e2c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e30:	eb04 010a 	add.w	r1, r4, sl
 8000e34:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d174      	bne.n	8000f26 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e40:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	3306      	adds	r3, #6
 8000e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e50:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000e54:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000e58:	b136      	cbz	r6, 8000e68 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000e5a:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000e5e:	4633      	mov	r3, r6
 8000e60:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000e64:	f001 fadc 	bl	8002420 <USB_ReadPMA>
 8000e68:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000e6c:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000e70:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000e74:	4433      	add	r3, r6
 8000e76:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e7a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000e7e:	4432      	add	r2, r6
 8000e80:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e84:	b123      	cbz	r3, 8000e90 <HAL_PCD_IRQHandler+0x350>
 8000e86:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000e8a:	4286      	cmp	r6, r0
 8000e8c:	f080 8086 	bcs.w	8000f9c <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e90:	44a2      	add	sl, r4
 8000e92:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000e96:	4620      	mov	r0, r4
 8000e98:	f002 fee2 	bl	8003c60 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ea0:	061a      	lsls	r2, r3, #24
 8000ea2:	f57f aef8 	bpl.w	8000c96 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ea6:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000ea8:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000eaa:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000eae:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	403b      	ands	r3, r7
 8000eb4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000eb8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000ebc:	3502      	adds	r5, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d178      	bne.n	8000fb4 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ec2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ec6:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3302      	adds	r3, #2
 8000ece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ed2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ed6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000eda:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ee2:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000ee4:	b11b      	cbz	r3, 8000eee <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000ee6:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000ee8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000eea:	f001 f987 	bl	80021fc <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	4426      	add	r6, r4
 8000ef2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000ef6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3302      	adds	r3, #2
 8000efe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000f02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000f06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000f0a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f0c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f10:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000f12:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000f14:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000f16:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f18:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8085 	bne.w	800102a <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f20:	f002 fea6 	bl	8003c70 <HAL_PCD_DataInStageCallback>
 8000f24:	e6b7      	b.n	8000c96 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f26:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000f2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f38:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f3a:	d021      	beq.n	8000f80 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f3c:	3202      	adds	r2, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f44:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000f48:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000f4c:	b136      	cbz	r6, 8000f5c <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f4e:	4633      	mov	r3, r6
 8000f50:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f54:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000f58:	f001 fa62 	bl	8002420 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000f5c:	eb04 030a 	add.w	r3, r4, sl
 8000f60:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f6e:	051b      	lsls	r3, r3, #20
 8000f70:	0d1b      	lsrs	r3, r3, #20
 8000f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f7a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000f7e:	e773      	b.n	8000e68 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f80:	3206      	adds	r2, #6
 8000f82:	4413      	add	r3, r2
 8000f84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f88:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000f8c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d0e3      	beq.n	8000f5c <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f94:	4633      	mov	r3, r6
 8000f96:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000f9a:	e7db      	b.n	8000f54 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000f9c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff fd98 	bl	8000ad6 <HAL_PCD_EP_Receive>
 8000fa6:	e779      	b.n	8000e9c <HAL_PCD_IRQHandler+0x35c>
 8000fa8:	ffff8f0f 	.word	0xffff8f0f
 8000fac:	ffffbf8f 	.word	0xffffbf8f
 8000fb0:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000fb4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000fb8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fc2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000fc6:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000fc8:	d020      	beq.n	800100c <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fca:	3202      	adds	r2, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fd2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000fd6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fde:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000fe0:	b11b      	cbz	r3, 8000fea <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000fe2:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000fe4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000fe6:	f001 f909 	bl	80021fc <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000fea:	19a3      	adds	r3, r4, r6
 8000fec:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ffa:	051b      	lsls	r3, r3, #20
 8000ffc:	0d1b      	lsrs	r3, r3, #20
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001006:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800100a:	e770      	b.n	8000eee <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800100c:	3206      	adds	r2, #6
 800100e:	4413      	add	r3, r2
 8001010:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001014:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001018:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800101c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001020:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0e1      	beq.n	8000fea <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001026:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001028:	e7dc      	b.n	8000fe4 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800102a:	f7ff fd73 	bl	8000b14 <HAL_PCD_EP_Transmit>
 800102e:	e632      	b.n	8000c96 <HAL_PCD_IRQHandler+0x156>

08001030 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001030:	2201      	movs	r2, #1
{
 8001032:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001034:	b24b      	sxtb	r3, r1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800103c:	bfb5      	itete	lt
 800103e:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001042:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001046:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001048:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800104c:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 800104e:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001050:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001052:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001054:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001056:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800105a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800105c:	4293      	cmp	r3, r2
 800105e:	d00e      	beq.n	800107e <HAL_PCD_EP_SetStall+0x4e>
 8001060:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001064:	6800      	ldr	r0, [r0, #0]
 8001066:	f001 f845 	bl	80020f4 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800106a:	b925      	cbnz	r5, 8001076 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800106c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001070:	6820      	ldr	r0, [r4, #0]
 8001072:	f001 f8c1 	bl	80021f8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001076:	2000      	movs	r0, #0
 8001078:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800107c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800107e:	2002      	movs	r0, #2
}
 8001080:	bd38      	pop	{r3, r4, r5, pc}

08001082 <HAL_PCD_EP_ClrStall>:
{
 8001082:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001084:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001086:	b24b      	sxtb	r3, r1
 8001088:	2b00      	cmp	r3, #0
 800108a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800108e:	bfb5      	itete	lt
 8001090:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001094:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001098:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800109a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800109e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80010a0:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80010a2:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80010a4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010a6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80010aa:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d009      	beq.n	80010c4 <HAL_PCD_EP_ClrStall+0x42>
 80010b0:	2301      	movs	r3, #1
 80010b2:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	f001 f84e 	bl	8002158 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80010bc:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 80010c0:	4620      	mov	r0, r4
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010c4:	2002      	movs	r0, #2
}
 80010c6:	bd38      	pop	{r3, r4, r5, pc}

080010c8 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80010c8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010cc:	bf1b      	ittet	ne
 80010ce:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80010d2:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80010d6:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010da:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80010dc:	bf08      	it	eq
 80010de:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80010e2:	b91a      	cbnz	r2, 80010ec <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80010e4:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80010e6:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80010e8:	2000      	movs	r0, #0
 80010ea:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80010ec:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80010ee:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80010f0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80010f2:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80010f4:	8103      	strh	r3, [r0, #8]
 80010f6:	e7f7      	b.n	80010e8 <HAL_PCDEx_PMAConfig+0x20>

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80010fc:	4604      	mov	r4, r0
 80010fe:	b920      	cbnz	r0, 800110a <HAL_RCC_OscConfig+0x12>
 8001100:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001104:	48a5      	ldr	r0, [pc, #660]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 8001106:	f002 fc9c 	bl	8003a42 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	b133      	cbz	r3, 800111c <HAL_RCC_OscConfig+0x24>
 800110e:	071a      	lsls	r2, r3, #28
 8001110:	d104      	bne.n	800111c <HAL_RCC_OscConfig+0x24>
 8001112:	f240 1171 	movw	r1, #369	; 0x171
 8001116:	48a1      	ldr	r0, [pc, #644]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 8001118:	f002 fc93 	bl	8003a42 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	07db      	lsls	r3, r3, #31
 8001120:	d418      	bmi.n	8001154 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	079f      	lsls	r7, r3, #30
 8001126:	d472      	bmi.n	800120e <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	0719      	lsls	r1, r3, #28
 800112c:	f100 80b9 	bmi.w	80012a2 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	075a      	lsls	r2, r3, #29
 8001134:	f100 80eb 	bmi.w	800130e <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001138:	69e3      	ldr	r3, [r4, #28]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d904      	bls.n	8001148 <HAL_RCC_OscConfig+0x50>
 800113e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001142:	4896      	ldr	r0, [pc, #600]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 8001144:	f002 fc7d 	bl	8003a42 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001148:	69e2      	ldr	r2, [r4, #28]
 800114a:	2a00      	cmp	r2, #0
 800114c:	f040 815e 	bne.w	800140c <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001150:	2000      	movs	r0, #0
 8001152:	e020      	b.n	8001196 <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800115a:	d007      	beq.n	800116c <HAL_RCC_OscConfig+0x74>
 800115c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001160:	d004      	beq.n	800116c <HAL_RCC_OscConfig+0x74>
 8001162:	f240 1177 	movw	r1, #375	; 0x177
 8001166:	488d      	ldr	r0, [pc, #564]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 8001168:	f002 fc6b 	bl	8003a42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800116c:	4d8c      	ldr	r5, [pc, #560]	; (80013a0 <HAL_RCC_OscConfig+0x2a8>)
 800116e:	686b      	ldr	r3, [r5, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b04      	cmp	r3, #4
 8001176:	d007      	beq.n	8001188 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001178:	686b      	ldr	r3, [r5, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b08      	cmp	r3, #8
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0xa4>
 8001182:	686b      	ldr	r3, [r5, #4]
 8001184:	03de      	lsls	r6, r3, #15
 8001186:	d509      	bpl.n	800119c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	039d      	lsls	r5, r3, #14
 800118c:	d5c9      	bpl.n	8001122 <HAL_RCC_OscConfig+0x2a>
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1c6      	bne.n	8001122 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
}
 8001196:	b002      	add	sp, #8
 8001198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a2:	d110      	bne.n	80011c6 <HAL_RCC_OscConfig+0xce>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ac:	f7fe ffee 	bl	800018c <HAL_GetTick>
 80011b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	0398      	lsls	r0, r3, #14
 80011b6:	d4b4      	bmi.n	8001122 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7fe ffe8 	bl	800018c <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2864      	cmp	r0, #100	; 0x64
 80011c0:	d9f7      	bls.n	80011b2 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
 80011c4:	e7e7      	b.n	8001196 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	b99b      	cbnz	r3, 80011f0 <HAL_RCC_OscConfig+0xf8>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011d8:	f7fe ffd8 	bl	800018c <HAL_GetTick>
 80011dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	0399      	lsls	r1, r3, #14
 80011e2:	d59e      	bpl.n	8001122 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7fe ffd2 	bl	800018c <HAL_GetTick>
 80011e8:	1b80      	subs	r0, r0, r6
 80011ea:	2864      	cmp	r0, #100	; 0x64
 80011ec:	d9f7      	bls.n	80011de <HAL_RCC_OscConfig+0xe6>
 80011ee:	e7e8      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	d103      	bne.n	8001200 <HAL_RCC_OscConfig+0x108>
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	602b      	str	r3, [r5, #0]
 80011fe:	e7d1      	b.n	80011a4 <HAL_RCC_OscConfig+0xac>
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	602b      	str	r3, [r5, #0]
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120c:	e7cd      	b.n	80011aa <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800120e:	6923      	ldr	r3, [r4, #16]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d904      	bls.n	800121e <HAL_RCC_OscConfig+0x126>
 8001214:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001218:	4860      	ldr	r0, [pc, #384]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 800121a:	f002 fc12 	bl	8003a42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800121e:	6963      	ldr	r3, [r4, #20]
 8001220:	2b1f      	cmp	r3, #31
 8001222:	d904      	bls.n	800122e <HAL_RCC_OscConfig+0x136>
 8001224:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001228:	485c      	ldr	r0, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 800122a:	f002 fc0a 	bl	8003a42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800122e:	4d5c      	ldr	r5, [pc, #368]	; (80013a0 <HAL_RCC_OscConfig+0x2a8>)
 8001230:	686b      	ldr	r3, [r5, #4]
 8001232:	f013 0f0c 	tst.w	r3, #12
 8001236:	d007      	beq.n	8001248 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b08      	cmp	r3, #8
 8001240:	d110      	bne.n	8001264 <HAL_RCC_OscConfig+0x16c>
 8001242:	686b      	ldr	r3, [r5, #4]
 8001244:	03da      	lsls	r2, r3, #15
 8001246:	d40d      	bmi.n	8001264 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	079b      	lsls	r3, r3, #30
 800124c:	d502      	bpl.n	8001254 <HAL_RCC_OscConfig+0x15c>
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d19f      	bne.n	8001194 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	6962      	ldr	r2, [r4, #20]
 8001258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800125c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	e761      	b.n	8001128 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	6922      	ldr	r2, [r4, #16]
 8001266:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	b16a      	cbz	r2, 8001286 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800126e:	f7fe ff8d 	bl	800018c <HAL_GetTick>
 8001272:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	079f      	lsls	r7, r3, #30
 8001278:	d4ec      	bmi.n	8001254 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7fe ff87 	bl	800018c <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	2802      	cmp	r0, #2
 8001282:	d9f7      	bls.n	8001274 <HAL_RCC_OscConfig+0x17c>
 8001284:	e79d      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8001286:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001288:	f7fe ff80 	bl	800018c <HAL_GetTick>
 800128c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	0798      	lsls	r0, r3, #30
 8001292:	f57f af49 	bpl.w	8001128 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7fe ff79 	bl	800018c <HAL_GetTick>
 800129a:	1b80      	subs	r0, r0, r6
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x196>
 80012a0:	e78f      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80012a2:	69a3      	ldr	r3, [r4, #24]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d904      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1ba>
 80012a8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80012ac:	483b      	ldr	r0, [pc, #236]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	f002 fbc8 	bl	8003a42 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b2:	69a2      	ldr	r2, [r4, #24]
 80012b4:	4d3a      	ldr	r5, [pc, #232]	; (80013a0 <HAL_RCC_OscConfig+0x2a8>)
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <HAL_RCC_OscConfig+0x2b0>)
 80012b8:	b1da      	cbz	r2, 80012f2 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012be:	f7fe ff65 	bl	800018c <HAL_GetTick>
 80012c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012c6:	079b      	lsls	r3, r3, #30
 80012c8:	d50d      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80012d6:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80012d8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f9      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1e0>
 80012e4:	e724      	b.n	8001130 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7fe ff51 	bl	800018c <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9e9      	bls.n	80012c4 <HAL_RCC_OscConfig+0x1cc>
 80012f0:	e767      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 80012f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012f4:	f7fe ff4a 	bl	800018c <HAL_GetTick>
 80012f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012fc:	079f      	lsls	r7, r3, #30
 80012fe:	f57f af17 	bpl.w	8001130 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7fe ff43 	bl	800018c <HAL_GetTick>
 8001306:	1b80      	subs	r0, r0, r6
 8001308:	2802      	cmp	r0, #2
 800130a:	d9f6      	bls.n	80012fa <HAL_RCC_OscConfig+0x202>
 800130c:	e759      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800130e:	68e3      	ldr	r3, [r4, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d906      	bls.n	8001322 <HAL_RCC_OscConfig+0x22a>
 8001314:	2b05      	cmp	r3, #5
 8001316:	d004      	beq.n	8001322 <HAL_RCC_OscConfig+0x22a>
 8001318:	f240 211b 	movw	r1, #539	; 0x21b
 800131c:	481f      	ldr	r0, [pc, #124]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 800131e:	f002 fb90 	bl	8003a42 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001322:	4d1f      	ldr	r5, [pc, #124]	; (80013a0 <HAL_RCC_OscConfig+0x2a8>)
 8001324:	69eb      	ldr	r3, [r5, #28]
 8001326:	00d8      	lsls	r0, r3, #3
 8001328:	d424      	bmi.n	8001374 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 800132a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	69eb      	ldr	r3, [r5, #28]
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	61eb      	str	r3, [r5, #28]
 8001334:	69eb      	ldr	r3, [r5, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4e1c      	ldr	r6, [pc, #112]	; (80013b0 <HAL_RCC_OscConfig+0x2b8>)
 8001340:	6833      	ldr	r3, [r6, #0]
 8001342:	05d9      	lsls	r1, r3, #23
 8001344:	d518      	bpl.n	8001378 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001346:	68e3      	ldr	r3, [r4, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d133      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2bc>
 800134c:	6a2b      	ldr	r3, [r5, #32]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001354:	f7fe ff1a 	bl	800018c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800135c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	6a2b      	ldr	r3, [r5, #32]
 8001360:	079b      	lsls	r3, r3, #30
 8001362:	d54c      	bpl.n	80013fe <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8001364:	2f00      	cmp	r7, #0
 8001366:	f43f aee7 	beq.w	8001138 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	69eb      	ldr	r3, [r5, #28]
 800136c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001370:	61eb      	str	r3, [r5, #28]
 8001372:	e6e1      	b.n	8001138 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2700      	movs	r7, #0
 8001376:	e7e2      	b.n	800133e <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001378:	6833      	ldr	r3, [r6, #0]
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001380:	f7fe ff04 	bl	800018c <HAL_GetTick>
 8001384:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	6833      	ldr	r3, [r6, #0]
 8001388:	05da      	lsls	r2, r3, #23
 800138a:	d4dc      	bmi.n	8001346 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138c:	f7fe fefe 	bl	800018c <HAL_GetTick>
 8001390:	eba0 0008 	sub.w	r0, r0, r8
 8001394:	2864      	cmp	r0, #100	; 0x64
 8001396:	d9f6      	bls.n	8001386 <HAL_RCC_OscConfig+0x28e>
 8001398:	e713      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
 800139a:	bf00      	nop
 800139c:	08004174 	.word	0x08004174
 80013a0:	40021000 	.word	0x40021000
 80013a4:	42420000 	.word	0x42420000
 80013a8:	42420480 	.word	0x42420480
 80013ac:	20000118 	.word	0x20000118
 80013b0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	b9ab      	cbnz	r3, 80013e2 <HAL_RCC_OscConfig+0x2ea>
 80013b6:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	622b      	str	r3, [r5, #32]
 80013c2:	6a2b      	ldr	r3, [r5, #32]
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80013ca:	f7fe fedf 	bl	800018c <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	6a2b      	ldr	r3, [r5, #32]
 80013d2:	0798      	lsls	r0, r3, #30
 80013d4:	d5c6      	bpl.n	8001364 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7fe fed9 	bl	800018c <HAL_GetTick>
 80013da:	1b80      	subs	r0, r0, r6
 80013dc:	4540      	cmp	r0, r8
 80013de:	d9f7      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2d8>
 80013e0:	e6ef      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	6a2b      	ldr	r3, [r5, #32]
 80013e6:	d103      	bne.n	80013f0 <HAL_RCC_OscConfig+0x2f8>
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	622b      	str	r3, [r5, #32]
 80013ee:	e7ad      	b.n	800134c <HAL_RCC_OscConfig+0x254>
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	622b      	str	r3, [r5, #32]
 80013f6:	6a2b      	ldr	r3, [r5, #32]
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	e7a9      	b.n	8001352 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7fe fec5 	bl	800018c <HAL_GetTick>
 8001402:	eba0 0008 	sub.w	r0, r0, r8
 8001406:	42b0      	cmp	r0, r6
 8001408:	d9a9      	bls.n	800135e <HAL_RCC_OscConfig+0x266>
 800140a:	e6da      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140c:	4d38      	ldr	r5, [pc, #224]	; (80014f0 <HAL_RCC_OscConfig+0x3f8>)
 800140e:	686b      	ldr	r3, [r5, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	f43f aebd 	beq.w	8001194 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	2a02      	cmp	r2, #2
 800141c:	4e35      	ldr	r6, [pc, #212]	; (80014f4 <HAL_RCC_OscConfig+0x3fc>)
 800141e:	d157      	bne.n	80014d0 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001420:	6a23      	ldr	r3, [r4, #32]
 8001422:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8001426:	d004      	beq.n	8001432 <HAL_RCC_OscConfig+0x33a>
 8001428:	f240 21c2 	movw	r1, #706	; 0x2c2
 800142c:	4832      	ldr	r0, [pc, #200]	; (80014f8 <HAL_RCC_OscConfig+0x400>)
 800142e:	f002 fb08 	bl	8003a42 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001434:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8001438:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800143c:	d010      	beq.n	8001460 <HAL_RCC_OscConfig+0x368>
 800143e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001442:	d00d      	beq.n	8001460 <HAL_RCC_OscConfig+0x368>
 8001444:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001448:	d00a      	beq.n	8001460 <HAL_RCC_OscConfig+0x368>
 800144a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800144e:	d007      	beq.n	8001460 <HAL_RCC_OscConfig+0x368>
 8001450:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001454:	d004      	beq.n	8001460 <HAL_RCC_OscConfig+0x368>
 8001456:	f240 21c3 	movw	r1, #707	; 0x2c3
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x400>)
 800145c:	f002 faf1 	bl	8003a42 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001464:	f7fe fe92 	bl	800018c <HAL_GetTick>
 8001468:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	0199      	lsls	r1, r3, #6
 800146e:	d429      	bmi.n	80014c4 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001470:	6a23      	ldr	r3, [r4, #32]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001476:	d10e      	bne.n	8001496 <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001478:	68a3      	ldr	r3, [r4, #8]
 800147a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800147e:	d004      	beq.n	800148a <HAL_RCC_OscConfig+0x392>
 8001480:	f240 21d9 	movw	r1, #729	; 0x2d9
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x400>)
 8001486:	f002 fadc 	bl	8003a42 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	686b      	ldr	r3, [r5, #4]
 800148c:	68a2      	ldr	r2, [r4, #8]
 800148e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001492:	4313      	orrs	r3, r2
 8001494:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001496:	6a23      	ldr	r3, [r4, #32]
 8001498:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800149a:	686a      	ldr	r2, [r5, #4]
 800149c:	430b      	orrs	r3, r1
 800149e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80014a2:	4313      	orrs	r3, r2
 80014a4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014a6:	2301      	movs	r3, #1
 80014a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014aa:	f7fe fe6f 	bl	800018c <HAL_GetTick>
 80014ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	019a      	lsls	r2, r3, #6
 80014b4:	f53f ae4c 	bmi.w	8001150 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7fe fe68 	bl	800018c <HAL_GetTick>
 80014bc:	1b00      	subs	r0, r0, r4
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9f6      	bls.n	80014b0 <HAL_RCC_OscConfig+0x3b8>
 80014c2:	e67e      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7fe fe62 	bl	800018c <HAL_GetTick>
 80014c8:	1bc0      	subs	r0, r0, r7
 80014ca:	2802      	cmp	r0, #2
 80014cc:	d9cd      	bls.n	800146a <HAL_RCC_OscConfig+0x372>
 80014ce:	e678      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014d4:	f7fe fe5a 	bl	800018c <HAL_GetTick>
 80014d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	f57f ae37 	bpl.w	8001150 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e2:	f7fe fe53 	bl	800018c <HAL_GetTick>
 80014e6:	1b00      	subs	r0, r0, r4
 80014e8:	2802      	cmp	r0, #2
 80014ea:	d9f6      	bls.n	80014da <HAL_RCC_OscConfig+0x3e2>
 80014ec:	e669      	b.n	80011c2 <HAL_RCC_OscConfig+0xca>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420060 	.word	0x42420060
 80014f8:	08004174 	.word	0x08004174

080014fc <HAL_RCC_GetSysClockFreq>:
{
 80014fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001500:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001502:	ac02      	add	r4, sp, #8
 8001504:	f103 0510 	add.w	r5, r3, #16
 8001508:	4622      	mov	r2, r4
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	c203      	stmia	r2!, {r0, r1}
 8001512:	42ab      	cmp	r3, r5
 8001514:	4614      	mov	r4, r2
 8001516:	d1f7      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001518:	2301      	movs	r3, #1
 800151a:	f88d 3004 	strb.w	r3, [sp, #4]
 800151e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001522:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001526:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001528:	f003 020c 	and.w	r2, r3, #12
 800152c:	2a08      	cmp	r2, #8
 800152e:	d117      	bne.n	8001560 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001530:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001534:	a806      	add	r0, sp, #24
 8001536:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001538:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800153a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800153e:	d50c      	bpl.n	800155a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001540:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001544:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001548:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154a:	aa06      	add	r2, sp, #24
 800154c:	4413      	add	r3, r2
 800154e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001552:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001556:	b007      	add	sp, #28
 8001558:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_RCC_GetSysClockFreq+0x74>)
 800155c:	4350      	muls	r0, r2
 800155e:	e7fa      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001562:	e7f8      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x5a>
 8001564:	0800401c 	.word	0x0800401c
 8001568:	40021000 	.word	0x40021000
 800156c:	007a1200 	.word	0x007a1200
 8001570:	003d0900 	.word	0x003d0900

08001574 <HAL_RCC_ClockConfig>:
{
 8001574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001578:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 800157a:	4604      	mov	r4, r0
 800157c:	b920      	cbnz	r0, 8001588 <HAL_RCC_ClockConfig+0x14>
 800157e:	f240 312e 	movw	r1, #814	; 0x32e
 8001582:	487f      	ldr	r0, [pc, #508]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 8001584:	f002 fa5d 	bl	8003a42 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	071d      	lsls	r5, r3, #28
 800158c:	d104      	bne.n	8001598 <HAL_RCC_ClockConfig+0x24>
 800158e:	f240 312f 	movw	r1, #815	; 0x32f
 8001592:	487b      	ldr	r0, [pc, #492]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 8001594:	f002 fa55 	bl	8003a42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001598:	2e02      	cmp	r6, #2
 800159a:	d904      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x32>
 800159c:	f44f 714c 	mov.w	r1, #816	; 0x330
 80015a0:	4877      	ldr	r0, [pc, #476]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 80015a2:	f002 fa4e 	bl	8003a42 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015a6:	4a77      	ldr	r2, [pc, #476]	; (8001784 <HAL_RCC_ClockConfig+0x210>)
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	429e      	cmp	r6, r3
 80015b0:	d83d      	bhi.n	800162e <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	0798      	lsls	r0, r3, #30
 80015b6:	d447      	bmi.n	8001648 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	07da      	lsls	r2, r3, #31
 80015bc:	d470      	bmi.n	80016a0 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <HAL_RCC_ClockConfig+0x210>)
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	429e      	cmp	r6, r3
 80015c8:	f0c0 80b5 	bcc.w	8001736 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	4d6e      	ldr	r5, [pc, #440]	; (8001788 <HAL_RCC_ClockConfig+0x214>)
 80015d0:	f013 0f04 	tst.w	r3, #4
 80015d4:	f040 80bb 	bne.w	800174e <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	071b      	lsls	r3, r3, #28
 80015dc:	d517      	bpl.n	800160e <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80015e4:	d00c      	beq.n	8001600 <HAL_RCC_ClockConfig+0x8c>
 80015e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80015ea:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80015ee:	d007      	beq.n	8001600 <HAL_RCC_ClockConfig+0x8c>
 80015f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80015f4:	d004      	beq.n	8001600 <HAL_RCC_ClockConfig+0x8c>
 80015f6:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 80015fa:	4861      	ldr	r0, [pc, #388]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 80015fc:	f002 fa21 	bl	8003a42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001600:	686b      	ldr	r3, [r5, #4]
 8001602:	6922      	ldr	r2, [r4, #16]
 8001604:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001608:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800160c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160e:	f7ff ff75 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 8001612:	686b      	ldr	r3, [r5, #4]
 8001614:	4a5d      	ldr	r2, [pc, #372]	; (800178c <HAL_RCC_ClockConfig+0x218>)
 8001616:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	40d8      	lsrs	r0, r3
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_ClockConfig+0x21c>)
 8001620:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001622:	2000      	movs	r0, #0
 8001624:	f002 fa36 	bl	8003a94 <HAL_InitTick>
  return HAL_OK;
 8001628:	2000      	movs	r0, #0
}
 800162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f023 0307 	bic.w	r3, r3, #7
 8001634:	4333      	orrs	r3, r6
 8001636:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	429e      	cmp	r6, r3
 8001640:	d0b7      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001648:	4d4f      	ldr	r5, [pc, #316]	; (8001788 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164a:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800164e:	bf1e      	ittt	ne
 8001650:	686a      	ldrne	r2, [r5, #4]
 8001652:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001656:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165a:	bf42      	ittt	mi
 800165c:	686b      	ldrmi	r3, [r5, #4]
 800165e:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8001662:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001664:	68a3      	ldr	r3, [r4, #8]
 8001666:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800166a:	d012      	beq.n	8001692 <HAL_RCC_ClockConfig+0x11e>
 800166c:	f023 0220 	bic.w	r2, r3, #32
 8001670:	2a90      	cmp	r2, #144	; 0x90
 8001672:	d00e      	beq.n	8001692 <HAL_RCC_ClockConfig+0x11e>
 8001674:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001678:	2aa0      	cmp	r2, #160	; 0xa0
 800167a:	d00a      	beq.n	8001692 <HAL_RCC_ClockConfig+0x11e>
 800167c:	f023 0210 	bic.w	r2, r3, #16
 8001680:	2ac0      	cmp	r2, #192	; 0xc0
 8001682:	d006      	beq.n	8001692 <HAL_RCC_ClockConfig+0x11e>
 8001684:	2bf0      	cmp	r3, #240	; 0xf0
 8001686:	d004      	beq.n	8001692 <HAL_RCC_ClockConfig+0x11e>
 8001688:	f240 3156 	movw	r1, #854	; 0x356
 800168c:	483c      	ldr	r0, [pc, #240]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 800168e:	f002 f9d8 	bl	8003a42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	686b      	ldr	r3, [r5, #4]
 8001694:	68a2      	ldr	r2, [r4, #8]
 8001696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800169a:	4313      	orrs	r3, r2
 800169c:	606b      	str	r3, [r5, #4]
 800169e:	e78b      	b.n	80015b8 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d904      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x13c>
 80016a6:	f240 315d 	movw	r1, #861	; 0x35d
 80016aa:	4835      	ldr	r0, [pc, #212]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 80016ac:	f002 f9c9 	bl	8003a42 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b0:	6862      	ldr	r2, [r4, #4]
 80016b2:	4d35      	ldr	r5, [pc, #212]	; (8001788 <HAL_RCC_ClockConfig+0x214>)
 80016b4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b8:	d11d      	bne.n	80016f6 <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	d0c0      	beq.n	8001642 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c0:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80016ce:	f7fe fd5d 	bl	800018c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80016d4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016da:	686b      	ldr	r3, [r5, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	f43f af6c 	beq.w	80015be <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e6:	f7fe fd51 	bl	800018c <HAL_GetTick>
 80016ea:	1bc0      	subs	r0, r0, r7
 80016ec:	4540      	cmp	r0, r8
 80016ee:	d9f4      	bls.n	80016da <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	2a02      	cmp	r2, #2
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016fe:	e7de      	b.n	80016be <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	f013 0f02 	tst.w	r3, #2
 8001704:	e7db      	b.n	80016be <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001706:	2b02      	cmp	r3, #2
 8001708:	d110      	bne.n	800172c <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170a:	686b      	ldr	r3, [r5, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	f43f af54 	beq.w	80015be <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001716:	f7fe fd39 	bl	800018c <HAL_GetTick>
 800171a:	1bc0      	subs	r0, r0, r7
 800171c:	4540      	cmp	r0, r8
 800171e:	d9f4      	bls.n	800170a <HAL_RCC_ClockConfig+0x196>
 8001720:	e7e6      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7fe fd33 	bl	800018c <HAL_GetTick>
 8001726:	1bc0      	subs	r0, r0, r7
 8001728:	4540      	cmp	r0, r8
 800172a:	d8e1      	bhi.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800172c:	686b      	ldr	r3, [r5, #4]
 800172e:	f013 0f0c 	tst.w	r3, #12
 8001732:	d1f6      	bne.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
 8001734:	e743      	b.n	80015be <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f023 0307 	bic.w	r3, r3, #7
 800173c:	4333      	orrs	r3, r6
 800173e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	429e      	cmp	r6, r3
 8001748:	f47f af7b 	bne.w	8001642 <HAL_RCC_ClockConfig+0xce>
 800174c:	e73e      	b.n	80015cc <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800174e:	68e3      	ldr	r3, [r4, #12]
 8001750:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001754:	d00c      	beq.n	8001770 <HAL_RCC_ClockConfig+0x1fc>
 8001756:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800175a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800175e:	d007      	beq.n	8001770 <HAL_RCC_ClockConfig+0x1fc>
 8001760:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001764:	d004      	beq.n	8001770 <HAL_RCC_ClockConfig+0x1fc>
 8001766:	f240 31b1 	movw	r1, #945	; 0x3b1
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_RCC_ClockConfig+0x20c>)
 800176c:	f002 f969 	bl	8003a42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001770:	686b      	ldr	r3, [r5, #4]
 8001772:	68e2      	ldr	r2, [r4, #12]
 8001774:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001778:	4313      	orrs	r3, r2
 800177a:	606b      	str	r3, [r5, #4]
 800177c:	e72c      	b.n	80015d8 <HAL_RCC_ClockConfig+0x64>
 800177e:	bf00      	nop
 8001780:	08004174 	.word	0x08004174
 8001784:	40022000 	.word	0x40022000
 8001788:	40021000 	.word	0x40021000
 800178c:	08004260 	.word	0x08004260
 8001790:	20000118 	.word	0x20000118

08001794 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017a2:	6810      	ldr	r0, [r2, #0]
} 
 80017a4:	40d8      	lsrs	r0, r3
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08004270 	.word	0x08004270
 80017b0:	20000118 	.word	0x20000118

080017b4 <HAL_RCC_GetClockConfig>:
{
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80017b8:	4604      	mov	r4, r0
 80017ba:	b920      	cbnz	r0, 80017c6 <HAL_RCC_GetClockConfig+0x12>
 80017bc:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <HAL_RCC_GetClockConfig+0x54>)
 80017c2:	f002 f93e 	bl	8003a42 <assert_failed>
  assert_param(pFLatency != NULL);
 80017c6:	b925      	cbnz	r5, 80017d2 <HAL_RCC_GetClockConfig+0x1e>
 80017c8:	f240 5131 	movw	r1, #1329	; 0x531
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <HAL_RCC_GetClockConfig+0x54>)
 80017ce:	f002 f938 	bl	8003a42 <assert_failed>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017d2:	230f      	movs	r3, #15
 80017d4:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_GetClockConfig+0x58>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80017e6:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80017ee:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017f8:	6123      	str	r3, [r4, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetClockConfig+0x5c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	602b      	str	r3, [r5, #0]
 8001804:	bd38      	pop	{r3, r4, r5, pc}
 8001806:	bf00      	nop
 8001808:	08004174 	.word	0x08004174
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001814:	6803      	ldr	r3, [r0, #0]
{
 8001816:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800181a:	f013 0f13 	tst.w	r3, #19
{
 800181e:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001820:	d103      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x16>
 8001822:	217c      	movs	r1, #124	; 0x7c
 8001824:	4845      	ldr	r0, [pc, #276]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001826:	f002 f90c 	bl	8003a42 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	07d9      	lsls	r1, r3, #31
 800182e:	d528      	bpl.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001830:	686b      	ldr	r3, [r5, #4]
 8001832:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001836:	d003      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8001838:	2182      	movs	r1, #130	; 0x82
 800183a:	4840      	ldr	r0, [pc, #256]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800183c:	f002 f901 	bl	8003a42 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001840:	4c3f      	ldr	r4, [pc, #252]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001842:	69e3      	ldr	r3, [r4, #28]
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	d444      	bmi.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001848:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	69e3      	ldr	r3, [r4, #28]
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61e3      	str	r3, [r4, #28]
 8001852:	69e3      	ldr	r3, [r4, #28]
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4e39      	ldr	r6, [pc, #228]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800185e:	6833      	ldr	r3, [r6, #0]
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	d538      	bpl.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001864:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001866:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800186a:	d148      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800186c:	6a23      	ldr	r3, [r4, #32]
 800186e:	686a      	ldr	r2, [r5, #4]
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001874:	4313      	orrs	r3, r2
 8001876:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001878:	b11f      	cbz	r7, 8001882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	69e3      	ldr	r3, [r4, #28]
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001880:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	079b      	lsls	r3, r3, #30
 8001886:	d50e      	bpl.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8001888:	68ab      	ldr	r3, [r5, #8]
 800188a:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800188e:	d003      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001890:	21c9      	movs	r1, #201	; 0xc9
 8001892:	482a      	ldr	r0, [pc, #168]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001894:	f002 f8d5 	bl	8003a42 <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800189a:	68a9      	ldr	r1, [r5, #8]
 800189c:	6853      	ldr	r3, [r2, #4]
 800189e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018a2:	430b      	orrs	r3, r1
 80018a4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018a6:	6828      	ldr	r0, [r5, #0]
 80018a8:	f010 0010 	ands.w	r0, r0, #16
 80018ac:	d024      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80018ae:	68eb      	ldr	r3, [r5, #12]
 80018b0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80018b4:	d004      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80018b6:	f240 1125 	movw	r1, #293	; 0x125
 80018ba:	4820      	ldr	r0, [pc, #128]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80018bc:	f002 f8c1 	bl	8003a42 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018c0:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80018c2:	68e9      	ldr	r1, [r5, #12]
 80018c4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018c6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6053      	str	r3, [r2, #4]
 80018d0:	e012      	b.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2700      	movs	r7, #0
 80018d4:	e7c2      	b.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	6833      	ldr	r3, [r6, #0]
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018de:	f7fe fc55 	bl	800018c <HAL_GetTick>
 80018e2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	6833      	ldr	r3, [r6, #0]
 80018e6:	05d8      	lsls	r0, r3, #23
 80018e8:	d4bc      	bmi.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7fe fc4f 	bl	800018c <HAL_GetTick>
 80018ee:	eba0 0008 	sub.w	r0, r0, r8
 80018f2:	2864      	cmp	r0, #100	; 0x64
 80018f4:	d9f6      	bls.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 80018f6:	2003      	movs	r0, #3
}
 80018f8:	b002      	add	sp, #8
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018fe:	686a      	ldr	r2, [r5, #4]
 8001900:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001904:	4293      	cmp	r3, r2
 8001906:	d0b1      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001908:	2001      	movs	r0, #1
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800190c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800190e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001910:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001916:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001918:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800191a:	07d9      	lsls	r1, r3, #31
 800191c:	d5a6      	bpl.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 800191e:	f7fe fc35 	bl	800018c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001926:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	6a23      	ldr	r3, [r4, #32]
 800192a:	079a      	lsls	r2, r3, #30
 800192c:	d49e      	bmi.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fc2d 	bl	800018c <HAL_GetTick>
 8001932:	1b80      	subs	r0, r0, r6
 8001934:	4540      	cmp	r0, r8
 8001936:	d9f7      	bls.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001938:	e7dd      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800193a:	bf00      	nop
 800193c:	080041ac 	.word	0x080041ac
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
 8001948:	42420440 	.word	0x42420440

0800194c <HAL_TIM_Base_MspInit>:
 800194c:	4770      	bx	lr
	...

08001950 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_TIM_Base_Start_IT+0x44>)
{
 8001954:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001956:	4293      	cmp	r3, r2
{
 8001958:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800195a:	d00f      	beq.n	800197c <HAL_TIM_Base_Start_IT+0x2c>
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d00c      	beq.n	800197c <HAL_TIM_Base_Start_IT+0x2c>
 8001962:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001966:	4293      	cmp	r3, r2
 8001968:	d008      	beq.n	800197c <HAL_TIM_Base_Start_IT+0x2c>
 800196a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196e:	4293      	cmp	r3, r2
 8001970:	d004      	beq.n	800197c <HAL_TIM_Base_Start_IT+0x2c>
 8001972:	f240 1161 	movw	r1, #353	; 0x161
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <HAL_TIM_Base_Start_IT+0x48>)
 8001978:	f002 f863 	bl	8003a42 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197c:	6823      	ldr	r3, [r4, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800197e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bd10      	pop	{r4, pc}
 8001992:	bf00      	nop
 8001994:	40012c00 	.word	0x40012c00
 8001998:	080041e7 	.word	0x080041e7

0800199c <HAL_TIM_OC_DelayElapsedCallback>:
 800199c:	4770      	bx	lr

0800199e <HAL_TIM_IC_CaptureCallback>:
 800199e:	4770      	bx	lr

080019a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIM_TriggerCallback>:
 80019a2:	4770      	bx	lr

080019a4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a4:	6803      	ldr	r3, [r0, #0]
{
 80019a6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a8:	691a      	ldr	r2, [r3, #16]
{
 80019aa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ac:	0791      	lsls	r1, r2, #30
 80019ae:	d50e      	bpl.n	80019ce <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	0792      	lsls	r2, r2, #30
 80019b4:	d50b      	bpl.n	80019ce <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019b6:	f06f 0202 	mvn.w	r2, #2
 80019ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019bc:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019be:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019c0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019c2:	079b      	lsls	r3, r3, #30
 80019c4:	d077      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80019c6:	f7ff ffea 	bl	800199e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	2300      	movs	r3, #0
 80019cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	0750      	lsls	r0, r2, #29
 80019d4:	d510      	bpl.n	80019f8 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	0751      	lsls	r1, r2, #29
 80019da:	d50d      	bpl.n	80019f8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	f06f 0204 	mvn.w	r2, #4
 80019e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80019ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ee:	d068      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80019f0:	f7ff ffd5 	bl	800199e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f4:	2300      	movs	r3, #0
 80019f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	0712      	lsls	r2, r2, #28
 80019fe:	d50f      	bpl.n	8001a20 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	0710      	lsls	r0, r2, #28
 8001a04:	d50c      	bpl.n	8001a20 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a06:	f06f 0208 	mvn.w	r2, #8
 8001a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a10:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a12:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001a14:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a16:	d05a      	beq.n	8001ace <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a18:	f7ff ffc1 	bl	800199e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	06d2      	lsls	r2, r2, #27
 8001a26:	d510      	bpl.n	8001a4a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	06d0      	lsls	r0, r2, #27
 8001a2c:	d50d      	bpl.n	8001a4a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a2e:	f06f 0210 	mvn.w	r2, #16
 8001a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a34:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a38:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a3a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a40:	d04b      	beq.n	8001ada <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	f7ff ffac 	bl	800199e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	2300      	movs	r3, #0
 8001a48:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	07d1      	lsls	r1, r2, #31
 8001a50:	d508      	bpl.n	8001a64 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	07d2      	lsls	r2, r2, #31
 8001a56:	d505      	bpl.n	8001a64 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a60:	f001 ffe4 	bl	8003a2c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	0610      	lsls	r0, r2, #24
 8001a6a:	d508      	bpl.n	8001a7e <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	0611      	lsls	r1, r2, #24
 8001a70:	d505      	bpl.n	8001a7e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001a76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a7a:	f000 f8c2 	bl	8001c02 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	0652      	lsls	r2, r2, #25
 8001a84:	d508      	bpl.n	8001a98 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	0650      	lsls	r0, r2, #25
 8001a8a:	d505      	bpl.n	8001a98 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001a90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a94:	f7ff ff85 	bl	80019a2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	0691      	lsls	r1, r2, #26
 8001a9e:	d522      	bpl.n	8001ae6 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	0692      	lsls	r2, r2, #26
 8001aa4:	d51f      	bpl.n	8001ae6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aa6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001aaa:	4620      	mov	r0, r4
    }
  }
}
 8001aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ab0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001ab2:	f000 b8a5 	b.w	8001c00 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	f7ff ff71 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff ff70 	bl	80019a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac0:	e783      	b.n	80019ca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	f7ff ff6b 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ff6a 	bl	80019a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001acc:	e792      	b.n	80019f4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	f7ff ff65 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ff64 	bl	80019a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ad8:	e7a0      	b.n	8001a1c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ada:	f7ff ff5f 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ff5e 	bl	80019a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ae4:	e7af      	b.n	8001a46 <HAL_TIM_IRQHandler+0xa2>
 8001ae6:	bd10      	pop	{r4, pc}

08001ae8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001aea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aec:	4290      	cmp	r0, r2
 8001aee:	d00a      	beq.n	8001b06 <TIM_Base_SetConfig+0x1e>
 8001af0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001af4:	d007      	beq.n	8001b06 <TIM_Base_SetConfig+0x1e>
 8001af6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001afa:	4290      	cmp	r0, r2
 8001afc:	d003      	beq.n	8001b06 <TIM_Base_SetConfig+0x1e>
 8001afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b02:	4290      	cmp	r0, r2
 8001b04:	d115      	bne.n	8001b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001b06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b0c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <TIM_Base_SetConfig+0x6c>)
 8001b10:	4290      	cmp	r0, r2
 8001b12:	d00a      	beq.n	8001b2a <TIM_Base_SetConfig+0x42>
 8001b14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0x42>
 8001b1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b1e:	4290      	cmp	r0, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x42>
 8001b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d103      	bne.n	8001b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b30:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b32:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b38:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001b3a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3c:	688b      	ldr	r3, [r1, #8]
 8001b3e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b40:	680b      	ldr	r3, [r1, #0]
 8001b42:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <TIM_Base_SetConfig+0x6c>)
 8001b46:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b48:	bf04      	itt	eq
 8001b4a:	690b      	ldreq	r3, [r1, #16]
 8001b4c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6143      	str	r3, [r0, #20]
 8001b52:	4770      	bx	lr
 8001b54:	40012c00 	.word	0x40012c00

08001b58 <HAL_TIM_Base_Init>:
{
 8001b58:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d049      	beq.n	8001bf4 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001b60:	6803      	ldr	r3, [r0, #0]
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_TIM_Base_Init+0xa0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_TIM_Base_Init+0x2e>
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d00b      	beq.n	8001b86 <HAL_TIM_Base_Init+0x2e>
 8001b6e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_TIM_Base_Init+0x2e>
 8001b76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_Base_Init+0x2e>
 8001b7e:	21d9      	movs	r1, #217	; 0xd9
 8001b80:	481e      	ldr	r0, [pc, #120]	; (8001bfc <HAL_TIM_Base_Init+0xa4>)
 8001b82:	f001 ff5e 	bl	8003a42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001b86:	68a3      	ldr	r3, [r4, #8]
 8001b88:	f033 0210 	bics.w	r2, r3, #16
 8001b8c:	d009      	beq.n	8001ba2 <HAL_TIM_Base_Init+0x4a>
 8001b8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b92:	2a20      	cmp	r2, #32
 8001b94:	d005      	beq.n	8001ba2 <HAL_TIM_Base_Init+0x4a>
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_Base_Init+0x4a>
 8001b9a:	21da      	movs	r1, #218	; 0xda
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <HAL_TIM_Base_Init+0xa4>)
 8001b9e:	f001 ff50 	bl	8003a42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8001ba8:	d006      	beq.n	8001bb8 <HAL_TIM_Base_Init+0x60>
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d003      	beq.n	8001bb8 <HAL_TIM_Base_Init+0x60>
 8001bb0:	21db      	movs	r1, #219	; 0xdb
 8001bb2:	4812      	ldr	r0, [pc, #72]	; (8001bfc <HAL_TIM_Base_Init+0xa4>)
 8001bb4:	f001 ff45 	bl	8003a42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001bb8:	69a3      	ldr	r3, [r4, #24]
 8001bba:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8001bbe:	d003      	beq.n	8001bc8 <HAL_TIM_Base_Init+0x70>
 8001bc0:	21dc      	movs	r1, #220	; 0xdc
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <HAL_TIM_Base_Init+0xa4>)
 8001bc4:	f001 ff3d 	bl	8003a42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001bcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bd0:	b923      	cbnz	r3, 8001bdc <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff feb8 	bl	800194c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001bdc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bde:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be4:	1d21      	adds	r1, r4, #4
 8001be6:	f7ff ff7f 	bl	8001ae8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001bea:	2301      	movs	r3, #1
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001bee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bf2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bf4:	2001      	movs	r0, #1
}
 8001bf6:	bd10      	pop	{r4, pc}
 8001bf8:	40012c00 	.word	0x40012c00
 8001bfc:	080041e7 	.word	0x080041e7

08001c00 <HAL_TIMEx_CommutationCallback>:
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	4770      	bx	lr

08001c04 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c04:	b084      	sub	sp, #16
 8001c06:	a801      	add	r0, sp, #4
 8001c08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c0c:	b004      	add	sp, #16
 8001c0e:	2000      	movs	r0, #0
 8001c10:	4770      	bx	lr

08001c12 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001c12:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001c1c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001c20:	2000      	movs	r0, #0
 8001c22:	4770      	bx	lr

08001c24 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001c24:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c28:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001c2c:	045b      	lsls	r3, r3, #17
 8001c2e:	0c5b      	lsrs	r3, r3, #17
 8001c30:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	4770      	bx	lr

08001c3c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	b510      	push	{r4, lr}
 8001c40:	ac03      	add	r4, sp, #12
 8001c42:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001c4a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001c52:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001c56:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001c5a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001c5e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001c62:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001c6a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4770      	bx	lr
	...

08001c74 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c74:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001c76:	78cb      	ldrb	r3, [r1, #3]
 8001c78:	780a      	ldrb	r2, [r1, #0]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d80f      	bhi.n	8001c9e <USB_ActivateEndpoint+0x2a>
 8001c7e:	e8df f003 	tbb	[pc, r3]
 8001c82:	6402      	.short	0x6402
 8001c84:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001c86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001c9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001c9e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ca2:	780c      	ldrb	r4, [r1, #0]
 8001ca4:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ca8:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001cac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	432a      	orrs	r2, r5
 8001cb4:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001cb8:	7a8a      	ldrb	r2, [r1, #10]
 8001cba:	780d      	ldrb	r5, [r1, #0]
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	f040 8097 	bne.w	8001df0 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001cc2:	784c      	ldrb	r4, [r1, #1]
 8001cc4:	888a      	ldrh	r2, [r1, #4]
 8001cc6:	2c00      	cmp	r4, #0
 8001cc8:	d04a      	beq.n	8001d60 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001cca:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	b2a4      	uxth	r4, r4
 8001cd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001cd6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ce0:	780c      	ldrb	r4, [r1, #0]
 8001ce2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ce6:	0652      	lsls	r2, r2, #25
 8001ce8:	d508      	bpl.n	8001cfc <USB_ActivateEndpoint+0x88>
 8001cea:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001cfc:	780a      	ldrb	r2, [r1, #0]
 8001cfe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001d1e:	2000      	movs	r0, #0
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001d22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d26:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	e7b2      	b.n	8001c9a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001d34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d38:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001d48:	e7a7      	b.n	8001c9a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001d4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5e:	e79c      	b.n	8001c9a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001d60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3304      	adds	r3, #4
 8001d6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001d74:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001d78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d7c:	690d      	ldr	r5, [r1, #16]
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	780b      	ldrb	r3, [r1, #0]
 8001d82:	3206      	adds	r2, #6
 8001d84:	2d3e      	cmp	r5, #62	; 0x3e
 8001d86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001d8a:	d929      	bls.n	8001de0 <USB_ActivateEndpoint+0x16c>
 8001d8c:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001d90:	06eb      	lsls	r3, r5, #27
 8001d92:	bf04      	itt	eq
 8001d94:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001d98:	b29e      	uxtheq	r6, r3
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <USB_ActivateEndpoint+0x2e0>)
 8001d9c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001da6:	780a      	ldrb	r2, [r1, #0]
 8001da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dac:	045e      	lsls	r6, r3, #17
 8001dae:	d50b      	bpl.n	8001dc8 <USB_ActivateEndpoint+0x154>
 8001db0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db8:	051b      	lsls	r3, r3, #20
 8001dba:	0d1b      	lsrs	r3, r3, #20
 8001dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001dc8:	780a      	ldrb	r2, [r1, #0]
 8001dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001dde:	e798      	b.n	8001d12 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001de0:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001de4:	07ed      	lsls	r5, r5, #31
 8001de6:	bf44      	itt	mi
 8001de8:	3301      	addmi	r3, #1
 8001dea:	b29b      	uxthmi	r3, r3
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	e7d7      	b.n	8001da0 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001df0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001df4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001df8:	0512      	lsls	r2, r2, #20
 8001dfa:	0d12      	lsrs	r2, r2, #20
 8001dfc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e04:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001e08:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001e0c:	780c      	ldrb	r4, [r1, #0]
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001e14:	88cc      	ldrh	r4, [r1, #6]
 8001e16:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001e1a:	0864      	lsrs	r4, r4, #1
 8001e1c:	0064      	lsls	r4, r4, #1
 8001e1e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001e22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001e26:	780c      	ldrb	r4, [r1, #0]
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	3204      	adds	r2, #4
 8001e2c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001e30:	890c      	ldrh	r4, [r1, #8]
 8001e32:	0864      	lsrs	r4, r4, #1
 8001e34:	0064      	lsls	r4, r4, #1
 8001e36:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001e3a:	784a      	ldrb	r2, [r1, #1]
 8001e3c:	780c      	ldrb	r4, [r1, #0]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	d147      	bne.n	8001ed2 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e42:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001e46:	0455      	lsls	r5, r2, #17
 8001e48:	d508      	bpl.n	8001e5c <USB_ActivateEndpoint+0x1e8>
 8001e4a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e58:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e5c:	780a      	ldrb	r2, [r1, #0]
 8001e5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e62:	065c      	lsls	r4, r3, #25
 8001e64:	d50b      	bpl.n	8001e7e <USB_ActivateEndpoint+0x20a>
 8001e66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6e:	051b      	lsls	r3, r3, #20
 8001e70:	0d1b      	lsrs	r3, r3, #20
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001e7e:	780a      	ldrb	r2, [r1, #0]
 8001e80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e88:	051b      	lsls	r3, r3, #20
 8001e8a:	0d1b      	lsrs	r3, r3, #20
 8001e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e98:	f248 0280 	movw	r2, #32896	; 0x8080
 8001e9c:	780c      	ldrb	r4, [r1, #0]
 8001e9e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001eb8:	7809      	ldrb	r1, [r1, #0]
 8001eba:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001ed0:	e725      	b.n	8001d1e <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ed2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ed6:	0452      	lsls	r2, r2, #17
 8001ed8:	d508      	bpl.n	8001eec <USB_ActivateEndpoint+0x278>
 8001eda:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001eec:	780a      	ldrb	r2, [r1, #0]
 8001eee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ef2:	065b      	lsls	r3, r3, #25
 8001ef4:	d50b      	bpl.n	8001f0e <USB_ActivateEndpoint+0x29a>
 8001ef6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efe:	051b      	lsls	r3, r3, #20
 8001f00:	0d1b      	lsrs	r3, r3, #20
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001f0e:	780a      	ldrb	r2, [r1, #0]
 8001f10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f18:	051b      	lsls	r3, r3, #20
 8001f1a:	0d1b      	lsrs	r3, r3, #20
 8001f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f28:	f248 0280 	movw	r2, #32896	; 0x8080
 8001f2c:	780c      	ldrb	r4, [r1, #0]
 8001f2e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f3a:	041b      	lsls	r3, r3, #16
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f44:	7809      	ldrb	r1, [r1, #0]
 8001f46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	e7b8      	b.n	8001ec6 <USB_ActivateEndpoint+0x252>
 8001f54:	ffff8000 	.word	0xffff8000

08001f58 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f58:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001f5a:	7a8c      	ldrb	r4, [r1, #10]
 8001f5c:	784a      	ldrb	r2, [r1, #1]
 8001f5e:	780b      	ldrb	r3, [r1, #0]
 8001f60:	bbcc      	cbnz	r4, 8001fd6 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001f62:	b302      	cbz	r2, 8001fa6 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f68:	0652      	lsls	r2, r2, #25
 8001f6a:	d50b      	bpl.n	8001f84 <USB_DeactivateEndpoint+0x2c>
 8001f6c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f74:	0512      	lsls	r2, r2, #20
 8001f76:	0d12      	lsrs	r2, r2, #20
 8001f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f80:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001f84:	780a      	ldrb	r2, [r1, #0]
 8001f86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fa6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001faa:	0454      	lsls	r4, r2, #17
 8001fac:	d50b      	bpl.n	8001fc6 <USB_DeactivateEndpoint+0x6e>
 8001fae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fb6:	0512      	lsls	r2, r2, #20
 8001fb8:	0d12      	lsrs	r2, r2, #20
 8001fba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fc6:	780a      	ldrb	r2, [r1, #0]
 8001fc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd4:	e7dd      	b.n	8001f92 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d148      	bne.n	800206c <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fde:	0452      	lsls	r2, r2, #17
 8001fe0:	d50b      	bpl.n	8001ffa <USB_DeactivateEndpoint+0xa2>
 8001fe2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fe6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fea:	0512      	lsls	r2, r2, #20
 8001fec:	0d12      	lsrs	r2, r2, #20
 8001fee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ffa:	780a      	ldrb	r2, [r1, #0]
 8001ffc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002000:	065c      	lsls	r4, r3, #25
 8002002:	d50b      	bpl.n	800201c <USB_DeactivateEndpoint+0xc4>
 8002004:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800200c:	051b      	lsls	r3, r3, #20
 800200e:	0d1b      	lsrs	r3, r3, #20
 8002010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002018:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800201c:	780a      	ldrb	r2, [r1, #0]
 800201e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002026:	051b      	lsls	r3, r3, #20
 8002028:	0d1b      	lsrs	r3, r3, #20
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002032:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002036:	f248 0280 	movw	r2, #32896	; 0x8080
 800203a:	780c      	ldrb	r4, [r1, #0]
 800203c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	4313      	orrs	r3, r2
 800204e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002052:	7809      	ldrb	r1, [r1, #0]
 8002054:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	4313      	orrs	r3, r2
 8002066:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800206a:	e79a      	b.n	8001fa2 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800206c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002070:	0452      	lsls	r2, r2, #17
 8002072:	d50b      	bpl.n	800208c <USB_DeactivateEndpoint+0x134>
 8002074:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002078:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800207c:	0512      	lsls	r2, r2, #20
 800207e:	0d12      	lsrs	r2, r2, #20
 8002080:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002088:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800208c:	780a      	ldrb	r2, [r1, #0]
 800208e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002092:	065b      	lsls	r3, r3, #25
 8002094:	d50b      	bpl.n	80020ae <USB_DeactivateEndpoint+0x156>
 8002096:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800209a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209e:	051b      	lsls	r3, r3, #20
 80020a0:	0d1b      	lsrs	r3, r3, #20
 80020a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80020ae:	780a      	ldrb	r2, [r1, #0]
 80020b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	0d1b      	lsrs	r3, r3, #20
 80020bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80020c8:	f248 0280 	movw	r2, #32896	; 0x8080
 80020cc:	780c      	ldrb	r4, [r1, #0]
 80020ce:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	4313      	orrs	r3, r2
 80020e0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020e4:	7809      	ldrb	r1, [r1, #0]
 80020e6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80020ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	e7b5      	b.n	8002060 <USB_DeactivateEndpoint+0x108>

080020f4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80020f4:	780a      	ldrb	r2, [r1, #0]
 80020f6:	b98a      	cbnz	r2, 800211c <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80020f8:	8803      	ldrh	r3, [r0, #0]
 80020fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800210a:	f083 0310 	eor.w	r3, r3, #16
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002116:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002118:	2000      	movs	r0, #0
 800211a:	4770      	bx	lr
    if (ep->is_in)
 800211c:	784b      	ldrb	r3, [r1, #1]
 800211e:	b183      	cbz	r3, 8002142 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002120:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002140:	e7ea      	b.n	8002118 <USB_EPSetStall+0x24>
 8002142:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002156:	e7ed      	b.n	8002134 <USB_EPSetStall+0x40>

08002158 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002158:	784b      	ldrb	r3, [r1, #1]
 800215a:	780a      	ldrb	r2, [r1, #0]
 800215c:	b313      	cbz	r3, 80021a4 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800215e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002162:	065b      	lsls	r3, r3, #25
 8002164:	d50b      	bpl.n	800217e <USB_EPClearStall+0x26>
 8002166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800216a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800217a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800217e:	780a      	ldrb	r2, [r1, #0]
 8002180:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	0c1b      	lsrs	r3, r3, #16
 8002190:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80021a0:	2000      	movs	r0, #0
 80021a2:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021a8:	045b      	lsls	r3, r3, #17
 80021aa:	d50b      	bpl.n	80021c4 <USB_EPClearStall+0x6c>
 80021ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021b4:	051b      	lsls	r3, r3, #20
 80021b6:	0d1b      	lsrs	r3, r3, #20
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021c4:	780a      	ldrb	r2, [r1, #0]
 80021c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80021da:	e7db      	b.n	8002194 <USB_EPClearStall+0x3c>

080021dc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80021dc:	b911      	cbnz	r1, 80021e4 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <USB_DevConnect>:
 80021e8:	2000      	movs	r0, #0
 80021ea:	4770      	bx	lr

080021ec <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021ec:	2000      	movs	r0, #0
 80021ee:	4770      	bx	lr

080021f0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80021f0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80021f4:	b280      	uxth	r0, r0
 80021f6:	4770      	bx	lr

080021f8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021f8:	2000      	movs	r0, #0
 80021fa:	4770      	bx	lr

080021fc <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80021fc:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80021fe:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002200:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002202:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002206:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002208:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800220c:	42a3      	cmp	r3, r4
 800220e:	d100      	bne.n	8002212 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002210:	bd10      	pop	{r4, pc}
 8002212:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002216:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800221a:	3401      	adds	r4, #1
 800221c:	e7f6      	b.n	800220c <USB_WritePMA+0x10>
	...

08002220 <USB_EPStartXfer>:
{
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002224:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002226:	7849      	ldrb	r1, [r1, #1]
{
 8002228:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 800222a:	2901      	cmp	r1, #1
 800222c:	6933      	ldr	r3, [r6, #16]
 800222e:	7ab0      	ldrb	r0, [r6, #10]
 8002230:	d166      	bne.n	8002300 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002232:	429a      	cmp	r2, r3
 8002234:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002236:	bf9b      	ittet	ls
 8002238:	2300      	movls	r3, #0
 800223a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 800223c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 800223e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002240:	bf88      	it	hi
 8002242:	61b2      	strhi	r2, [r6, #24]
 8002244:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002246:	bb10      	cbnz	r0, 800228e <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002248:	88b2      	ldrh	r2, [r6, #4]
 800224a:	6971      	ldr	r1, [r6, #20]
 800224c:	4628      	mov	r0, r5
 800224e:	f7ff ffd5 	bl	80021fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002252:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002256:	7832      	ldrb	r2, [r6, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	3302      	adds	r3, #2
 800225c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002260:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002264:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002268:	7832      	ldrb	r2, [r6, #0]
 800226a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002286:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800228a:	2000      	movs	r0, #0
 800228c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800228e:	7832      	ldrb	r2, [r6, #0]
 8002290:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002294:	00d2      	lsls	r2, r2, #3
 8002296:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800229a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800229e:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80022a0:	d01a      	beq.n	80022d8 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80022a2:	3102      	adds	r1, #2
 80022a4:	440a      	add	r2, r1
 80022a6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80022aa:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 80022ae:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80022b0:	6971      	ldr	r1, [r6, #20]
 80022b2:	4628      	mov	r0, r5
 80022b4:	f7ff ffa2 	bl	80021fc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80022b8:	7873      	ldrb	r3, [r6, #1]
 80022ba:	7832      	ldrb	r2, [r6, #0]
 80022bc:	b99b      	cbnz	r3, 80022e6 <USB_EPStartXfer+0xc6>
 80022be:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80022c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c6:	051b      	lsls	r3, r3, #20
 80022c8:	0d1b      	lsrs	r3, r3, #20
 80022ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80022d6:	e7c7      	b.n	8002268 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80022d8:	440a      	add	r2, r1
 80022da:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80022de:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80022e2:	88f2      	ldrh	r2, [r6, #6]
 80022e4:	e7e4      	b.n	80022b0 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d1be      	bne.n	8002268 <USB_EPStartXfer+0x48>
 80022ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80022ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f2:	051b      	lsls	r3, r3, #20
 80022f4:	0d1b      	lsrs	r3, r3, #20
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fe:	e7e8      	b.n	80022d2 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002300:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002302:	bf93      	iteet	ls
 8002304:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002306:	1ad2      	subhi	r2, r2, r3
 8002308:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 800230a:	61b3      	strls	r3, [r6, #24]
 800230c:	bf98      	it	ls
 800230e:	4613      	movls	r3, r2
 8002310:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002312:	bb70      	cbnz	r0, 8002372 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002314:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002318:	2b3e      	cmp	r3, #62	; 0x3e
 800231a:	b289      	uxth	r1, r1
 800231c:	f101 0106 	add.w	r1, r1, #6
 8002320:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002324:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002328:	d918      	bls.n	800235c <USB_EPStartXfer+0x13c>
 800232a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800232e:	06db      	lsls	r3, r3, #27
 8002330:	bf04      	itt	eq
 8002332:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002336:	b29a      	uxtheq	r2, r3
 8002338:	4b38      	ldr	r3, [pc, #224]	; (800241c <USB_EPStartXfer+0x1fc>)
 800233a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800233e:	b29b      	uxth	r3, r3
 8002340:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002344:	7832      	ldrb	r2, [r6, #0]
 8002346:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800234a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800235a:	e790      	b.n	800227e <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800235c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002360:	07dc      	lsls	r4, r3, #31
 8002362:	bf44      	itt	mi
 8002364:	3201      	addmi	r2, #1
 8002366:	b292      	uxthmi	r2, r2
 8002368:	0292      	lsls	r2, r2, #10
 800236a:	b292      	uxth	r2, r2
 800236c:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002370:	e7e8      	b.n	8002344 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002372:	b9b9      	cbnz	r1, 80023a4 <USB_EPStartXfer+0x184>
 8002374:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002378:	2b3e      	cmp	r3, #62	; 0x3e
 800237a:	b289      	uxth	r1, r1
 800237c:	f101 0102 	add.w	r1, r1, #2
 8002380:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002384:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002388:	d928      	bls.n	80023dc <USB_EPStartXfer+0x1bc>
 800238a:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800238e:	06da      	lsls	r2, r3, #27
 8002390:	bf04      	itt	eq
 8002392:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002396:	b290      	uxtheq	r0, r2
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <USB_EPStartXfer+0x1fc>)
 800239a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800239e:	b292      	uxth	r2, r2
 80023a0:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80023a4:	7872      	ldrb	r2, [r6, #1]
 80023a6:	7831      	ldrb	r1, [r6, #0]
 80023a8:	bb5a      	cbnz	r2, 8002402 <USB_EPStartXfer+0x1e2>
 80023aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80023ae:	2b3e      	cmp	r3, #62	; 0x3e
 80023b0:	b292      	uxth	r2, r2
 80023b2:	f102 0206 	add.w	r2, r2, #6
 80023b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80023ba:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80023be:	d915      	bls.n	80023ec <USB_EPStartXfer+0x1cc>
 80023c0:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80023c4:	06dc      	lsls	r4, r3, #27
 80023c6:	bf04      	itt	eq
 80023c8:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80023cc:	b299      	uxtheq	r1, r3
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <USB_EPStartXfer+0x1fc>)
 80023d0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80023da:	e7b3      	b.n	8002344 <USB_EPStartXfer+0x124>
 80023dc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80023e0:	07d8      	lsls	r0, r3, #31
 80023e2:	bf44      	itt	mi
 80023e4:	3201      	addmi	r2, #1
 80023e6:	b292      	uxthmi	r2, r2
 80023e8:	0292      	lsls	r2, r2, #10
 80023ea:	e7d8      	b.n	800239e <USB_EPStartXfer+0x17e>
 80023ec:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80023f0:	07db      	lsls	r3, r3, #31
 80023f2:	bf44      	itt	mi
 80023f4:	3101      	addmi	r1, #1
 80023f6:	b289      	uxthmi	r1, r1
 80023f8:	0289      	lsls	r1, r1, #10
 80023fa:	b289      	uxth	r1, r1
 80023fc:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002400:	e7a0      	b.n	8002344 <USB_EPStartXfer+0x124>
 8002402:	2a01      	cmp	r2, #1
 8002404:	d19e      	bne.n	8002344 <USB_EPStartXfer+0x124>
 8002406:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800240a:	b292      	uxth	r2, r2
 800240c:	3202      	adds	r2, #2
 800240e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002412:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002416:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 800241a:	e793      	b.n	8002344 <USB_EPStartXfer+0x124>
 800241c:	ffff8000 	.word	0xffff8000

08002420 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002420:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002422:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002424:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002426:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800242a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800242c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002430:	42a3      	cmp	r3, r4
 8002432:	d100      	bne.n	8002436 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002434:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002436:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800243a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800243e:	3401      	adds	r4, #1
 8002440:	e7f6      	b.n	8002430 <USB_ReadPMA+0x10>

08002442 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002442:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002446:	b11b      	cbz	r3, 8002450 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002448:	2000      	movs	r0, #0
 800244a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800244e:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002450:	2002      	movs	r0, #2
  }
}
 8002452:	4770      	bx	lr

08002454 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002454:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002458:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800245a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800245e:	b15b      	cbz	r3, 8002478 <USBD_CDC_EP0_RxReady+0x24>
 8002460:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002464:	28ff      	cmp	r0, #255	; 0xff
 8002466:	d007      	beq.n	8002478 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800246e:	4621      	mov	r1, r4
 8002470:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002472:	23ff      	movs	r3, #255	; 0xff
 8002474:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002478:	2000      	movs	r0, #0
 800247a:	bd10      	pop	{r4, pc}

0800247c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800247c:	2343      	movs	r3, #67	; 0x43
 800247e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002480:	4800      	ldr	r0, [pc, #0]	; (8002484 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002482:	4770      	bx	lr
 8002484:	2000003c 	.word	0x2000003c

08002488 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002488:	2343      	movs	r3, #67	; 0x43
 800248a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800248c:	4800      	ldr	r0, [pc, #0]	; (8002490 <USBD_CDC_GetHSCfgDesc+0x8>)
 800248e:	4770      	bx	lr
 8002490:	20000080 	.word	0x20000080

08002494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002494:	2343      	movs	r3, #67	; 0x43
 8002496:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002498:	4800      	ldr	r0, [pc, #0]	; (800249c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800249a:	4770      	bx	lr
 800249c:	200000d0 	.word	0x200000d0

080024a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80024a0:	230a      	movs	r3, #10
 80024a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80024a4:	4800      	ldr	r0, [pc, #0]	; (80024a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80024a6:	4770      	bx	lr
 80024a8:	200000c4 	.word	0x200000c4

080024ac <USBD_CDC_DataOut>:
{      
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024b0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80024b4:	f001 fcd0 	bl	8003e58 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80024b8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80024bc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80024c0:	b14b      	cbz	r3, 80024d6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80024c2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80024c6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80024d0:	4798      	blx	r3
    return USBD_OK;
 80024d2:	2000      	movs	r0, #0
 80024d4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80024d6:	2002      	movs	r0, #2
}
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080024dc <USBD_CDC_Setup>:
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024de:	780f      	ldrb	r7, [r1, #0]
{
 80024e0:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024e2:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80024e6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024e8:	d023      	beq.n	8002532 <USBD_CDC_Setup+0x56>
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d119      	bne.n	8002522 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80024ee:	88ca      	ldrh	r2, [r1, #6]
 80024f0:	784b      	ldrb	r3, [r1, #1]
 80024f2:	b1c2      	cbz	r2, 8002526 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80024f4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024f6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80024fa:	d50b      	bpl.n	8002514 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80024fc:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002500:	4618      	mov	r0, r3
 8002502:	688f      	ldr	r7, [r1, #8]
 8002504:	4629      	mov	r1, r5
 8002506:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002508:	4629      	mov	r1, r5
 800250a:	4630      	mov	r0, r6
 800250c:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 800250e:	f000 fb72 	bl	8002bf6 <USBD_CtlSendData>
      break;
 8002512:	e006      	b.n	8002522 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002514:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002518:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800251c:	4629      	mov	r1, r5
 800251e:	f000 fb7f 	bl	8002c20 <USBD_CtlPrepareRx>
}
 8002522:	2000      	movs	r0, #0
 8002524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002526:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800252a:	6884      	ldr	r4, [r0, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	47a0      	blx	r4
 8002530:	e7f7      	b.n	8002522 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002532:	784b      	ldrb	r3, [r1, #1]
 8002534:	2b0a      	cmp	r3, #10
 8002536:	d1f4      	bne.n	8002522 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002538:	2201      	movs	r2, #1
 800253a:	4901      	ldr	r1, [pc, #4]	; (8002540 <USBD_CDC_Setup+0x64>)
 800253c:	e7e7      	b.n	800250e <USBD_CDC_Setup+0x32>
 800253e:	bf00      	nop
 8002540:	20000198 	.word	0x20000198

08002544 <USBD_CDC_DeInit>:
{
 8002544:	b510      	push	{r4, lr}
 8002546:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002548:	2181      	movs	r1, #129	; 0x81
 800254a:	f001 fc21 	bl	8003d90 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800254e:	2101      	movs	r1, #1
 8002550:	4620      	mov	r0, r4
 8002552:	f001 fc1d 	bl	8003d90 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002556:	2182      	movs	r1, #130	; 0x82
 8002558:	4620      	mov	r0, r4
 800255a:	f001 fc19 	bl	8003d90 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800255e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002562:	b153      	cbz	r3, 800257a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002564:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800256c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002570:	f001 fc7c 	bl	8003e6c <USBD_static_free>
    pdev->pClassData = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800257a:	2000      	movs	r0, #0
 800257c:	bd10      	pop	{r4, pc}

0800257e <USBD_CDC_Init>:
{
 800257e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002580:	7c03      	ldrb	r3, [r0, #16]
{
 8002582:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002584:	bb7b      	cbnz	r3, 80025e6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800258a:	2202      	movs	r2, #2
 800258c:	2181      	movs	r1, #129	; 0x81
 800258e:	f001 fbef 	bl	8003d70 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002592:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002596:	2202      	movs	r2, #2
 8002598:	2101      	movs	r1, #1
 800259a:	4620      	mov	r0, r4
 800259c:	f001 fbe8 	bl	8003d70 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80025a0:	2308      	movs	r3, #8
 80025a2:	2203      	movs	r2, #3
 80025a4:	2182      	movs	r1, #130	; 0x82
 80025a6:	4620      	mov	r0, r4
 80025a8:	f001 fbe2 	bl	8003d70 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80025ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80025b0:	f001 fc58 	bl	8003e64 <USBD_static_malloc>
 80025b4:	4606      	mov	r6, r0
 80025b6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80025ba:	b320      	cbz	r0, 8002606 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 80025bc:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80025be:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80025c6:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80025c8:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80025cc:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80025d0:	b987      	cbnz	r7, 80025f4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80025d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80025da:	2101      	movs	r1, #1
 80025dc:	4620      	mov	r0, r4
 80025de:	f001 fc2d 	bl	8003e3c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80025e2:	4638      	mov	r0, r7
 80025e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	2202      	movs	r2, #2
 80025ea:	2181      	movs	r1, #129	; 0x81
 80025ec:	f001 fbc0 	bl	8003d70 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80025f0:	2340      	movs	r3, #64	; 0x40
 80025f2:	e7d0      	b.n	8002596 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80025f4:	2340      	movs	r3, #64	; 0x40
 80025f6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80025fa:	2101      	movs	r1, #1
 80025fc:	4620      	mov	r0, r4
 80025fe:	f001 fc1d 	bl	8003e3c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002602:	4628      	mov	r0, r5
 8002604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002606:	2001      	movs	r0, #1
}
 8002608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800260a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800260a:	b119      	cbz	r1, 8002614 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800260c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002610:	2000      	movs	r0, #0
 8002612:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002614:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002616:	4770      	bx	lr

08002618 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002618:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800261c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800261e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002622:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002626:	4770      	bx	lr

08002628 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002628:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800262c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800262e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002632:	4770      	bx	lr

08002634 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002634:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002638:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800263a:	b162      	cbz	r2, 8002656 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800263c:	7c04      	ldrb	r4, [r0, #16]
 800263e:	b944      	cbnz	r4, 8002652 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002644:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002648:	2101      	movs	r1, #1
 800264a:	f001 fbf7 	bl	8003e3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800264e:	2000      	movs	r0, #0
 8002650:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	e7f6      	b.n	8002644 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002656:	2002      	movs	r0, #2
  }
}
 8002658:	bd10      	pop	{r4, pc}

0800265a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800265a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800265c:	b180      	cbz	r0, 8002680 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800265e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002662:	b113      	cbz	r3, 800266a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800266a:	b109      	cbz	r1, 8002670 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800266c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002670:	2301      	movs	r3, #1
  pdev->id = id;
 8002672:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002674:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002678:	f001 fb2c 	bl	8003cd4 <USBD_LL_Init>
  
  return USBD_OK; 
 800267c:	2000      	movs	r0, #0
 800267e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002680:	2002      	movs	r0, #2
}
 8002682:	bd08      	pop	{r3, pc}

08002684 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002684:	b119      	cbz	r1, 800268e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002686:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800268a:	2000      	movs	r0, #0
 800268c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800268e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002690:	4770      	bx	lr

08002692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002692:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002694:	f001 fb5e 	bl	8003d54 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002698:	2000      	movs	r0, #0
 800269a:	bd08      	pop	{r3, pc}

0800269c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800269c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800269e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026a2:	b90b      	cbnz	r3, 80026a8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80026a4:	2002      	movs	r0, #2
 80026a6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4798      	blx	r3
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d1f9      	bne.n	80026a4 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80026b0:	bd08      	pop	{r3, pc}

080026b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80026b2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80026b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4798      	blx	r3
  return USBD_OK;
}
 80026bc:	2000      	movs	r0, #0
 80026be:	bd08      	pop	{r3, pc}

080026c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80026c0:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80026c2:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80026c6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80026c8:	4628      	mov	r0, r5
 80026ca:	f000 fa64 	bl	8002b96 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80026ce:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80026d0:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80026d4:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80026d8:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80026dc:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80026e0:	f001 031f 	and.w	r3, r1, #31
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d00e      	beq.n	8002706 <USBD_LL_SetupStage+0x46>
 80026e8:	d307      	bcc.n	80026fa <USBD_LL_SetupStage+0x3a>
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d010      	beq.n	8002710 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80026ee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80026f2:	4620      	mov	r0, r4
 80026f4:	f001 fb5a 	bl	8003dac <USBD_LL_StallEP>
    break;
 80026f8:	e003      	b.n	8002702 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80026fa:	4629      	mov	r1, r5
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 f8d5 	bl	80028ac <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002702:	2000      	movs	r0, #0
 8002704:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002706:	4629      	mov	r1, r5
 8002708:	4620      	mov	r0, r4
 800270a:	f000 f9c9 	bl	8002aa0 <USBD_StdItfReq>
    break;
 800270e:	e7f8      	b.n	8002702 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002710:	4629      	mov	r1, r5
 8002712:	4620      	mov	r0, r4
 8002714:	f000 f9dc 	bl	8002ad0 <USBD_StdEPReq>
    break;
 8002718:	e7f3      	b.n	8002702 <USBD_LL_SetupStage+0x42>

0800271a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800271a:	b538      	push	{r3, r4, r5, lr}
 800271c:	4604      	mov	r4, r0
 800271e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002720:	bb11      	cbnz	r1, 8002768 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002722:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002726:	2b03      	cmp	r3, #3
 8002728:	d10f      	bne.n	800274a <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800272a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800272e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002732:	4293      	cmp	r3, r2
 8002734:	d90b      	bls.n	800274e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002736:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002738:	429a      	cmp	r2, r3
 800273a:	bf28      	it	cs
 800273c:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800273e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002742:	b292      	uxth	r2, r2
 8002744:	4629      	mov	r1, r5
 8002746:	f000 fa7a 	bl	8002c3e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800274a:	2000      	movs	r0, #0
 800274c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800274e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b123      	cbz	r3, 8002760 <USBD_LL_DataOutStage+0x46>
 8002756:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800275a:	2a03      	cmp	r2, #3
 800275c:	d100      	bne.n	8002760 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800275e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002760:	4620      	mov	r0, r4
 8002762:	f000 fa74 	bl	8002c4e <USBD_CtlSendStatus>
 8002766:	e7f0      	b.n	800274a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002768:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0eb      	beq.n	800274a <USBD_LL_DataOutStage+0x30>
 8002772:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002776:	2a03      	cmp	r2, #3
 8002778:	d1e7      	bne.n	800274a <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800277a:	4798      	blx	r3
 800277c:	e7e5      	b.n	800274a <USBD_LL_DataOutStage+0x30>

0800277e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800277e:	b570      	push	{r4, r5, r6, lr}
 8002780:	4613      	mov	r3, r2
 8002782:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002784:	460e      	mov	r6, r1
 8002786:	2900      	cmp	r1, #0
 8002788:	d13d      	bne.n	8002806 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800278a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800278e:	2a02      	cmp	r2, #2
 8002790:	d10f      	bne.n	80027b2 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002792:	69c5      	ldr	r5, [r0, #28]
 8002794:	6a02      	ldr	r2, [r0, #32]
 8002796:	4295      	cmp	r5, r2
 8002798:	d914      	bls.n	80027c4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800279a:	1aaa      	subs	r2, r5, r2
 800279c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800279e:	4619      	mov	r1, r3
 80027a0:	b292      	uxth	r2, r2
 80027a2:	f000 fa35 	bl	8002c10 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80027a6:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80027a8:	461a      	mov	r2, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	4620      	mov	r0, r4
 80027ae:	f001 fb45 	bl	8003e3c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80027b2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80027c0:	2000      	movs	r0, #0
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80027c4:	6983      	ldr	r3, [r0, #24]
 80027c6:	fbb3 f5f2 	udiv	r5, r3, r2
 80027ca:	fb02 3515 	mls	r5, r2, r5, r3
 80027ce:	b965      	cbnz	r5, 80027ea <USBD_LL_DataInStage+0x6c>
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d80a      	bhi.n	80027ea <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80027d4:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80027d8:	4293      	cmp	r3, r2
 80027da:	d206      	bcs.n	80027ea <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80027dc:	462a      	mov	r2, r5
 80027de:	f000 fa17 	bl	8002c10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80027e2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80027e6:	462b      	mov	r3, r5
 80027e8:	e7de      	b.n	80027a8 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80027ea:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	b12b      	cbz	r3, 80027fe <USBD_LL_DataInStage+0x80>
 80027f2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80027f6:	2a03      	cmp	r2, #3
 80027f8:	d101      	bne.n	80027fe <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80027fa:	4620      	mov	r0, r4
 80027fc:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 fa30 	bl	8002c64 <USBD_CtlReceiveStatus>
 8002804:	e7d5      	b.n	80027b2 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002806:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0d7      	beq.n	80027c0 <USBD_LL_DataInStage+0x42>
 8002810:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002814:	2a03      	cmp	r2, #3
 8002816:	d1d3      	bne.n	80027c0 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002818:	4798      	blx	r3
 800281a:	e7d1      	b.n	80027c0 <USBD_LL_DataInStage+0x42>

0800281c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800281c:	2200      	movs	r2, #0
{
 800281e:	b538      	push	{r3, r4, r5, lr}
 8002820:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002822:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002824:	4611      	mov	r1, r2
 8002826:	2340      	movs	r3, #64	; 0x40
 8002828:	f001 faa2 	bl	8003d70 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800282c:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800282e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002832:	2200      	movs	r2, #0
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	4620      	mov	r0, r4
 8002838:	f001 fa9a 	bl	8003d70 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800283c:	2301      	movs	r3, #1
 800283e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002842:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002846:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002848:	b12b      	cbz	r3, 8002856 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800284a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800284e:	7921      	ldrb	r1, [r4, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4620      	mov	r0, r4
 8002854:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002856:	2000      	movs	r0, #0
 8002858:	bd38      	pop	{r3, r4, r5, pc}

0800285a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800285a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800285c:	2000      	movs	r0, #0
 800285e:	4770      	bx	lr

08002860 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002860:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002864:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002868:	2304      	movs	r3, #4
 800286a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800286e:	2000      	movs	r0, #0
 8002870:	4770      	bx	lr

08002872 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002872:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002876:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800287a:	2000      	movs	r0, #0
 800287c:	4770      	bx	lr

0800287e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800287e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002880:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002884:	2a03      	cmp	r2, #3
 8002886:	d104      	bne.n	8002892 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002888:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	b103      	cbz	r3, 8002892 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002890:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd08      	pop	{r3, pc}

08002896 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002896:	b510      	push	{r4, lr}
 8002898:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	f001 fa86 	bl	8003dac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80028a0:	4620      	mov	r0, r4
}
 80028a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80028a6:	2100      	movs	r1, #0
 80028a8:	f001 ba80 	b.w	8003dac <USBD_LL_StallEP>

080028ac <USBD_StdDevReq>:
{
 80028ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80028ae:	784b      	ldrb	r3, [r1, #1]
{
 80028b0:	4604      	mov	r4, r0
 80028b2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	d879      	bhi.n	80029ac <USBD_StdDevReq+0x100>
 80028b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028bc:	00e500c9 	.word	0x00e500c9
 80028c0:	00d90078 	.word	0x00d90078
 80028c4:	006d0078 	.word	0x006d0078
 80028c8:	0078000a 	.word	0x0078000a
 80028cc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80028d0:	884b      	ldrh	r3, [r1, #2]
 80028d2:	0a1a      	lsrs	r2, r3, #8
 80028d4:	3a01      	subs	r2, #1
 80028d6:	2a06      	cmp	r2, #6
 80028d8:	d868      	bhi.n	80029ac <USBD_StdDevReq+0x100>
 80028da:	e8df f002 	tbb	[pc, r2]
 80028de:	1c04      	.short	0x1c04
 80028e0:	49676729 	.word	0x49676729
 80028e4:	52          	.byte	0x52
 80028e5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80028e6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80028ea:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80028ec:	f10d 0106 	add.w	r1, sp, #6
 80028f0:	7c20      	ldrb	r0, [r4, #16]
 80028f2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80028f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d067      	beq.n	80029cc <USBD_StdDevReq+0x120>
 80028fc:	88eb      	ldrh	r3, [r5, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d064      	beq.n	80029cc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002902:	429a      	cmp	r2, r3
 8002904:	bf28      	it	cs
 8002906:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002908:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800290a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800290e:	4620      	mov	r0, r4
 8002910:	f000 f971 	bl	8002bf6 <USBD_CtlSendData>
 8002914:	e05a      	b.n	80029cc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002916:	7c02      	ldrb	r2, [r0, #16]
 8002918:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800291c:	b932      	cbnz	r2, 800292c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002920:	f10d 0006 	add.w	r0, sp, #6
 8002924:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002926:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002928:	7043      	strb	r3, [r0, #1]
 800292a:	e7e3      	b.n	80028f4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	e7f7      	b.n	8002920 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d83a      	bhi.n	80029ac <USBD_StdDevReq+0x100>
 8002936:	e8df f003 	tbb	[pc, r3]
 800293a:	0703      	.short	0x0703
 800293c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002940:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	e7d1      	b.n	80028ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002948:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	e7cd      	b.n	80028ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002950:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	e7c9      	b.n	80028ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002958:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	e7c5      	b.n	80028ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002960:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	e7c1      	b.n	80028ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002968:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	e7bd      	b.n	80028ec <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002970:	7c03      	ldrb	r3, [r0, #16]
 8002972:	b9db      	cbnz	r3, 80029ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002974:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002978:	f10d 0006 	add.w	r0, sp, #6
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4798      	blx	r3
 8002980:	e7b8      	b.n	80028f4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002982:	7c03      	ldrb	r3, [r0, #16]
 8002984:	b993      	cbnz	r3, 80029ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002986:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800298a:	f10d 0006 	add.w	r0, sp, #6
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002992:	2307      	movs	r3, #7
 8002994:	e7c8      	b.n	8002928 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002996:	888b      	ldrh	r3, [r1, #4]
 8002998:	b943      	cbnz	r3, 80029ac <USBD_StdDevReq+0x100>
 800299a:	88cb      	ldrh	r3, [r1, #6]
 800299c:	b933      	cbnz	r3, 80029ac <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800299e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80029a2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80029a4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80029a6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80029aa:	d103      	bne.n	80029b4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff ff72 	bl	8002896 <USBD_CtlError.constprop.0>
    break;
 80029b2:	e00b      	b.n	80029cc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80029b4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80029b8:	4629      	mov	r1, r5
 80029ba:	f001 fa23 	bl	8003e04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 f945 	bl	8002c4e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80029c4:	b12d      	cbz	r5, 80029d2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80029c6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80029c8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80029cc:	2000      	movs	r0, #0
 80029ce:	b003      	add	sp, #12
 80029d0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80029d2:	2301      	movs	r3, #1
 80029d4:	e7f8      	b.n	80029c8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80029d6:	7889      	ldrb	r1, [r1, #2]
 80029d8:	4d30      	ldr	r5, [pc, #192]	; (8002a9c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80029da:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80029dc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80029de:	d8e5      	bhi.n	80029ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80029e0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d00c      	beq.n	8002a02 <USBD_StdDevReq+0x156>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d1df      	bne.n	80029ac <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80029ec:	b9b1      	cbnz	r1, 8002a1c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80029ee:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80029f0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80029f2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80029f6:	f7ff fe5c 	bl	80026b2 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80029fa:	4620      	mov	r0, r4
 80029fc:	f000 f927 	bl	8002c4e <USBD_CtlSendStatus>
 8002a00:	e7e4      	b.n	80029cc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002a02:	2900      	cmp	r1, #0
 8002a04:	d0f9      	beq.n	80029fa <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002a06:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002a08:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002a0a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002a0c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff fe43 	bl	800269c <USBD_SetClassConfig>
 8002a16:	2802      	cmp	r0, #2
 8002a18:	d1ef      	bne.n	80029fa <USBD_StdDevReq+0x14e>
 8002a1a:	e7c7      	b.n	80029ac <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002a1c:	6841      	ldr	r1, [r0, #4]
 8002a1e:	2901      	cmp	r1, #1
 8002a20:	d0eb      	beq.n	80029fa <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002a22:	b2c9      	uxtb	r1, r1
 8002a24:	f7ff fe45 	bl	80026b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002a28:	7829      	ldrb	r1, [r5, #0]
 8002a2a:	6061      	str	r1, [r4, #4]
 8002a2c:	e7f0      	b.n	8002a10 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002a2e:	88ca      	ldrh	r2, [r1, #6]
 8002a30:	2a01      	cmp	r2, #1
 8002a32:	d1bb      	bne.n	80029ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002a34:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d003      	beq.n	8002a44 <USBD_StdDevReq+0x198>
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d1b5      	bne.n	80029ac <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002a40:	1d01      	adds	r1, r0, #4
 8002a42:	e764      	b.n	800290e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002a44:	4601      	mov	r1, r0
 8002a46:	2300      	movs	r3, #0
 8002a48:	f841 3f08 	str.w	r3, [r1, #8]!
 8002a4c:	e75f      	b.n	800290e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002a4e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a52:	3b02      	subs	r3, #2
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d8a9      	bhi.n	80029ac <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002a58:	2301      	movs	r3, #1
 8002a5a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002a5c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002a60:	b10b      	cbz	r3, 8002a66 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002a62:	2303      	movs	r3, #3
 8002a64:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002a66:	2202      	movs	r2, #2
 8002a68:	f104 010c 	add.w	r1, r4, #12
 8002a6c:	e74f      	b.n	800290e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a6e:	884b      	ldrh	r3, [r1, #2]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d1ab      	bne.n	80029cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002a74:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002a78:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4620      	mov	r0, r4
 8002a82:	4798      	blx	r3
 8002a84:	e7b9      	b.n	80029fa <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002a86:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a8a:	3b02      	subs	r3, #2
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d88d      	bhi.n	80029ac <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002a90:	884b      	ldrh	r3, [r1, #2]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d19a      	bne.n	80029cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002a96:	2300      	movs	r3, #0
 8002a98:	e7ec      	b.n	8002a74 <USBD_StdDevReq+0x1c8>
 8002a9a:	bf00      	nop
 8002a9c:	20000199 	.word	0x20000199

08002aa0 <USBD_StdItfReq>:
{
 8002aa0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002aa2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002aa6:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002aa8:	2b03      	cmp	r3, #3
{
 8002aaa:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002aac:	d10d      	bne.n	8002aca <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002aae:	790b      	ldrb	r3, [r1, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d80a      	bhi.n	8002aca <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002ab4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002abc:	88eb      	ldrh	r3, [r5, #6]
 8002abe:	b913      	cbnz	r3, 8002ac6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f000 f8c4 	bl	8002c4e <USBD_CtlSendStatus>
}
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002aca:	f7ff fee4 	bl	8002896 <USBD_CtlError.constprop.0>
    break;
 8002ace:	e7fa      	b.n	8002ac6 <USBD_StdItfReq+0x26>

08002ad0 <USBD_StdEPReq>:
{
 8002ad0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002ad2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002ad4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002ad6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002ada:	2a20      	cmp	r2, #32
{
 8002adc:	4604      	mov	r4, r0
 8002ade:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002ae0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002ae2:	d105      	bne.n	8002af0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002ae4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4798      	blx	r3
}
 8002aec:	2000      	movs	r0, #0
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002af0:	784a      	ldrb	r2, [r1, #1]
 8002af2:	2a01      	cmp	r2, #1
 8002af4:	d01c      	beq.n	8002b30 <USBD_StdEPReq+0x60>
 8002af6:	d32a      	bcc.n	8002b4e <USBD_StdEPReq+0x7e>
 8002af8:	2a03      	cmp	r2, #3
 8002afa:	d1f7      	bne.n	8002aec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002afc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b00:	2a02      	cmp	r2, #2
 8002b02:	d040      	beq.n	8002b86 <USBD_StdEPReq+0xb6>
 8002b04:	2a03      	cmp	r2, #3
 8002b06:	d002      	beq.n	8002b0e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002b08:	f7ff fec5 	bl	8002896 <USBD_CtlError.constprop.0>
      break;
 8002b0c:	e7ee      	b.n	8002aec <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002b0e:	884a      	ldrh	r2, [r1, #2]
 8002b10:	b922      	cbnz	r2, 8002b1c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002b12:	065e      	lsls	r6, r3, #25
 8002b14:	d002      	beq.n	8002b1c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002b16:	4619      	mov	r1, r3
 8002b18:	f001 f948 	bl	8003dac <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002b1c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002b20:	4629      	mov	r1, r5
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4620      	mov	r0, r4
 8002b26:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f890 	bl	8002c4e <USBD_CtlSendStatus>
 8002b2e:	e7dd      	b.n	8002aec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002b30:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b34:	2a02      	cmp	r2, #2
 8002b36:	d026      	beq.n	8002b86 <USBD_StdEPReq+0xb6>
 8002b38:	2a03      	cmp	r2, #3
 8002b3a:	d1e5      	bne.n	8002b08 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002b3c:	884a      	ldrh	r2, [r1, #2]
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d1d4      	bne.n	8002aec <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002b42:	0659      	lsls	r1, r3, #25
 8002b44:	d0f0      	beq.n	8002b28 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002b46:	4619      	mov	r1, r3
 8002b48:	f001 f93e 	bl	8003dc8 <USBD_LL_ClearStallEP>
 8002b4c:	e7e6      	b.n	8002b1c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002b4e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b52:	2a02      	cmp	r2, #2
 8002b54:	d017      	beq.n	8002b86 <USBD_StdEPReq+0xb6>
 8002b56:	2a03      	cmp	r2, #3
 8002b58:	d1d6      	bne.n	8002b08 <USBD_StdEPReq+0x38>
 8002b5a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002b5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002b62:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002b66:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002b68:	bf14      	ite	ne
 8002b6a:	3514      	addne	r5, #20
 8002b6c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002b70:	f001 f938 	bl	8003de4 <USBD_LL_IsStallEP>
 8002b74:	b168      	cbz	r0, 8002b92 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002b76:	2301      	movs	r3, #1
 8002b78:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 f839 	bl	8002bf6 <USBD_CtlSendData>
      break;
 8002b84:	e7b2      	b.n	8002aec <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002b86:	065a      	lsls	r2, r3, #25
 8002b88:	d0b0      	beq.n	8002aec <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f001 f90e 	bl	8003dac <USBD_LL_StallEP>
 8002b90:	e7ac      	b.n	8002aec <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002b92:	6028      	str	r0, [r5, #0]
 8002b94:	e7f1      	b.n	8002b7a <USBD_StdEPReq+0xaa>

08002b96 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002b96:	780b      	ldrb	r3, [r1, #0]
 8002b98:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002b9a:	784b      	ldrb	r3, [r1, #1]
 8002b9c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002b9e:	78ca      	ldrb	r2, [r1, #3]
 8002ba0:	788b      	ldrb	r3, [r1, #2]
 8002ba2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002ba6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002ba8:	794a      	ldrb	r2, [r1, #5]
 8002baa:	790b      	ldrb	r3, [r1, #4]
 8002bac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bb0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002bb2:	79ca      	ldrb	r2, [r1, #7]
 8002bb4:	798b      	ldrb	r3, [r1, #6]
 8002bb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bba:	80c3      	strh	r3, [r0, #6]
 8002bbc:	4770      	bx	lr

08002bbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002bbe:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002bc0:	b188      	cbz	r0, 8002be6 <USBD_GetString+0x28>
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002bc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2c00      	cmp	r4, #0
 8002bce:	d1f9      	bne.n	8002bc4 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002bd6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	704b      	strb	r3, [r1, #1]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002be0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002be4:	b905      	cbnz	r5, 8002be8 <USBD_GetString+0x2a>
 8002be6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	54cd      	strb	r5, [r1, r3]
 8002bec:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002bee:	3302      	adds	r3, #2
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	548c      	strb	r4, [r1, r2]
 8002bf4:	e7f4      	b.n	8002be0 <USBD_GetString+0x22>

08002bf6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002bf6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002bf8:	2202      	movs	r2, #2
{
 8002bfa:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002bfc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002c00:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002c02:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002c04:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002c06:	2100      	movs	r1, #0
 8002c08:	f001 f90a 	bl	8003e20 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002c10:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002c12:	4613      	mov	r3, r2
 8002c14:	460a      	mov	r2, r1
 8002c16:	2100      	movs	r1, #0
 8002c18:	f001 f902 	bl	8003e20 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	bd08      	pop	{r3, pc}

08002c20 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002c20:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002c22:	2203      	movs	r2, #3
{
 8002c24:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002c26:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002c2a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002c2e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002c30:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002c34:	2100      	movs	r1, #0
 8002c36:	f001 f901 	bl	8003e3c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	bd10      	pop	{r4, pc}

08002c3e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002c3e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002c40:	4613      	mov	r3, r2
 8002c42:	460a      	mov	r2, r1
 8002c44:	2100      	movs	r1, #0
 8002c46:	f001 f8f9 	bl	8003e3c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	bd08      	pop	{r3, pc}

08002c4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002c4e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002c50:	2304      	movs	r3, #4
 8002c52:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002c56:	2300      	movs	r3, #0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f001 f8e0 	bl	8003e20 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002c60:	2000      	movs	r0, #0
 8002c62:	bd08      	pop	{r3, pc}

08002c64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002c64:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002c66:	2305      	movs	r3, #5
 8002c68:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	f001 f8e3 	bl	8003e3c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd08      	pop	{r3, pc}

08002c7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c7a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002c7c:	f000 fb90 	bl	80033a0 <vTaskStartScheduler>
  
  return osOK;
}
 8002c80:	2000      	movs	r0, #0
 8002c82:	bd08      	pop	{r3, pc}

08002c84 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c84:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c86:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8002c8a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002c8c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c8e:	bf08      	it	eq
 8002c90:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c92:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8002c94:	bf18      	it	ne
 8002c96:	3403      	addne	r4, #3
{
 8002c98:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c9a:	e890 0022 	ldmia.w	r0, {r1, r5}
 8002c9e:	a803      	add	r0, sp, #12
 8002ca0:	9001      	str	r0, [sp, #4]
 8002ca2:	9400      	str	r4, [sp, #0]
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f000 faab 	bl	8003200 <xTaskCreate>
 8002caa:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8002cac:	bf14      	ite	ne
 8002cae:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8002cb0:	9803      	ldreq	r0, [sp, #12]
}
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bd30      	pop	{r4, r5, pc}

08002cb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002cb6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	bf08      	it	eq
 8002cbc:	2001      	moveq	r0, #1
 8002cbe:	f000 fcbd 	bl	800363c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	bd08      	pop	{r3, pc}

08002cc6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc6:	f100 0308 	add.w	r3, r0, #8
 8002cca:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cd6:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd8:	6003      	str	r3, [r0, #0]
 8002cda:	4770      	bx	lr

08002cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6103      	str	r3, [r0, #16]
 8002ce0:	4770      	bx	lr

08002ce2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce2:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ce4:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002ce6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ce8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cee:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002cf0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cf2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6003      	str	r3, [r0, #0]
 8002cf8:	4770      	bx	lr

08002cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cfa:	680a      	ldr	r2, [r1, #0]
{
 8002cfc:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cfe:	1c53      	adds	r3, r2, #1
 8002d00:	d10a      	bne.n	8002d18 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d02:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d08:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d0a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d0c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d0e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d10:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002d12:	3301      	adds	r3, #1
 8002d14:	6003      	str	r3, [r0, #0]
 8002d16:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	f100 0308 	add.w	r3, r0, #8
 8002d1c:	685c      	ldr	r4, [r3, #4]
 8002d1e:	6825      	ldr	r5, [r4, #0]
 8002d20:	42aa      	cmp	r2, r5
 8002d22:	d3ef      	bcc.n	8002d04 <vListInsert+0xa>
 8002d24:	4623      	mov	r3, r4
 8002d26:	e7f9      	b.n	8002d1c <vListInsert+0x22>

08002d28 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d28:	6841      	ldr	r1, [r0, #4]
 8002d2a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d2c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d2e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d30:	6882      	ldr	r2, [r0, #8]
 8002d32:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d38:	bf08      	it	eq
 8002d3a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	3801      	subs	r0, #1
 8002d44:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002d46:	4770      	bx	lr

08002d48 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <prvTaskExitError+0x2c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	d008      	beq.n	8002d62 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	e7fe      	b.n	8002d60 <prvTaskExitError+0x18>
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	e7fe      	b.n	8002d72 <prvTaskExitError+0x2a>
 8002d74:	20000114 	.word	0x20000114

08002d78 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d78:	4806      	ldr	r0, [pc, #24]	; (8002d94 <prvPortStartFirstTask+0x1c>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f380 8808 	msr	MSP, r0
 8002d82:	b662      	cpsie	i
 8002d84:	b661      	cpsie	f
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	df00      	svc	0
 8002d90:	bf00      	nop
 8002d92:	0000      	.short	0x0000
 8002d94:	e000ed08 	.word	0xe000ed08

08002d98 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002da2:	f021 0101 	bic.w	r1, r1, #1
 8002da6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002daa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002dae:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002db2:	3840      	subs	r0, #64	; 0x40
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08002d49 	.word	0x08002d49
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <SVC_Handler>:
	__asm volatile (
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <pxCurrentTCBConst2>)
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	6808      	ldr	r0, [r1, #0]
 8002dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dca:	f380 8809 	msr	PSP, r0
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f380 8811 	msr	BASEPRI, r0
 8002dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8002dde:	4770      	bx	lr

08002de0 <pxCurrentTCBConst2>:
 8002de0:	20001928 	.word	0x20001928

08002de4 <vPortEnterCritical>:
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <vPortEnterCritical+0x3c>)
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002dfa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002dfc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002dfe:	d10d      	bne.n	8002e1c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <vPortEnterCritical+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e08:	d008      	beq.n	8002e1c <vPortEnterCritical+0x38>
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	e7fe      	b.n	8002e1a <vPortEnterCritical+0x36>
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000114 	.word	0x20000114
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <vPortExitCritical+0x24>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	b943      	cbnz	r3, 8002e40 <vPortExitCritical+0x18>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	e7fe      	b.n	8002e3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002e40:	3b01      	subs	r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e44:	b90b      	cbnz	r3, 8002e4a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	4770      	bx	lr
 8002e4c:	20000114 	.word	0x20000114

08002e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e50:	f3ef 8009 	mrs	r0, PSP
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <pxCurrentTCBConst>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e60:	6010      	str	r0, [r2, #0]
 8002e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e6a:	f380 8811 	msr	BASEPRI, r0
 8002e6e:	f000 fc43 	bl	80036f8 <vTaskSwitchContext>
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8811 	msr	BASEPRI, r0
 8002e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	6808      	ldr	r0, [r1, #0]
 8002e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e86:	f380 8809 	msr	PSP, r0
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	4770      	bx	lr

08002e90 <pxCurrentTCBConst>:
 8002e90:	20001928 	.word	0x20001928

08002e94 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e94:	b508      	push	{r3, lr}
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ea6:	f000 fabf 	bl	8003428 <xTaskIncrementTick>
 8002eaa:	b118      	cbz	r0, 8002eb4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <SysTick_Handler+0x28>)
 8002eb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	bd08      	pop	{r3, pc}
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <vPortSetupTimerInterrupt+0x1c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <vPortSetupTimerInterrupt+0x20>)
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <vPortSetupTimerInterrupt+0x24>)
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000118 	.word	0x20000118
 8002ee0:	e000e014 	.word	0xe000e014
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <xPortStartScheduler>:
{
 8002ee8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eec:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ef8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <xPortStartScheduler+0x88>)
 8002f10:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002f16:	1e54      	subs	r4, r2, #1
 8002f18:	0600      	lsls	r0, r0, #24
 8002f1a:	d41c      	bmi.n	8002f56 <xPortStartScheduler+0x6e>
 8002f1c:	b101      	cbz	r1, 8002f20 <xPortStartScheduler+0x38>
 8002f1e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f24:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002f28:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f2a:	9b01      	ldr	r3, [sp, #4]
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <xPortStartScheduler+0x80>)
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <xPortStartScheduler+0x8c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f3a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f42:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002f44:	f7ff ffbc 	bl	8002ec0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <xPortStartScheduler+0x90>)
 8002f4c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8002f4e:	f7ff ff13 	bl	8002d78 <prvPortStartFirstTask>
	prvTaskExitError();
 8002f52:	f7ff fef9 	bl	8002d48 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f56:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	0052      	lsls	r2, r2, #1
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f88d 2003 	strb.w	r2, [sp, #3]
 8002f64:	4622      	mov	r2, r4
 8002f66:	e7d4      	b.n	8002f12 <xPortStartScheduler+0x2a>
 8002f68:	e000e400 	.word	0xe000e400
 8002f6c:	2000019a 	.word	0x2000019a
 8002f70:	2000019c 	.word	0x2000019c
 8002f74:	e000ed20 	.word	0xe000ed20
 8002f78:	20000114 	.word	0x20000114

08002f7c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f7c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <prvInsertBlockIntoFreeList+0x40>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4282      	cmp	r2, r0
 8002f84:	d318      	bcc.n	8002fb8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f86:	685c      	ldr	r4, [r3, #4]
 8002f88:	1919      	adds	r1, r3, r4
 8002f8a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f8c:	bf01      	itttt	eq
 8002f8e:	6841      	ldreq	r1, [r0, #4]
 8002f90:	4618      	moveq	r0, r3
 8002f92:	1909      	addeq	r1, r1, r4
 8002f94:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f96:	6844      	ldr	r4, [r0, #4]
 8002f98:	1901      	adds	r1, r0, r4
 8002f9a:	428a      	cmp	r2, r1
 8002f9c:	d107      	bne.n	8002fae <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <prvInsertBlockIntoFreeList+0x44>)
 8002fa0:	6809      	ldr	r1, [r1, #0]
 8002fa2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fa4:	bf1f      	itttt	ne
 8002fa6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fa8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002faa:	1909      	addne	r1, r1, r4
 8002fac:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002fae:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fb0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fb2:	bf18      	it	ne
 8002fb4:	6018      	strne	r0, [r3, #0]
 8002fb6:	bd10      	pop	{r4, pc}
 8002fb8:	4613      	mov	r3, r2
 8002fba:	e7e1      	b.n	8002f80 <prvInsertBlockIntoFreeList+0x4>
 8002fbc:	20001920 	.word	0x20001920
 8002fc0:	200001a0 	.word	0x200001a0

08002fc4 <pvPortMalloc>:
{
 8002fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002fca:	f000 fa25 	bl	8003418 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002fce:	493d      	ldr	r1, [pc, #244]	; (80030c4 <pvPortMalloc+0x100>)
 8002fd0:	4d3d      	ldr	r5, [pc, #244]	; (80030c8 <pvPortMalloc+0x104>)
 8002fd2:	680b      	ldr	r3, [r1, #0]
 8002fd4:	b9fb      	cbnz	r3, 8003016 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	; (80030cc <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002fd8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fda:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fdc:	bf0f      	iteee	eq
 8002fde:	f241 7370 	movweq	r3, #6000	; 0x1770
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fe2:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fe4:	4b3a      	ldrne	r3, [pc, #232]	; (80030d0 <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fe6:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fea:	bf18      	it	ne
 8002fec:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fee:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ff0:	4e38      	ldr	r6, [pc, #224]	; (80030d4 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8002ff2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ff4:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002ff8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ffa:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002ffc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ffe:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003000:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003002:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003004:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003008:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <pvPortMalloc+0x118>)
 800300e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003010:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003014:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003016:	682f      	ldr	r7, [r5, #0]
 8003018:	4227      	tst	r7, r4
 800301a:	d116      	bne.n	800304a <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800301c:	2c00      	cmp	r4, #0
 800301e:	d040      	beq.n	80030a2 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8003020:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003024:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003026:	bf1c      	itt	ne
 8003028:	f023 0307 	bicne.w	r3, r3, #7
 800302c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800302e:	b163      	cbz	r3, 800304a <pvPortMalloc+0x86>
 8003030:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <pvPortMalloc+0x118>)
 8003032:	6816      	ldr	r6, [r2, #0]
 8003034:	4690      	mov	r8, r2
 8003036:	42b3      	cmp	r3, r6
 8003038:	d807      	bhi.n	800304a <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 800303a:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <pvPortMalloc+0x110>)
 800303c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800303e:	6868      	ldr	r0, [r5, #4]
 8003040:	4283      	cmp	r3, r0
 8003042:	d804      	bhi.n	800304e <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003044:	6809      	ldr	r1, [r1, #0]
 8003046:	428d      	cmp	r5, r1
 8003048:	d107      	bne.n	800305a <pvPortMalloc+0x96>
void *pvReturn = NULL;
 800304a:	2400      	movs	r4, #0
 800304c:	e029      	b.n	80030a2 <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800304e:	682c      	ldr	r4, [r5, #0]
 8003050:	2c00      	cmp	r4, #0
 8003052:	d0f7      	beq.n	8003044 <pvPortMalloc+0x80>
 8003054:	462a      	mov	r2, r5
 8003056:	4625      	mov	r5, r4
 8003058:	e7f1      	b.n	800303e <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800305a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800305c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800305e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003060:	1ac2      	subs	r2, r0, r3
 8003062:	2a10      	cmp	r2, #16
 8003064:	d90f      	bls.n	8003086 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003066:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003068:	0741      	lsls	r1, r0, #29
 800306a:	d008      	beq.n	800307e <pvPortMalloc+0xba>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	e7fe      	b.n	800307c <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800307e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003080:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003082:	f7ff ff7b 	bl	8002f7c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003086:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003088:	4913      	ldr	r1, [pc, #76]	; (80030d8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800308a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800308c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800308e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003090:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003092:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003096:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003098:	bf38      	it	cc
 800309a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800309c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800309e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80030a0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80030a2:	f000 fa53 	bl	800354c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030a6:	0763      	lsls	r3, r4, #29
 80030a8:	d008      	beq.n	80030bc <pvPortMalloc+0xf8>
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	e7fe      	b.n	80030ba <pvPortMalloc+0xf6>
}
 80030bc:	4620      	mov	r0, r4
 80030be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c2:	bf00      	nop
 80030c4:	200001a0 	.word	0x200001a0
 80030c8:	20001914 	.word	0x20001914
 80030cc:	200001a4 	.word	0x200001a4
 80030d0:	20001914 	.word	0x20001914
 80030d4:	20001920 	.word	0x20001920
 80030d8:	2000191c 	.word	0x2000191c
 80030dc:	20001918 	.word	0x20001918

080030e0 <vPortFree>:
{
 80030e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80030e2:	4604      	mov	r4, r0
 80030e4:	b370      	cbz	r0, 8003144 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <vPortFree+0x68>)
 80030e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4213      	tst	r3, r2
 80030f0:	d108      	bne.n	8003104 <vPortFree+0x24>
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	e7fe      	b.n	8003102 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003104:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003108:	b141      	cbz	r1, 800311c <vPortFree+0x3c>
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	e7fe      	b.n	800311a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800311c:	ea23 0302 	bic.w	r3, r3, r2
 8003120:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003124:	f000 f978 	bl	8003418 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <vPortFree+0x6c>)
 800312a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800312e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003130:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003134:	440b      	add	r3, r1
 8003136:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003138:	f7ff ff20 	bl	8002f7c <prvInsertBlockIntoFreeList>
}
 800313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003140:	f000 ba04 	b.w	800354c <xTaskResumeAll>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	20001914 	.word	0x20001914
 800314c:	20001918 	.word	0x20001918

08003150 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003150:	4a06      	ldr	r2, [pc, #24]	; (800316c <prvResetNextTaskUnblockTime+0x1c>)
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <prvResetNextTaskUnblockTime+0x20>)
 8003158:	b919      	cbnz	r1, 8003162 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800315a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003166:	68d2      	ldr	r2, [r2, #12]
 8003168:	6852      	ldr	r2, [r2, #4]
 800316a:	e7f8      	b.n	800315e <prvResetNextTaskUnblockTime+0xe>
 800316c:	2000192c 	.word	0x2000192c
 8003170:	20001a04 	.word	0x20001a04

08003174 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003178:	4e1b      	ldr	r6, [pc, #108]	; (80031e8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800317a:	681d      	ldr	r5, [r3, #0]
{
 800317c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800317e:	6830      	ldr	r0, [r6, #0]
{
 8003180:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003182:	3004      	adds	r0, #4
 8003184:	f7ff fdd0 	bl	8002d28 <uxListRemove>
 8003188:	4633      	mov	r3, r6
 800318a:	b940      	cbnz	r0, 800319e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800318c:	2001      	movs	r0, #1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4e16      	ldr	r6, [pc, #88]	; (80031ec <prvAddCurrentTaskToDelayedList+0x78>)
 8003192:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003194:	6832      	ldr	r2, [r6, #0]
 8003196:	4088      	lsls	r0, r1
 8003198:	ea22 0200 	bic.w	r2, r2, r0
 800319c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800319e:	1c62      	adds	r2, r4, #1
 80031a0:	d107      	bne.n	80031b2 <prvAddCurrentTaskToDelayedList+0x3e>
 80031a2:	b137      	cbz	r7, 80031b2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	4812      	ldr	r0, [pc, #72]	; (80031f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 80031a8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ae:	f7ff bd98 	b.w	8002ce2 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031b2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031b4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80031b6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031b8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80031ba:	d907      	bls.n	80031cc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80031be:	6810      	ldr	r0, [r2, #0]
 80031c0:	6819      	ldr	r1, [r3, #0]
}
 80031c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c6:	3104      	adds	r1, #4
 80031c8:	f7ff bd97 	b.w	8002cfa <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <prvAddCurrentTaskToDelayedList+0x84>)
 80031ce:	6810      	ldr	r0, [r2, #0]
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	3104      	adds	r1, #4
 80031d4:	f7ff fd91 	bl	8002cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <prvAddCurrentTaskToDelayedList+0x88>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80031de:	bf38      	it	cc
 80031e0:	601c      	strcc	r4, [r3, #0]
 80031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e4:	20001a4c 	.word	0x20001a4c
 80031e8:	20001928 	.word	0x20001928
 80031ec:	200019d4 	.word	0x200019d4
 80031f0:	20001a24 	.word	0x20001a24
 80031f4:	20001930 	.word	0x20001930
 80031f8:	2000192c 	.word	0x2000192c
 80031fc:	20001a04 	.word	0x20001a04

08003200 <xTaskCreate>:
	{
 8003200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003204:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003208:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320a:	4650      	mov	r0, sl
	{
 800320c:	460f      	mov	r7, r1
 800320e:	4699      	mov	r9, r3
 8003210:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003212:	f7ff fed7 	bl	8002fc4 <pvPortMalloc>
			if( pxStack != NULL )
 8003216:	4605      	mov	r5, r0
 8003218:	2800      	cmp	r0, #0
 800321a:	f000 8096 	beq.w	800334a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800321e:	2054      	movs	r0, #84	; 0x54
 8003220:	f7ff fed0 	bl	8002fc4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003224:	4604      	mov	r4, r0
 8003226:	2800      	cmp	r0, #0
 8003228:	f000 808c 	beq.w	8003344 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800322c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003230:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003232:	4455      	add	r5, sl
 8003234:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003236:	f025 0a07 	bic.w	sl, r5, #7
 800323a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800323e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003240:	7859      	ldrb	r1, [r3, #1]
 8003242:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003246:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800324a:	b109      	cbz	r1, 8003250 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324c:	42bb      	cmp	r3, r7
 800324e:	d1f7      	bne.n	8003240 <xTaskCreate+0x40>
 8003250:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003252:	f04f 0b00 	mov.w	fp, #0
 8003256:	2d06      	cmp	r5, #6
 8003258:	bf28      	it	cs
 800325a:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800325c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800325e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003260:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003262:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003264:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003268:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800326c:	f7ff fd36 	bl	8002cdc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003270:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003274:	f104 0018 	add.w	r0, r4, #24
 8003278:	f7ff fd30 	bl	8002cdc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800327c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003280:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003282:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003284:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003286:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800328a:	464a      	mov	r2, r9
 800328c:	4641      	mov	r1, r8
 800328e:	4650      	mov	r0, sl
 8003290:	f7ff fd82 	bl	8002d98 <pxPortInitialiseStack>
 8003294:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003296:	b106      	cbz	r6, 800329a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003298:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800329a:	f7ff fda3 	bl	8002de4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80032a0:	4e32      	ldr	r6, [pc, #200]	; (800336c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003398 <xTaskCreate+0x198>
 80032a8:	3201      	adds	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80032ac:	6835      	ldr	r5, [r6, #0]
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	d14e      	bne.n	8003350 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80032b2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d11d      	bne.n	80032f6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032ba:	eb08 0005 	add.w	r0, r8, r5
 80032be:	3514      	adds	r5, #20
 80032c0:	f7ff fd01 	bl	8002cc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032c4:	2d8c      	cmp	r5, #140	; 0x8c
 80032c6:	d1f8      	bne.n	80032ba <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80032c8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800339c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80032cc:	4d28      	ldr	r5, [pc, #160]	; (8003370 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80032ce:	4648      	mov	r0, r9
 80032d0:	f7ff fcf9 	bl	8002cc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032d4:	4628      	mov	r0, r5
 80032d6:	f7ff fcf6 	bl	8002cc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032da:	4826      	ldr	r0, [pc, #152]	; (8003374 <xTaskCreate+0x174>)
 80032dc:	f7ff fcf3 	bl	8002cc6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80032e0:	4825      	ldr	r0, [pc, #148]	; (8003378 <xTaskCreate+0x178>)
 80032e2:	f7ff fcf0 	bl	8002cc6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80032e6:	4825      	ldr	r0, [pc, #148]	; (800337c <xTaskCreate+0x17c>)
 80032e8:	f7ff fced 	bl	8002cc6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80032ec:	4b24      	ldr	r3, [pc, #144]	; (8003380 <xTaskCreate+0x180>)
 80032ee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <xTaskCreate+0x184>)
 80032f4:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80032f6:	2501      	movs	r5, #1
		uxTaskNumber++;
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80032fa:	4924      	ldr	r1, [pc, #144]	; (800338c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80032fc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80032fe:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003300:	3301      	adds	r3, #1
 8003302:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003304:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003306:	fa05 f302 	lsl.w	r3, r5, r2
 800330a:	4303      	orrs	r3, r0
 800330c:	2014      	movs	r0, #20
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	fb00 8002 	mla	r0, r0, r2, r8
 8003314:	4639      	mov	r1, r7
 8003316:	f7ff fce4 	bl	8002ce2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800331a:	f7ff fd85 	bl	8002e28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <xTaskCreate+0x190>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b163      	cbz	r3, 800333e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003324:	6833      	ldr	r3, [r6, #0]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800332a:	429a      	cmp	r2, r3
 800332c:	d207      	bcs.n	800333e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800332e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <xTaskCreate+0x194>)
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	f3bf 8f6f 	isb	sy
	}
 800333e:	4628      	mov	r0, r5
 8003340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8003344:	4628      	mov	r0, r5
 8003346:	f7ff fecb 	bl	80030e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800334a:	f04f 35ff 	mov.w	r5, #4294967295
 800334e:	e7f6      	b.n	800333e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <xTaskCreate+0x190>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ce      	bne.n	80032f6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003360:	bf98      	it	ls
 8003362:	6034      	strls	r4, [r6, #0]
 8003364:	e7c7      	b.n	80032f6 <xTaskCreate+0xf6>
 8003366:	bf00      	nop
 8003368:	200019c0 	.word	0x200019c0
 800336c:	20001928 	.word	0x20001928
 8003370:	200019ec 	.word	0x200019ec
 8003374:	20001a0c 	.word	0x20001a0c
 8003378:	20001a38 	.word	0x20001a38
 800337c:	20001a24 	.word	0x20001a24
 8003380:	2000192c 	.word	0x2000192c
 8003384:	20001930 	.word	0x20001930
 8003388:	200019d0 	.word	0x200019d0
 800338c:	200019d4 	.word	0x200019d4
 8003390:	20001a20 	.word	0x20001a20
 8003394:	e000ed04 	.word	0xe000ed04
 8003398:	20001934 	.word	0x20001934
 800339c:	200019d8 	.word	0x200019d8

080033a0 <vTaskStartScheduler>:
{
 80033a0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80033a2:	2400      	movs	r4, #0
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <vTaskStartScheduler+0x60>)
 80033a6:	9400      	str	r4, [sp, #0]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	4623      	mov	r3, r4
 80033ae:	4915      	ldr	r1, [pc, #84]	; (8003404 <vTaskStartScheduler+0x64>)
 80033b0:	4815      	ldr	r0, [pc, #84]	; (8003408 <vTaskStartScheduler+0x68>)
 80033b2:	f7ff ff25 	bl	8003200 <xTaskCreate>
	if( xReturn == pdPASS )
 80033b6:	2801      	cmp	r0, #1
 80033b8:	d114      	bne.n	80033e4 <vTaskStartScheduler+0x44>
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <vTaskStartScheduler+0x6c>)
 80033d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <vTaskStartScheduler+0x70>)
 80033d4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <vTaskStartScheduler+0x74>)
 80033d8:	601c      	str	r4, [r3, #0]
}
 80033da:	b002      	add	sp, #8
 80033dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80033e0:	f7ff bd82 	b.w	8002ee8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033e4:	3001      	adds	r0, #1
 80033e6:	d108      	bne.n	80033fa <vTaskStartScheduler+0x5a>
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	e7fe      	b.n	80033f8 <vTaskStartScheduler+0x58>
}
 80033fa:	b002      	add	sp, #8
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	bf00      	nop
 8003400:	20001a00 	.word	0x20001a00
 8003404:	0800421f 	.word	0x0800421f
 8003408:	08003685 	.word	0x08003685
 800340c:	20001a04 	.word	0x20001a04
 8003410:	20001a20 	.word	0x20001a20
 8003414:	20001a4c 	.word	0x20001a4c

08003418 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003418:	4a02      	ldr	r2, [pc, #8]	; (8003424 <vTaskSuspendAll+0xc>)
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	200019cc 	.word	0x200019cc

08003428 <xTaskIncrementTick>:
{
 8003428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342c:	4b3c      	ldr	r3, [pc, #240]	; (8003520 <xTaskIncrementTick+0xf8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d153      	bne.n	80034dc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <xTaskIncrementTick+0xfc>)
 8003436:	681c      	ldr	r4, [r3, #0]
 8003438:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800343a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800343c:	b9bc      	cbnz	r4, 800346e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <xTaskIncrementTick+0x100>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	b142      	cbz	r2, 8003458 <xTaskIncrementTick+0x30>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	e7fe      	b.n	8003456 <xTaskIncrementTick+0x2e>
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <xTaskIncrementTick+0x104>)
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	6810      	ldr	r0, [r2, #0]
 800345e:	6018      	str	r0, [r3, #0]
 8003460:	6011      	str	r1, [r2, #0]
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <xTaskIncrementTick+0x108>)
 8003464:	6813      	ldr	r3, [r2, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	f7ff fe71 	bl	8003150 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800346e:	4d31      	ldr	r5, [pc, #196]	; (8003534 <xTaskIncrementTick+0x10c>)
 8003470:	f04f 0b00 	mov.w	fp, #0
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	4f30      	ldr	r7, [pc, #192]	; (8003538 <xTaskIncrementTick+0x110>)
 8003478:	429c      	cmp	r4, r3
 800347a:	d33e      	bcc.n	80034fa <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800347c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003528 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003480:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003548 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003484:	f8d8 2000 	ldr.w	r2, [r8]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	bb72      	cbnz	r2, 80034ea <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	602a      	str	r2, [r5, #0]
					break;
 8003492:	e032      	b.n	80034fa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003494:	f106 0a04 	add.w	sl, r6, #4
 8003498:	4650      	mov	r0, sl
 800349a:	f7ff fc45 	bl	8002d28 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800349e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034a0:	b119      	cbz	r1, 80034aa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034a2:	f106 0018 	add.w	r0, r6, #24
 80034a6:	f7ff fc3f 	bl	8002d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034aa:	2201      	movs	r2, #1
 80034ac:	f04f 0e14 	mov.w	lr, #20
 80034b0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80034b2:	f8d9 3000 	ldr.w	r3, [r9]
 80034b6:	fa02 f100 	lsl.w	r1, r2, r0
 80034ba:	4319      	orrs	r1, r3
 80034bc:	4b1f      	ldr	r3, [pc, #124]	; (800353c <xTaskIncrementTick+0x114>)
 80034be:	f8c9 1000 	str.w	r1, [r9]
 80034c2:	fb0e 3000 	mla	r0, lr, r0, r3
 80034c6:	4651      	mov	r1, sl
 80034c8:	f7ff fc0b 	bl	8002ce2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80034d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80034d2:	4291      	cmp	r1, r2
 80034d4:	bf28      	it	cs
 80034d6:	f04f 0b01 	movcs.w	fp, #1
 80034da:	e7d3      	b.n	8003484 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80034de:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80034e2:	6813      	ldr	r3, [r2, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e011      	b.n	800350e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034ea:	f8d8 2000 	ldr.w	r2, [r8]
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034f2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80034f4:	428c      	cmp	r4, r1
 80034f6:	d2cd      	bcs.n	8003494 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80034f8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <xTaskIncrementTick+0x114>)
 80034fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003500:	2214      	movs	r2, #20
 8003502:	434a      	muls	r2, r1
 8003504:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003506:	2a02      	cmp	r2, #2
 8003508:	bf28      	it	cs
 800350a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <xTaskIncrementTick+0x11c>)
 8003510:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003512:	2a00      	cmp	r2, #0
 8003514:	bf18      	it	ne
 8003516:	f04f 0b01 	movne.w	fp, #1
}
 800351a:	4658      	mov	r0, fp
 800351c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003520:	200019cc 	.word	0x200019cc
 8003524:	20001a4c 	.word	0x20001a4c
 8003528:	2000192c 	.word	0x2000192c
 800352c:	20001930 	.word	0x20001930
 8003530:	20001a08 	.word	0x20001a08
 8003534:	20001a04 	.word	0x20001a04
 8003538:	20001928 	.word	0x20001928
 800353c:	20001934 	.word	0x20001934
 8003540:	200019c8 	.word	0x200019c8
 8003544:	20001a50 	.word	0x20001a50
 8003548:	200019d4 	.word	0x200019d4

0800354c <xTaskResumeAll>:
{
 800354c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003550:	4c31      	ldr	r4, [pc, #196]	; (8003618 <xTaskResumeAll+0xcc>)
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	b943      	cbnz	r3, 8003568 <xTaskResumeAll+0x1c>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	e7fe      	b.n	8003566 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003568:	f7ff fc3c 	bl	8002de4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	6824      	ldr	r4, [r4, #0]
 8003574:	b12c      	cbz	r4, 8003582 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003576:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003578:	f7ff fc56 	bl	8002e28 <vPortExitCritical>
}
 800357c:	4620      	mov	r0, r4
 800357e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <xTaskResumeAll+0xd0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f5      	beq.n	8003576 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800358a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003634 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800358e:	4f24      	ldr	r7, [pc, #144]	; (8003620 <xTaskResumeAll+0xd4>)
 8003590:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003638 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003594:	f8d9 3000 	ldr.w	r3, [r9]
 8003598:	b9e3      	cbnz	r3, 80035d4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800359a:	b10c      	cbz	r4, 80035a0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800359c:	f7ff fdd8 	bl	8003150 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035a0:	4d20      	ldr	r5, [pc, #128]	; (8003624 <xTaskResumeAll+0xd8>)
 80035a2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035a4:	b144      	cbz	r4, 80035b8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80035a6:	2701      	movs	r7, #1
 80035a8:	4e1f      	ldr	r6, [pc, #124]	; (8003628 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80035aa:	f7ff ff3d 	bl	8003428 <xTaskIncrementTick>
 80035ae:	b100      	cbz	r0, 80035b2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80035b0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035b2:	3c01      	subs	r4, #1
 80035b4:	d1f9      	bne.n	80035aa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80035b6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <xTaskResumeAll+0xdc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0da      	beq.n	8003576 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80035c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <xTaskResumeAll+0xe0>)
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80035d0:	2401      	movs	r4, #1
 80035d2:	e7d1      	b.n	8003578 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80035d8:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035de:	f104 0018 	add.w	r0, r4, #24
 80035e2:	f7ff fba1 	bl	8002d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7ff fb9e 	bl	8002d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035ec:	2014      	movs	r0, #20
 80035ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	fa05 f302 	lsl.w	r3, r5, r2
 80035f6:	430b      	orrs	r3, r1
 80035f8:	fb00 8002 	mla	r0, r0, r2, r8
 80035fc:	4631      	mov	r1, r6
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	f7ff fb6f 	bl	8002ce2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <xTaskResumeAll+0xe4>)
 8003606:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800360e:	bf24      	itt	cs
 8003610:	4b05      	ldrcs	r3, [pc, #20]	; (8003628 <xTaskResumeAll+0xdc>)
 8003612:	601d      	strcs	r5, [r3, #0]
 8003614:	e7be      	b.n	8003594 <xTaskResumeAll+0x48>
 8003616:	bf00      	nop
 8003618:	200019cc 	.word	0x200019cc
 800361c:	200019c0 	.word	0x200019c0
 8003620:	200019d4 	.word	0x200019d4
 8003624:	200019c8 	.word	0x200019c8
 8003628:	20001a50 	.word	0x20001a50
 800362c:	e000ed04 	.word	0xe000ed04
 8003630:	20001928 	.word	0x20001928
 8003634:	20001a0c 	.word	0x20001a0c
 8003638:	20001934 	.word	0x20001934

0800363c <vTaskDelay>:
	{
 800363c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800363e:	b940      	cbnz	r0, 8003652 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <vTaskDelay+0x40>)
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <vTaskDelay+0x44>)
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	b141      	cbz	r1, 800366a <vTaskDelay+0x2e>
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	e7fe      	b.n	8003668 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800366a:	f7ff fed5 	bl	8003418 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800366e:	f7ff fd81 	bl	8003174 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003672:	f7ff ff6b 	bl	800354c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003676:	2800      	cmp	r0, #0
 8003678:	d0e2      	beq.n	8003640 <vTaskDelay+0x4>
 800367a:	bd08      	pop	{r3, pc}
 800367c:	e000ed04 	.word	0xe000ed04
 8003680:	200019cc 	.word	0x200019cc

08003684 <prvIdleTask>:
{
 8003684:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003686:	4e17      	ldr	r6, [pc, #92]	; (80036e4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003688:	4c17      	ldr	r4, [pc, #92]	; (80036e8 <prvIdleTask+0x64>)
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	b963      	cbnz	r3, 80036a8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <prvIdleTask+0x68>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d9f8      	bls.n	8003688 <prvIdleTask+0x4>
				taskYIELD();
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <prvIdleTask+0x6c>)
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	e7ef      	b.n	8003688 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80036a8:	f7ff feb6 	bl	8003418 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80036ac:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80036ae:	f7ff ff4d 	bl	800354c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	d0e9      	beq.n	800368a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80036b6:	f7ff fb95 	bl	8002de4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036ba:	68f3      	ldr	r3, [r6, #12]
 80036bc:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036be:	1d28      	adds	r0, r5, #4
 80036c0:	f7ff fb32 	bl	8002d28 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80036c4:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <prvIdleTask+0x70>)
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80036d2:	f7ff fba9 	bl	8002e28 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80036d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80036d8:	f7ff fd02 	bl	80030e0 <vPortFree>
			vPortFree( pxTCB );
 80036dc:	4628      	mov	r0, r5
 80036de:	f7ff fcff 	bl	80030e0 <vPortFree>
 80036e2:	e7d2      	b.n	800368a <prvIdleTask+0x6>
 80036e4:	20001a38 	.word	0x20001a38
 80036e8:	200019c4 	.word	0x200019c4
 80036ec:	20001934 	.word	0x20001934
 80036f0:	e000ed04 	.word	0xe000ed04
 80036f4:	200019c0 	.word	0x200019c0

080036f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <vTaskSwitchContext+0x60>)
{
 80036fa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <vTaskSwitchContext+0x64>)
 8003700:	b112      	cbz	r2, 8003708 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003702:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003708:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <vTaskSwitchContext+0x68>)
 800370c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	2214      	movs	r2, #20
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f1c3 031f 	rsb	r3, r3, #31
 800371a:	435a      	muls	r2, r3
 800371c:	4911      	ldr	r1, [pc, #68]	; (8003764 <vTaskSwitchContext+0x6c>)
 800371e:	588c      	ldr	r4, [r1, r2]
 8003720:	1888      	adds	r0, r1, r2
 8003722:	b944      	cbnz	r4, 8003736 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	e7fe      	b.n	8003734 <vTaskSwitchContext+0x3c>
 8003736:	6844      	ldr	r4, [r0, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	6864      	ldr	r4, [r4, #4]
 800373c:	440a      	add	r2, r1
 800373e:	4294      	cmp	r4, r2
 8003740:	bf08      	it	eq
 8003742:	6862      	ldreq	r2, [r4, #4]
 8003744:	6044      	str	r4, [r0, #4]
 8003746:	bf08      	it	eq
 8003748:	6042      	streq	r2, [r0, #4]
 800374a:	2214      	movs	r2, #20
 800374c:	fb02 1303 	mla	r3, r2, r3, r1
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <vTaskSwitchContext+0x70>)
 8003756:	e7d5      	b.n	8003704 <vTaskSwitchContext+0xc>
 8003758:	200019cc 	.word	0x200019cc
 800375c:	20001a50 	.word	0x20001a50
 8003760:	200019d4 	.word	0x200019d4
 8003764:	20001934 	.word	0x20001934
 8003768:	20001928 	.word	0x20001928

0800376c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800376c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800376e:	4811      	ldr	r0, [pc, #68]	; (80037b4 <MX_ADC1_Init+0x48>)
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003772:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 8003774:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8003776:	2401      	movs	r4, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003778:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003782:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003784:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003786:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003788:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800378a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800378c:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800378e:	f7fc fde5 	bl	800035c <HAL_ADC_Init>
 8003792:	b108      	cbz	r0, 8003798 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8003794:	f000 f954 	bl	8003a40 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003798:	2306      	movs	r3, #6
 800379a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800379c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800379e:	a901      	add	r1, sp, #4
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <MX_ADC1_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037a2:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037a4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a6:	f7fc fd09 	bl	80001bc <HAL_ADC_ConfigChannel>
 80037aa:	b108      	cbz	r0, 80037b0 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 80037ac:	f000 f948 	bl	8003a40 <Error_Handler>
  }

}
 80037b0:	b004      	add	sp, #16
 80037b2:	bd10      	pop	{r4, pc}
 80037b4:	20001c78 	.word	0x20001c78
 80037b8:	40012400 	.word	0x40012400

080037bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c2:	2210      	movs	r2, #16
 80037c4:	2100      	movs	r1, #0
 80037c6:	a802      	add	r0, sp, #8
 80037c8:	f000 fc14 	bl	8003ff4 <memset>
  if(adcHandle->Instance==ADC1)
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_ADC_MspInit+0x54>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d11b      	bne.n	800380c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037d4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80037d8:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e0:	619a      	str	r2, [r3, #24]
 80037e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037ea:	9200      	str	r2, [sp, #0]
 80037ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	f042 0204 	orr.w	r2, r2, #4
 80037f4:	619a      	str	r2, [r3, #24]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003800:	2340      	movs	r3, #64	; 0x40
 8003802:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003804:	2303      	movs	r3, #3
 8003806:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003808:	f7fc fefa 	bl	8000600 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800380c:	b006      	add	sp, #24
 800380e:	bd10      	pop	{r4, pc}
 8003810:	40012400 	.word	0x40012400
 8003814:	40010800 	.word	0x40010800

08003818 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003818:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800381a:	f000 f9af 	bl	8003b7c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800381e:	2001      	movs	r0, #1
 8003820:	f7ff fa49 	bl	8002cb6 <osDelay>
 8003824:	e7fb      	b.n	800381e <StartDefaultTask+0x6>

08003826 <NVM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NVM_Task */
void NVM_Task(void const * argument)
{
 8003826:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NVM_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f7ff fa44 	bl	8002cb6 <osDelay>
 800382e:	e7fb      	b.n	8003828 <NVM_Task+0x2>

08003830 <COM_Task>:
{
 8003830:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003832:	4c0c      	ldr	r4, [pc, #48]	; (8003864 <COM_Task+0x34>)
 8003834:	2200      	movs	r2, #0
 8003836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800383a:	4620      	mov	r0, r4
 800383c:	f7fd f84c 	bl	80008d8 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8003840:	200a      	movs	r0, #10
 8003842:	f7fc fca9 	bl	8000198 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003846:	2201      	movs	r2, #1
 8003848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800384c:	4620      	mov	r0, r4
 800384e:	f7fd f843 	bl	80008d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003856:	f7fc fc9f 	bl	8000198 <HAL_Delay>
    osDelay(1);
 800385a:	2001      	movs	r0, #1
 800385c:	f7ff fa2b 	bl	8002cb6 <osDelay>
 8003860:	e7e8      	b.n	8003834 <COM_Task+0x4>
 8003862:	bf00      	nop
 8003864:	40011000 	.word	0x40011000

08003868 <IO_Task>:
 8003868:	b508      	push	{r3, lr}
 800386a:	2001      	movs	r0, #1
 800386c:	f7ff fa23 	bl	8002cb6 <osDelay>
 8003870:	e7fb      	b.n	800386a <IO_Task+0x2>

08003872 <Idle_Task>:
 8003872:	b508      	push	{r3, lr}
 8003874:	2001      	movs	r0, #1
 8003876:	f7ff fa1e 	bl	8002cb6 <osDelay>
 800387a:	e7fb      	b.n	8003874 <Idle_Task+0x2>

0800387c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800387c:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800387e:	4c21      	ldr	r4, [pc, #132]	; (8003904 <MX_FREERTOS_Init+0x88>)
void MX_FREERTOS_Init(void) {
 8003880:	b09a      	sub	sp, #104	; 0x68
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003882:	4626      	mov	r6, r4
 8003884:	ad01      	add	r5, sp, #4
 8003886:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388a:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800388c:	2100      	movs	r1, #0
 800388e:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003890:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003892:	f7ff f9f7 	bl	8002c84 <osThreadCreate>
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <MX_FREERTOS_Init+0x8c>)
  osThreadDef(OS_Idle_Task, Idle_Task, osPriorityIdle, 0, 128);
 8003898:	ad06      	add	r5, sp, #24
 800389a:	f104 0614 	add.w	r6, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800389e:	6018      	str	r0, [r3, #0]
  osThreadDef(OS_Idle_Task, Idle_Task, osPriorityIdle, 0, 128);
 80038a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80038a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a4:	6833      	ldr	r3, [r6, #0]
  OS_Idle_TaskHandle = osThreadCreate(osThread(OS_Idle_Task), NULL);
 80038a6:	2100      	movs	r1, #0
 80038a8:	a806      	add	r0, sp, #24
  osThreadDef(OS_Idle_Task, Idle_Task, osPriorityIdle, 0, 128);
 80038aa:	602b      	str	r3, [r5, #0]
  OS_Idle_TaskHandle = osThreadCreate(osThread(OS_Idle_Task), NULL);
 80038ac:	f7ff f9ea 	bl	8002c84 <osThreadCreate>
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <MX_FREERTOS_Init+0x90>)
  osThreadDef(OS_COM_Task, COM_Task, osPriorityNormal, 0, 512);
 80038b2:	ad0b      	add	r5, sp, #44	; 0x2c
 80038b4:	f104 0628 	add.w	r6, r4, #40	; 0x28
  OS_Idle_TaskHandle = osThreadCreate(osThread(OS_Idle_Task), NULL);
 80038b8:	6018      	str	r0, [r3, #0]
  osThreadDef(OS_COM_Task, COM_Task, osPriorityNormal, 0, 512);
 80038ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80038bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038be:	6833      	ldr	r3, [r6, #0]
  OS_COM_TaskHandle = osThreadCreate(osThread(OS_COM_Task), NULL);
 80038c0:	2100      	movs	r1, #0
 80038c2:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(OS_COM_Task, COM_Task, osPriorityNormal, 0, 512);
 80038c4:	602b      	str	r3, [r5, #0]
  OS_COM_TaskHandle = osThreadCreate(osThread(OS_COM_Task), NULL);
 80038c6:	f7ff f9dd 	bl	8002c84 <osThreadCreate>
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <MX_FREERTOS_Init+0x94>)
  osThreadDef(OS_IO_Task, IO_Task, osPriorityNormal, 0, 128);
 80038cc:	ad10      	add	r5, sp, #64	; 0x40
 80038ce:	f104 063c 	add.w	r6, r4, #60	; 0x3c
  OS_COM_TaskHandle = osThreadCreate(osThread(OS_COM_Task), NULL);
 80038d2:	6018      	str	r0, [r3, #0]
  osThreadDef(OS_IO_Task, IO_Task, osPriorityNormal, 0, 128);
 80038d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80038d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d8:	6833      	ldr	r3, [r6, #0]
  OS_IO_TaskHandle = osThreadCreate(osThread(OS_IO_Task), NULL);
 80038da:	2100      	movs	r1, #0
 80038dc:	a810      	add	r0, sp, #64	; 0x40
  osThreadDef(OS_IO_Task, IO_Task, osPriorityNormal, 0, 128);
 80038de:	602b      	str	r3, [r5, #0]
  OS_IO_TaskHandle = osThreadCreate(osThread(OS_IO_Task), NULL);
 80038e0:	f7ff f9d0 	bl	8002c84 <osThreadCreate>
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <MX_FREERTOS_Init+0x98>)
  osThreadDef(OS_NVM_Task, NVM_Task, osPriorityIdle, 0, 128);
 80038e6:	ad15      	add	r5, sp, #84	; 0x54
 80038e8:	3450      	adds	r4, #80	; 0x50
  OS_IO_TaskHandle = osThreadCreate(osThread(OS_IO_Task), NULL);
 80038ea:	6018      	str	r0, [r3, #0]
  osThreadDef(OS_NVM_Task, NVM_Task, osPriorityIdle, 0, 128);
 80038ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f0:	6823      	ldr	r3, [r4, #0]
  OS_NVM_TaskHandle = osThreadCreate(osThread(OS_NVM_Task), NULL);
 80038f2:	2100      	movs	r1, #0
 80038f4:	a815      	add	r0, sp, #84	; 0x54
  osThreadDef(OS_NVM_Task, NVM_Task, osPriorityIdle, 0, 128);
 80038f6:	602b      	str	r3, [r5, #0]
  OS_NVM_TaskHandle = osThreadCreate(osThread(OS_NVM_Task), NULL);
 80038f8:	f7ff f9c4 	bl	8002c84 <osThreadCreate>
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <MX_FREERTOS_Init+0x9c>)
 80038fe:	6018      	str	r0, [r3, #0]
}
 8003900:	b01a      	add	sp, #104	; 0x68
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	0800402c 	.word	0x0800402c
 8003908:	20001cac 	.word	0x20001cac
 800390c:	20001cb4 	.word	0x20001cb4
 8003910:	20001cb8 	.word	0x20001cb8
 8003914:	20001ca8 	.word	0x20001ca8
 8003918:	20001cb0 	.word	0x20001cb0

0800391c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	2210      	movs	r2, #16
{
 800391e:	b510      	push	{r4, lr}
 8003920:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003922:	eb0d 0002 	add.w	r0, sp, r2
 8003926:	2100      	movs	r1, #0
 8003928:	f000 fb64 	bl	8003ff4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800392e:	4c19      	ldr	r4, [pc, #100]	; (8003994 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003932:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003934:	f042 0210 	orr.w	r2, r2, #16
 8003938:	619a      	str	r2, [r3, #24]
 800393a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800393c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003940:	f002 0210 	and.w	r2, r2, #16
 8003944:	9201      	str	r2, [sp, #4]
 8003946:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	619a      	str	r2, [r3, #24]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	f002 0220 	and.w	r2, r2, #32
 8003956:	9202      	str	r2, [sp, #8]
 8003958:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	f042 0204 	orr.w	r2, r2, #4
 8003960:	619a      	str	r2, [r3, #24]
 8003962:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003964:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	9303      	str	r3, [sp, #12]
 800396c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800396e:	f7fc ffb3 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003976:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003978:	2301      	movs	r3, #1
 800397a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800397c:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	a904      	add	r1, sp, #16
 8003980:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003982:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003986:	f7fc fe3b 	bl	8000600 <HAL_GPIO_Init>

}
 800398a:	b008      	add	sp, #32
 800398c:	bd10      	pop	{r4, pc}
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	40011000 	.word	0x40011000

08003998 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003998:	2228      	movs	r2, #40	; 0x28
{
 800399a:	b530      	push	{r4, r5, lr}
 800399c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399e:	eb0d 0002 	add.w	r0, sp, r2
 80039a2:	2100      	movs	r1, #0
 80039a4:	f000 fb26 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	2214      	movs	r2, #20
 80039aa:	2100      	movs	r1, #0
 80039ac:	eb0d 0002 	add.w	r0, sp, r2
 80039b0:	f000 fb20 	bl	8003ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b4:	2210      	movs	r2, #16
 80039b6:	2100      	movs	r1, #0
 80039b8:	a801      	add	r0, sp, #4
 80039ba:	f000 fb1b 	bl	8003ff4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039c2:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80039ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ce:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80039d0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039d2:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039d4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d6:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d8:	f7fd fb8e 	bl	80010f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039dc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039de:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039e2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e4:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039e6:	4621      	mov	r1, r4
 80039e8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ea:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039ec:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f0:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039f2:	f7fd fdbf 	bl	8001574 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80039f6:	2312      	movs	r3, #18
 80039f8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80039fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039fe:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a04:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003a06:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a08:	f7fd ff04 	bl	8001814 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003a0c:	b015      	add	sp, #84	; 0x54
 8003a0e:	bd30      	pop	{r4, r5, pc}

08003a10 <main>:
{
 8003a10:	b508      	push	{r3, lr}
  HAL_Init();
 8003a12:	f7fc fb9d 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 8003a16:	f7ff ffbf 	bl	8003998 <SystemClock_Config>
  MX_GPIO_Init();
 8003a1a:	f7ff ff7f 	bl	800391c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003a1e:	f7ff fea5 	bl	800376c <MX_ADC1_Init>
  MX_FREERTOS_Init();
 8003a22:	f7ff ff2b 	bl	800387c <MX_FREERTOS_Init>
  osKernelStart();
 8003a26:	f7ff f928 	bl	8002c7a <osKernelStart>
 8003a2a:	e7fe      	b.n	8003a2a <main+0x1a>

08003a2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003a2c:	6802      	ldr	r2, [r0, #0]
 8003a2e:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d101      	bne.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003a34:	f7fc bb9e 	b.w	8000174 <HAL_IncTick>
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00

08003a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a40:	4770      	bx	lr

08003a42 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8003a42:	4770      	bx	lr

08003a44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_MspInit+0x48>)
{
 8003a46:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a48:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	619a      	str	r2, [r3, #24]
 8003a52:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a54:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a58:	f002 0201 	and.w	r2, r2, #1
 8003a5c:	9200      	str	r2, [sp, #0]
 8003a5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a66:	61da      	str	r2, [r3, #28]
 8003a68:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a6a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a74:	f7fc fd6c 	bl	8000550 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a78:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a7a:	6853      	ldr	r3, [r2, #4]
 8003a7c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a86:	b003      	add	sp, #12
 8003a88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40010000 	.word	0x40010000

08003a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a94:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8003a96:	4601      	mov	r1, r0
{
 8003a98:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2019      	movs	r0, #25
 8003a9e:	f7fc fd57 	bl	8000550 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8003aa2:	2019      	movs	r0, #25
 8003aa4:	f7fc fd96 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aaa:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aac:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ab8:	4c11      	ldr	r4, [pc, #68]	; (8003b00 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ac2:	f7fd fe77 	bl	80017b4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ac6:	f7fd fe65 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <HAL_InitTick+0x70>)
 8003acc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003ace:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003ad2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_InitTick+0x74>)
 8003ad6:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003ada:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003adc:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ade:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003ae0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003ae2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003ae6:	f7fe f837 	bl	8001b58 <HAL_TIM_Base_Init>
 8003aea:	b920      	cbnz	r0, 8003af6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7fd ff2f 	bl	8001950 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003af2:	b008      	add	sp, #32
 8003af4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7fb      	b.n	8003af2 <HAL_InitTick+0x5e>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	20001cbc 	.word	0x20001cbc
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	000f4240 	.word	0x000f4240

08003b0c <NMI_Handler>:
 8003b0c:	4770      	bx	lr

08003b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0e:	e7fe      	b.n	8003b0e <HardFault_Handler>

08003b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b10:	e7fe      	b.n	8003b10 <MemManage_Handler>

08003b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b12:	e7fe      	b.n	8003b12 <BusFault_Handler>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	e7fe      	b.n	8003b14 <UsageFault_Handler>

08003b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b16:	4770      	bx	lr

08003b18 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003b1a:	f7fd b811 	b.w	8000b40 <HAL_PCD_IRQHandler>
 8003b1e:	bf00      	nop
 8003b20:	200026f0 	.word	0x200026f0

08003b24 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <TIM1_UP_IRQHandler+0x8>)
 8003b26:	f7fd bf3d 	b.w	80019a4 <HAL_TIM_IRQHandler>
 8003b2a:	bf00      	nop
 8003b2c:	20001cbc 	.word	0x20001cbc

08003b30 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <SystemInit+0x40>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <SystemInit+0x44>)
 8003b3e:	400a      	ands	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b54:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <SystemInit+0x48>)
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	f8ff0000 	.word	0xf8ff0000
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	490e      	ldr	r1, [pc, #56]	; (8003bbc <MX_USB_DEVICE_Init+0x40>)
 8003b82:	480f      	ldr	r0, [pc, #60]	; (8003bc0 <MX_USB_DEVICE_Init+0x44>)
 8003b84:	f7fe fd69 	bl	800265a <USBD_Init>
 8003b88:	b108      	cbz	r0, 8003b8e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003b8a:	f7ff ff59 	bl	8003a40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003b8e:	490d      	ldr	r1, [pc, #52]	; (8003bc4 <MX_USB_DEVICE_Init+0x48>)
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <MX_USB_DEVICE_Init+0x44>)
 8003b92:	f7fe fd77 	bl	8002684 <USBD_RegisterClass>
 8003b96:	b108      	cbz	r0, 8003b9c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003b98:	f7ff ff52 	bl	8003a40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003b9c:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <MX_USB_DEVICE_Init+0x4c>)
 8003b9e:	4808      	ldr	r0, [pc, #32]	; (8003bc0 <MX_USB_DEVICE_Init+0x44>)
 8003ba0:	f7fe fd33 	bl	800260a <USBD_CDC_RegisterInterface>
 8003ba4:	b108      	cbz	r0, 8003baa <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8003ba6:	f7ff ff4b 	bl	8003a40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_USB_DEVICE_Init+0x44>)
 8003bac:	f7fe fd71 	bl	8002692 <USBD_Start>
 8003bb0:	b118      	cbz	r0, 8003bba <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bb6:	f7ff bf43 	b.w	8003a40 <Error_Handler>
 8003bba:	bd08      	pop	{r3, pc}
 8003bbc:	2000012c 	.word	0x2000012c
 8003bc0:	20001cfc 	.word	0x20001cfc
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	2000011c 	.word	0x2000011c

08003bcc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003bcc:	2000      	movs	r0, #0
 8003bce:	4770      	bx	lr

08003bd0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	4770      	bx	lr

08003bd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003bd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003bd6:	4c05      	ldr	r4, [pc, #20]	; (8003bec <CDC_Receive_FS+0x18>)
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fe fd24 	bl	8002628 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7fe fd27 	bl	8002634 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003be6:	2000      	movs	r0, #0
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	bf00      	nop
 8003bec:	20001cfc 	.word	0x20001cfc

08003bf0 <CDC_Init_FS>:
{
 8003bf0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003bf2:	4c06      	ldr	r4, [pc, #24]	; (8003c0c <CDC_Init_FS+0x1c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4906      	ldr	r1, [pc, #24]	; (8003c10 <CDC_Init_FS+0x20>)
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7fe fd0d 	bl	8002618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003bfe:	4905      	ldr	r1, [pc, #20]	; (8003c14 <CDC_Init_FS+0x24>)
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7fe fd11 	bl	8002628 <USBD_CDC_SetRxBuffer>
}
 8003c06:	2000      	movs	r0, #0
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20001cfc 	.word	0x20001cfc
 8003c10:	20002308 	.word	0x20002308
 8003c14:	20001f20 	.word	0x20001f20

08003c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003c18:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_PCD_MspInit+0x38>)
 8003c1c:	6802      	ldr	r2, [r0, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d112      	bne.n	8003c48 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c22:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003c26:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c28:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003c2a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c2e:	61da      	str	r2, [r3, #28]
 8003c30:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c32:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c38:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c3a:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8003c3c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c3e:	f7fc fc87 	bl	8000550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c42:	2014      	movs	r0, #20
 8003c44:	f7fc fcc6 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003c48:	b003      	add	sp, #12
 8003c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c4e:	bf00      	nop
 8003c50:	40005c00 	.word	0x40005c00

08003c54 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003c54:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8003c58:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c5c:	f7fe bd30 	b.w	80026c0 <USBD_LL_SetupStage>

08003c60 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003c60:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c64:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003c68:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c6c:	f7fe bd55 	b.w	800271a <USBD_LL_DataOutStage>

08003c70 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c70:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c76:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c7a:	f7fe bd80 	b.w	800277e <USBD_LL_DataInStage>

08003c7e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c7e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c82:	f7fe bdfc 	b.w	800287e <USBD_LL_SOF>

08003c86 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c86:	6883      	ldr	r3, [r0, #8]
{ 
 8003c88:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c8a:	2b02      	cmp	r3, #2
{ 
 8003c8c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c8e:	d001      	beq.n	8003c94 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003c90:	f7ff fed6 	bl	8003a40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003c94:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8003c98:	2101      	movs	r1, #1
 8003c9a:	f7fe fdde 	bl	800285a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c9e:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003ca6:	f7fe bdb9 	b.w	800281c <USBD_LL_Reset>
	...

08003cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003cac:	b510      	push	{r4, lr}
 8003cae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003cb0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003cb4:	f7fe fdd4 	bl	8002860 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003cb8:	69a3      	ldr	r3, [r4, #24]
 8003cba:	b123      	cbz	r3, 8003cc6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003cbc:	4a02      	ldr	r2, [pc, #8]	; (8003cc8 <HAL_PCD_SuspendCallback+0x1c>)
 8003cbe:	6913      	ldr	r3, [r2, #16]
 8003cc0:	f043 0306 	orr.w	r3, r3, #6
 8003cc4:	6113      	str	r3, [r2, #16]
 8003cc6:	bd10      	pop	{r4, pc}
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003ccc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003cd0:	f7fe bdcf 	b.w	8002872 <USBD_LL_Resume>

08003cd4 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	2208      	movs	r2, #8
{
 8003cd8:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cda:	491c      	ldr	r1, [pc, #112]	; (8003d4c <USBD_LL_Init+0x78>)
{
 8003cdc:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003cde:	481c      	ldr	r0, [pc, #112]	; (8003d50 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003ce0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003ce4:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003ce6:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003cea:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cee:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cf0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cf2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cf4:	f7fc fe0a 	bl	800090c <HAL_PCD_Init>
 8003cf8:	b108      	cbz	r0, 8003cfe <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8003cfa:	f7ff fea1 	bl	8003a40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2318      	movs	r3, #24
 8003d02:	4611      	mov	r1, r2
 8003d04:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d08:	f7fd f9de 	bl	80010c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003d0c:	2358      	movs	r3, #88	; 0x58
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d16:	f7fd f9d7 	bl	80010c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003d1a:	23c0      	movs	r3, #192	; 0xc0
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2181      	movs	r1, #129	; 0x81
 8003d20:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d24:	f7fd f9d0 	bl	80010c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003d28:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2101      	movs	r1, #1
 8003d30:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d34:	f7fd f9c8 	bl	80010c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2182      	movs	r1, #130	; 0x82
 8003d40:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d44:	f7fd f9c0 	bl	80010c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8003d48:	2000      	movs	r0, #0
 8003d4a:	bd10      	pop	{r4, pc}
 8003d4c:	40005c00 	.word	0x40005c00
 8003d50:	200026f0 	.word	0x200026f0

08003d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003d54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003d56:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d5a:	f7fc fe4d 	bl	80009f8 <HAL_PCD_Start>
 8003d5e:	2803      	cmp	r0, #3
 8003d60:	bf9a      	itte	ls
 8003d62:	4b02      	ldrls	r3, [pc, #8]	; (8003d6c <USBD_LL_Start+0x18>)
 8003d64:	5c18      	ldrbls	r0, [r3, r0]
 8003d66:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003d68:	bd08      	pop	{r3, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08004278 	.word	0x08004278

08003d70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003d70:	b510      	push	{r4, lr}
 8003d72:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003d74:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d78:	4613      	mov	r3, r2
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	f7fc fe67 	bl	8000a4e <HAL_PCD_EP_Open>
 8003d80:	2803      	cmp	r0, #3
 8003d82:	bf9a      	itte	ls
 8003d84:	4b01      	ldrls	r3, [pc, #4]	; (8003d8c <USBD_LL_OpenEP+0x1c>)
 8003d86:	5c18      	ldrbls	r0, [r3, r0]
 8003d88:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003d8a:	bd10      	pop	{r4, pc}
 8003d8c:	08004278 	.word	0x08004278

08003d90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d92:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d96:	f7fc fe7d 	bl	8000a94 <HAL_PCD_EP_Close>
 8003d9a:	2803      	cmp	r0, #3
 8003d9c:	bf9a      	itte	ls
 8003d9e:	4b02      	ldrls	r3, [pc, #8]	; (8003da8 <USBD_LL_CloseEP+0x18>)
 8003da0:	5c18      	ldrbls	r0, [r3, r0]
 8003da2:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8003da4:	bd08      	pop	{r3, pc}
 8003da6:	bf00      	nop
 8003da8:	08004278 	.word	0x08004278

08003dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003dac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003dae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003db2:	f7fd f93d 	bl	8001030 <HAL_PCD_EP_SetStall>
 8003db6:	2803      	cmp	r0, #3
 8003db8:	bf9a      	itte	ls
 8003dba:	4b02      	ldrls	r3, [pc, #8]	; (8003dc4 <USBD_LL_StallEP+0x18>)
 8003dbc:	5c18      	ldrbls	r0, [r3, r0]
 8003dbe:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003dc0:	bd08      	pop	{r3, pc}
 8003dc2:	bf00      	nop
 8003dc4:	08004278 	.word	0x08004278

08003dc8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003dc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003dca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dce:	f7fd f958 	bl	8001082 <HAL_PCD_EP_ClrStall>
 8003dd2:	2803      	cmp	r0, #3
 8003dd4:	bf9a      	itte	ls
 8003dd6:	4b02      	ldrls	r3, [pc, #8]	; (8003de0 <USBD_LL_ClearStallEP+0x18>)
 8003dd8:	5c18      	ldrbls	r0, [r3, r0]
 8003dda:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003ddc:	bd08      	pop	{r3, pc}
 8003dde:	bf00      	nop
 8003de0:	08004278 	.word	0x08004278

08003de4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003de4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003de6:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003dea:	bf45      	ittet	mi
 8003dec:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003df0:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003df4:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003df8:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003dfc:	bf58      	it	pl
 8003dfe:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8003e02:	4770      	bx	lr

08003e04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003e04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e06:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e0a:	f7fc fe0c 	bl	8000a26 <HAL_PCD_SetAddress>
 8003e0e:	2803      	cmp	r0, #3
 8003e10:	bf9a      	itte	ls
 8003e12:	4b02      	ldrls	r3, [pc, #8]	; (8003e1c <USBD_LL_SetUSBAddress+0x18>)
 8003e14:	5c18      	ldrbls	r0, [r3, r0]
 8003e16:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003e18:	bd08      	pop	{r3, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004278 	.word	0x08004278

08003e20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003e20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e22:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e26:	f7fc fe75 	bl	8000b14 <HAL_PCD_EP_Transmit>
 8003e2a:	2803      	cmp	r0, #3
 8003e2c:	bf9a      	itte	ls
 8003e2e:	4b02      	ldrls	r3, [pc, #8]	; (8003e38 <USBD_LL_Transmit+0x18>)
 8003e30:	5c18      	ldrbls	r0, [r3, r0]
 8003e32:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8003e34:	bd08      	pop	{r3, pc}
 8003e36:	bf00      	nop
 8003e38:	08004278 	.word	0x08004278

08003e3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003e3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e42:	f7fc fe48 	bl	8000ad6 <HAL_PCD_EP_Receive>
 8003e46:	2803      	cmp	r0, #3
 8003e48:	bf9a      	itte	ls
 8003e4a:	4b02      	ldrls	r3, [pc, #8]	; (8003e54 <USBD_LL_PrepareReceive+0x18>)
 8003e4c:	5c18      	ldrbls	r0, [r3, r0]
 8003e4e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003e50:	bd08      	pop	{r3, pc}
 8003e52:	bf00      	nop
 8003e54:	08004278 	.word	0x08004278

08003e58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003e58:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003e5a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e5e:	f7fc fe52 	bl	8000b06 <HAL_PCD_EP_GetRxCount>
}
 8003e62:	bd08      	pop	{r3, pc}

08003e64 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003e64:	4800      	ldr	r0, [pc, #0]	; (8003e68 <USBD_static_malloc+0x4>)
 8003e66:	4770      	bx	lr
 8003e68:	20001a54 	.word	0x20001a54

08003e6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003e6c:	4770      	bx	lr

08003e6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003e6e:	4770      	bx	lr

08003e70 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e70:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003e72:	4801      	ldr	r0, [pc, #4]	; (8003e78 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e74:	800b      	strh	r3, [r1, #0]
}
 8003e76:	4770      	bx	lr
 8003e78:	20000148 	.word	0x20000148

08003e7c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003e7c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003e7e:	4801      	ldr	r0, [pc, #4]	; (8003e84 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003e80:	800b      	strh	r3, [r1, #0]
}
 8003e82:	4770      	bx	lr
 8003e84:	2000015c 	.word	0x2000015c

08003e88 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003e88:	2300      	movs	r3, #0
{
 8003e8a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003e8c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8003e8e:	b2dc      	uxtb	r4, r3
 8003e90:	42a2      	cmp	r2, r4
 8003e92:	d800      	bhi.n	8003e96 <IntToUnicode+0xe>
  }
}
 8003e94:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8003e96:	0f04      	lsrs	r4, r0, #28
 8003e98:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003e9a:	bf94      	ite	ls
 8003e9c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003e9e:	3437      	addhi	r4, #55	; 0x37
 8003ea0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003ea4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003ea8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8003eaa:	7065      	strb	r5, [r4, #1]
 8003eac:	3301      	adds	r3, #1
 8003eae:	e7ee      	b.n	8003e8e <IntToUnicode+0x6>

08003eb0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003eb0:	231a      	movs	r3, #26
{
 8003eb2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003eb4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <USBD_FS_SerialStrDescriptor+0x2c>)
 8003eb8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003eba:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003ebc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003ebe:	18c0      	adds	r0, r0, r3
 8003ec0:	d00a      	beq.n	8003ed8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003ec4:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003ec6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003ec8:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <USBD_FS_SerialStrDescriptor+0x34>)
 8003eca:	f7ff ffdd 	bl	8003e88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4905      	ldr	r1, [pc, #20]	; (8003ee8 <USBD_FS_SerialStrDescriptor+0x38>)
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff ffd8 	bl	8003e88 <IntToUnicode>
}
 8003ed8:	4804      	ldr	r0, [pc, #16]	; (8003eec <USBD_FS_SerialStrDescriptor+0x3c>)
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	1ffff7e8 	.word	0x1ffff7e8
 8003ee0:	1ffff7ec 	.word	0x1ffff7ec
 8003ee4:	20000162 	.word	0x20000162
 8003ee8:	20000172 	.word	0x20000172
 8003eec:	20000160 	.word	0x20000160

08003ef0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003ef0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003ef2:	4c04      	ldr	r4, [pc, #16]	; (8003f04 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	4804      	ldr	r0, [pc, #16]	; (8003f08 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003ef8:	4621      	mov	r1, r4
 8003efa:	f7fe fe60 	bl	8002bbe <USBD_GetString>
}
 8003efe:	4620      	mov	r0, r4
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	bf00      	nop
 8003f04:	20002b50 	.word	0x20002b50
 8003f08:	08004295 	.word	0x08004295

08003f0c <USBD_FS_ProductStrDescriptor>:
{
 8003f0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003f0e:	4c04      	ldr	r4, [pc, #16]	; (8003f20 <USBD_FS_ProductStrDescriptor+0x14>)
 8003f10:	460a      	mov	r2, r1
 8003f12:	4804      	ldr	r0, [pc, #16]	; (8003f24 <USBD_FS_ProductStrDescriptor+0x18>)
 8003f14:	4621      	mov	r1, r4
 8003f16:	f7fe fe52 	bl	8002bbe <USBD_GetString>
}
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	bf00      	nop
 8003f20:	20002b50 	.word	0x20002b50
 8003f24:	080042a8 	.word	0x080042a8

08003f28 <USBD_FS_ConfigStrDescriptor>:
{
 8003f28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f2a:	4c04      	ldr	r4, [pc, #16]	; (8003f3c <USBD_FS_ConfigStrDescriptor+0x14>)
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	4804      	ldr	r0, [pc, #16]	; (8003f40 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003f30:	4621      	mov	r1, r4
 8003f32:	f7fe fe44 	bl	8002bbe <USBD_GetString>
}
 8003f36:	4620      	mov	r0, r4
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20002b50 	.word	0x20002b50
 8003f40:	0800427c 	.word	0x0800427c

08003f44 <USBD_FS_InterfaceStrDescriptor>:
{
 8003f44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003f46:	4c04      	ldr	r4, [pc, #16]	; (8003f58 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003f48:	460a      	mov	r2, r1
 8003f4a:	4804      	ldr	r0, [pc, #16]	; (8003f5c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	f7fe fe36 	bl	8002bbe <USBD_GetString>
}
 8003f52:	4620      	mov	r0, r4
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	20002b50 	.word	0x20002b50
 8003f5c:	08004287 	.word	0x08004287

08003f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f62:	e003      	b.n	8003f6c <LoopCopyDataInit>

08003f64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f6a:	3104      	adds	r1, #4

08003f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f6c:	480a      	ldr	r0, [pc, #40]	; (8003f98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f74:	d3f6      	bcc.n	8003f64 <CopyDataInit>
  ldr r2, =_sbss
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f78:	e002      	b.n	8003f80 <LoopFillZerobss>

08003f7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f7c:	f842 3b04 	str.w	r3, [r2], #4

08003f80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f84:	d3f9      	bcc.n	8003f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f86:	f7ff fdd3 	bl	8003b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8a:	f000 f80f 	bl	8003fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f8e:	f7ff fd3f 	bl	8003a10 <main>
  bx lr
 8003f92:	4770      	bx	lr
  ldr r3, =_sidata
 8003f94:	080042c8 	.word	0x080042c8
  ldr r0, =_sdata
 8003f98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f9c:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8003fa0:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8003fa4:	20002d50 	.word	0x20002d50

08003fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fa8:	e7fe      	b.n	8003fa8 <ADC1_2_IRQHandler>
	...

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	2500      	movs	r5, #0
 8003fb0:	4e0c      	ldr	r6, [pc, #48]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb2:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb4:	1ba4      	subs	r4, r4, r6
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	42a5      	cmp	r5, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	f000 f822 	bl	8004004 <_init>
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	4e0a      	ldr	r6, [pc, #40]	; (8003fec <__libc_init_array+0x40>)
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc6:	1ba4      	subs	r4, r4, r6
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	42a5      	cmp	r5, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fd4:	4798      	blx	r3
 8003fd6:	3501      	adds	r5, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fde:	4798      	blx	r3
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	080042c0 	.word	0x080042c0
 8003fe8:	080042c0 	.word	0x080042c0
 8003fec:	080042c0 	.word	0x080042c0
 8003ff0:	080042c4 	.word	0x080042c4

08003ff4 <memset>:
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4402      	add	r2, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
